//groq:version=0.x.x
//groq:param:myParam="abc"

// The following query exercises all parser-related features for GROQ 2 plus the experimental fragments feature.

coalesce({count($myParam) > "d" => {c["e"] => {..., null == c => {count([(!b-> || !c.c), ^.^.c->][(true > c && false <= c)][!(b->)][1000000000000000]) <= "g" => {..., b->a => {b.a => {"e": b, ...}, c-> => {"g": count(* | order(a)), "b": @}}}, !a => {..., "f": {!b->.a => {select(@.b => * | {..., "f": *[(!a[] || "f" == b)][(pt::text(c) => 2 && select([!(-1 != c)] => ([[[], 1 % -3e12, 2][!b[].b][-100..-100], (null != a || a.c != 100)][(a->c)] | order(b))) < 2)]}) != 100 => {"a": $myParam, b[] < 3e-12 => {coalesce([*{c["d"] < true => {false > c => {a => {..., "f": *[null <= a]}}, ..., b->b < "d" => {"d": -100 + 3e12 | order(b), "c": [b | order(a) | order(b)]}}, ...}, ...[(* | {"f": *[!(!b)][!a->a][c->c == 100], ..., "a": c}), @.b]][(-3e-12 > c && count([*{"b": ({pt::text(c) != 3e12 => {"a": [b, [][(!c->c || null < a)][(b[].b > true || b[].b)][1..1], -3e12 + -1][100], true == a => {!a => {..., "b": (b | order(a) | order(b))}, b[].c => {..., count(*[b->][a[].c <= false][!(select(@.a => $myParam) != -100)] | {c["g"] => {..., "d": [*[2]][(b-> || pt::text(a) < -1.1)][!(!a[].a)] | {..., "g": "d" + "c"}}, ...}) < 3e-12 => {"f": "f" + "f"}}}}, ...}), !c-> => {"f": [(1.1 == b && !c), 1.1 + -1, ^.^.a[].b][1000000000000000..100], ..., !a.c => {"a": *[!b[].a][(select([[*{"f": [(count(*[b[] < -1.1][(b-> => false && pt::text(c) > true)][(a[].c <= null || select("a" == c => b) < null)]) < "g" && coalesce(-3e-12 * 1.1, ^.^.^.c->b) == true), [][!(c <= "d")][!a->c][(-100 => b)][(coalesce((*[a][a]{a => {"a": a}, ..., a => {"a": a}}), (a->a && b.c)) < "g" && c->.b)][b <= 3e-12][(b->a && !c["b"])][-1], * | {-1.1 <= c => {"c": * | {..., pt::text(a) != 3e-12 => {null == a => {"a": a}}} | order(c), ...}, ..., "f": $myParam}][false < b][(!a.a || a->.a)][(!a.a)][1..1], ..., count(-100 / 1.1) > -3e12 => {"d": b, ..., c[].a == 3e-12 => {"g": coalesce(coalesce(b->, count(^.a->)), null), "f": 1.1 * 3e12}}}, 1000000000000000 - 3e-12][(select("a" + "a" => ^.^.^.b->) != 2 || !a->b)][(c->c || b < 3.141592653589793)] | {..., "c": ^.^.a->c}, ...[a, 3.141592653589793 / -1 | order(a), @.b]][(count(*[1...1]) <= -3e-12 || -1 > c)][!(b.c == 3e12)][(true > c || coalesce(*[1000000000000000], ^.^.^.c[]) != null)] => *{"f": (1 % -1.1)}) < 1000000000000000 && count("b" + "d") <= 2)], ..., "b": [*[c->.b], [[[*[1000000000000000]][(!c-> || !c.b)][(b > -3e12 && !c->)], ...[]]][!("a" <= a)][-100..100]][(!b->b && a->.b => null)]}}}, (coalesce($myParam, $myParam))][(!a["b"] && count(pt::text(b)) != -1)][null < c][(!b->b && null < a)][(b => 3.141592653589793 || c[])][(true <= b || "g" == b)][(count("a" + "c") > null)][-100] | order(b)) > 1)] | {"e": $myParam}, coalesce([[1000000000000000 % 1.1, ...[$myParam]], 1, (count(pt::text(a)))][100], @)) => 3e12 => {b[] > 3e12 => {..., "g": 3.141592653589793 + 3.141592653589793}, b-> => {..., count(*{a->.a <= -1 => {"d": (c["e"] == 3e12), ..., false == b => {"e": count(^.b->.c), ..., b[].c => {"f": -100 - -3e-12, a-> => {"f": "f" + "d", c[].c => {b["a"] <= null => {..., a.b => {c->b => {"e": select(^.^.^.c-> => (-1 / -3e12)), ..., pt::text(a) <= 3e-12 => {false == a => {!c[].b => {a["a"] < false => {b["b"] => {"b": [$myParam | order(c), ("a" + "e" | order(a))][-100...1]}, ...}, ...}, ..., c[].b => {"f": (*[1000000000000000]), ..., "b": *}}}}, ...}}}}}}}}) != true => {"f": select(*[100] => c | order(b)), ..., !c.a => {null => c => {!b.b => {"e": a, "d": *[(select("d" + "e" => (c)) <= false || coalesce(*[(b->a)], *) < false)][(3.141592653589793 < c)][100]}}, b-> => {null > b => {b.a < 100 => {b.a => {"a": ^.c, !c->a => {-1.1 != b => {..., a->b => {1 != a => {b["e"] != 1.1 => {c[].b <= 3.141592653589793 => {..., pt::text(b) < true => {"a": {c[] => {"g": *, ..., "d": [count(b[]), ...[@, -1.1 - -1, pt::text(c)]][1]}}, count(@) > 1000000000000000 => {select(select(^.c->b => @.a) => @) <= null => {..., "d": [{!a->c => {select(!(c[]) => ^.a) > 1 => {"c": *[(count(*[!c[]][(!a[] || !a.b)]) == null)]{..., !c[] => {pt::text(c) == null => {..., "e": @.c}, ...}}}, ...}}, ...[*[!("a" != a)][(3.141592653589793 != c || count([[2 + 3.141592653589793], (*[(a->b || b["b"] => "b")][!(select(a => (count(a) => true && count(!(!b->a)) != null)) <= false)]) | order(b), "f" + "e"]{"b": $myParam, ..., "e": {..., "d": [a, ...[$myParam]][-100]} | order(c)}) <= "c")], ...[(a), select($myParam => *{..., "b": []}), (a-> == true && c[].c)]]][coalesce($myParam, 1) != "c"]}}}}, "g": *[1...-1] | order(a)}}, ..., !c["g"] => {!b-> => {..., "g": a}, ..., "g": *[-100]}}}}}, ...}, ...}}}}}}, ...}}, "a": *[2]}, ..., -3e12 > a => {"f": *[(b == true)][1000000000000000], ...}}}}}, "a": ["g" + "d"]}, "d": ([* | {c->.c < false => {"c": @, ..., c["f"] => {!c => {"c": [-100 <= c][-100...1], ..., !c->a => {"d": [$myParam, [@.c, [-1 % 1][(b->a || true < c)] | order(c), c][null == a] | {"d": [][1]}]}}, ...}}, ...}, [([a, "c" + "g"][!(a[])][(c[].c || b[] < "d")])][(select(!(b->.b == -100) => [*[-1], ...[]]) => 1 && "b" < c)]])}, null <= b)
----
"\n" whitespace 48
"\n" whitespace 162
"coalesce" identifier 163
"(" parenLeft 171
"{" braceLeft 172
"count" identifier 173
"(" parenLeft 178
"$myParam" identifier 179
")" parenRight 187
" " whitespace 188
">" gt 189
" " whitespace 190
"\"d\"" string 191
" " whitespace 194
"=>" rocket 195
" " whitespace 197
"{" braceLeft 198
"c" identifier 199
"[" bracketLeft 200
"\"e\"" string 201
"]" bracketRight 204
" " whitespace 205
"=>" rocket 206
" " whitespace 208
"{" braceLeft 209
"..." dotDotDot 210
"," comma 213
" " whitespace 214
"null" null 215
" " whitespace 219
"==" equals 220
" " whitespace 222
"c" identifier 223
" " whitespace 224
"=>" rocket 225
" " whitespace 227
"{" braceLeft 228
"count" identifier 229
"(" parenLeft 234
"[" bracketLeft 235
"(" parenLeft 236
"!" not 237
"b" identifier 238
"->" arrow 239
" " whitespace 241
"||" or 242
" " whitespace 244
"!" not 245
"c" identifier 246
"." dot 247
"c" identifier 248
")" parenRight 249
"," comma 250
" " whitespace 251
"^" hat 252
"." dot 253
"^" hat 254
"." dot 255
"c" identifier 256
"->" arrow 257
"]" bracketRight 259
"[" bracketLeft 260
"(" parenLeft 261
"true" bool 262
" " whitespace 266
">" gt 267
" " whitespace 268
"c" identifier 269
" " whitespace 270
"&&" and 271
" " whitespace 273
"false" bool 274
" " whitespace 279
"<=" lte 280
" " whitespace 282
"c" identifier 283
")" parenRight 284
"]" bracketRight 285
"[" bracketLeft 286
"!" not 287
"(" parenLeft 288
"b" identifier 289
"->" arrow 290
")" parenRight 292
"]" bracketRight 293
"[" bracketLeft 294
"1000000000000000" integer 295
"]" bracketRight 311
")" parenRight 312
" " whitespace 313
"<=" lte 314
" " whitespace 316
"\"g\"" string 317
" " whitespace 320
"=>" rocket 321
" " whitespace 323
"{" braceLeft 324
"..." dotDotDot 325
"," comma 328
" " whitespace 329
"b" identifier 330
"->" arrow 331
"a" identifier 333
" " whitespace 334
"=>" rocket 335
" " whitespace 337
"{" braceLeft 338
"b" identifier 339
"." dot 340
"a" identifier 341
" " whitespace 342
"=>" rocket 343
" " whitespace 345
"{" braceLeft 346
"\"e\"" string 347
":" colon 350
" " whitespace 351
"b" identifier 352
"," comma 353
" " whitespace 354
"..." dotDotDot 355
"}" braceRight 358
"," comma 359
" " whitespace 360
"c" identifier 361
"->" arrow 362
" " whitespace 364
"=>" rocket 365
" " whitespace 367
"{" braceLeft 368
"\"g\"" string 369
":" colon 372
" " whitespace 373
"count" identifier 374
"(" parenLeft 379
"*" * 380
" " whitespace 381
"|" pipe 382
" " whitespace 383
"order" identifier 384
"(" parenLeft 389
"a" identifier 390
")" parenRight 391
")" parenRight 392
"," comma 393
" " whitespace 394
"\"b\"" string 395
":" colon 398
" " whitespace 399
"@" at 400
"}" braceRight 401
"}" braceRight 402
"}" braceRight 403
"," comma 404
" " whitespace 405
"!" not 406
"a" identifier 407
" " whitespace 408
"=>" rocket 409
" " whitespace 411
"{" braceLeft 412
"..." dotDotDot 413
"," comma 416
" " whitespace 417
"\"f\"" string 418
":" colon 421
" " whitespace 422
"{" braceLeft 423
"!" not 424
"b" identifier 425
"->" arrow 426
"." dot 428
"a" identifier 429
" " whitespace 430
"=>" rocket 431
" " whitespace 433
"{" braceLeft 434
"select" identifier 435
"(" parenLeft 441
"@" at 442
"." dot 443
"b" identifier 444
" " whitespace 445
"=>" rocket 446
" " whitespace 448
"*" * 449
" " whitespace 450
"|" pipe 451
" " whitespace 452
"{" braceLeft 453
"..." dotDotDot 454
"," comma 457
" " whitespace 458
"\"f\"" string 459
":" colon 462
" " whitespace 463
"*" * 464
"[" bracketLeft 465
"(" parenLeft 466
"!" not 467
"a" identifier 468
"[" bracketLeft 469
"]" bracketRight 470
" " whitespace 471
"||" or 472
" " whitespace 474
"\"f\"" string 475
" " whitespace 478
"==" equals 479
" " whitespace 481
"b" identifier 482
")" parenRight 483
"]" bracketRight 484
"[" bracketLeft 485
"(" parenLeft 486
"pt" identifier 487
"::" doubleColon 489
"text" identifier 491
"(" parenLeft 495
"c" identifier 496
")" parenRight 497
" " whitespace 498
"=>" rocket 499
" " whitespace 501
"2" integer 502
" " whitespace 503
"&&" and 504
" " whitespace 506
"select" identifier 507
"(" parenLeft 513
"[" bracketLeft 514
"!" not 515
"(" parenLeft 516
"-" - 517
"1" integer 518
" " whitespace 519
"!=" neq 520
" " whitespace 522
"c" identifier 523
")" parenRight 524
"]" bracketRight 525
" " whitespace 526
"=>" rocket 527
" " whitespace 529
"(" parenLeft 530
"[" bracketLeft 531
"[" bracketLeft 532
"[" bracketLeft 533
"]" bracketRight 534
"," comma 535
" " whitespace 536
"1" integer 537
" " whitespace 538
"%" % 539
" " whitespace 540
"-" - 541
"3e12" float 542
"," comma 546
" " whitespace 547
"2" integer 548
"]" bracketRight 549
"[" bracketLeft 550
"!" not 551
"b" identifier 552
"[" bracketLeft 553
"]" bracketRight 554
"." dot 555
"b" identifier 556
"]" bracketRight 557
"[" bracketLeft 558
"-" - 559
"100" integer 560
".." dotDot 563
"-" - 565
"100" integer 566
"]" bracketRight 569
"," comma 570
" " whitespace 571
"(" parenLeft 572
"null" null 573
" " whitespace 577
"!=" neq 578
" " whitespace 580
"a" identifier 581
" " whitespace 582
"||" or 583
" " whitespace 585
"a" identifier 586
"." dot 587
"c" identifier 588
" " whitespace 589
"!=" neq 590
" " whitespace 592
"100" integer 593
")" parenRight 596
"]" bracketRight 597
"[" bracketLeft 598
"(" parenLeft 599
"a" identifier 600
"->" arrow 601
"c" identifier 603
")" parenRight 604
"]" bracketRight 605
" " whitespace 606
"|" pipe 607
" " whitespace 608
"order" identifier 609
"(" parenLeft 614
"b" identifier 615
")" parenRight 616
")" parenRight 617
")" parenRight 618
" " whitespace 619
"<" lt 620
" " whitespace 621
"2" integer 622
")" parenRight 623
"]" bracketRight 624
"}" braceRight 625
")" parenRight 626
" " whitespace 627
"!=" neq 628
" " whitespace 630
"100" integer 631
" " whitespace 634
"=>" rocket 635
" " whitespace 637
"{" braceLeft 638
"\"a\"" string 639
":" colon 642
" " whitespace 643
"$myParam" identifier 644
"," comma 652
" " whitespace 653
"b" identifier 654
"[" bracketLeft 655
"]" bracketRight 656
" " whitespace 657
"<" lt 658
" " whitespace 659
"3e-12" float 660
" " whitespace 665
"=>" rocket 666
" " whitespace 668
"{" braceLeft 669
"coalesce" identifier 670
"(" parenLeft 678
"[" bracketLeft 679
"*" * 680
"{" braceLeft 681
"c" identifier 682
"[" bracketLeft 683
"\"d\"" string 684
"]" bracketRight 687
" " whitespace 688
"<" lt 689
" " whitespace 690
"true" bool 691
" " whitespace 695
"=>" rocket 696
" " whitespace 698
"{" braceLeft 699
"false" bool 700
" " whitespace 705
">" gt 706
" " whitespace 707
"c" identifier 708
" " whitespace 709
"=>" rocket 710
" " whitespace 712
"{" braceLeft 713
"a" identifier 714
" " whitespace 715
"=>" rocket 716
" " whitespace 718
"{" braceLeft 719
"..." dotDotDot 720
"," comma 723
" " whitespace 724
"\"f\"" string 725
":" colon 728
" " whitespace 729
"*" * 730
"[" bracketLeft 731
"null" null 732
" " whitespace 736
"<=" lte 737
" " whitespace 739
"a" identifier 740
"]" bracketRight 741
"}" braceRight 742
"}" braceRight 743
"," comma 744
" " whitespace 745
"..." dotDotDot 746
"," comma 749
" " whitespace 750
"b" identifier 751
"->" arrow 752
"b" identifier 754
" " whitespace 755
"<" lt 756
" " whitespace 757
"\"d\"" string 758
" " whitespace 761
"=>" rocket 762
" " whitespace 764
"{" braceLeft 765
"\"d\"" string 766
":" colon 769
" " whitespace 770
"-" - 771
"100" integer 772
" " whitespace 775
"+" + 776
" " whitespace 777
"3e12" float 778
" " whitespace 782
"|" pipe 783
" " whitespace 784
"order" identifier 785
"(" parenLeft 790
"b" identifier 791
")" parenRight 792
"," comma 793
" " whitespace 794
"\"c\"" string 795
":" colon 798
" " whitespace 799
"[" bracketLeft 800
"b" identifier 801
" " whitespace 802
"|" pipe 803
" " whitespace 804
"order" identifier 805
"(" parenLeft 810
"a" identifier 811
")" parenRight 812
" " whitespace 813
"|" pipe 814
" " whitespace 815
"order" identifier 816
"(" parenLeft 821
"b" identifier 822
")" parenRight 823
"]" bracketRight 824
"}" braceRight 825
"}" braceRight 826
"," comma 827
" " whitespace 828
"..." dotDotDot 829
"}" braceRight 832
"," comma 833
" " whitespace 834
"..." dotDotDot 835
"[" bracketLeft 838
"(" parenLeft 839
"*" * 840
" " whitespace 841
"|" pipe 842
" " whitespace 843
"{" braceLeft 844
"\"f\"" string 845
":" colon 848
" " whitespace 849
"*" * 850
"[" bracketLeft 851
"!" not 852
"(" parenLeft 853
"!" not 854
"b" identifier 855
")" parenRight 856
"]" bracketRight 857
"[" bracketLeft 858
"!" not 859
"a" identifier 860
"->" arrow 861
"a" identifier 863
"]" bracketRight 864
"[" bracketLeft 865
"c" identifier 866
"->" arrow 867
"c" identifier 869
" " whitespace 870
"==" equals 871
" " whitespace 873
"100" integer 874
"]" bracketRight 877
"," comma 878
" " whitespace 879
"..." dotDotDot 880
"," comma 883
" " whitespace 884
"\"a\"" string 885
":" colon 888
" " whitespace 889
"c" identifier 890
"}" braceRight 891
")" parenRight 892
"," comma 893
" " whitespace 894
"@" at 895
"." dot 896
"b" identifier 897
"]" bracketRight 898
"]" bracketRight 899
"[" bracketLeft 900
"(" parenLeft 901
"-" - 902
"3e-12" float 903
" " whitespace 908
">" gt 909
" " whitespace 910
"c" identifier 911
" " whitespace 912
"&&" and 913
" " whitespace 915
"count" identifier 916
"(" parenLeft 921
"[" bracketLeft 922
"*" * 923
"{" braceLeft 924
"\"b\"" string 925
":" colon 928
" " whitespace 929
"(" parenLeft 930
"{" braceLeft 931
"pt" identifier 932
"::" doubleColon 934
"text" identifier 936
"(" parenLeft 940
"c" identifier 941
")" parenRight 942
" " whitespace 943
"!=" neq 944
" " whitespace 946
"3e12" float 947
" " whitespace 951
"=>" rocket 952
" " whitespace 954
"{" braceLeft 955
"\"a\"" string 956
":" colon 959
" " whitespace 960
"[" bracketLeft 961
"b" identifier 962
"," comma 963
" " whitespace 964
"[" bracketLeft 965
"]" bracketRight 966
"[" bracketLeft 967
"(" parenLeft 968
"!" not 969
"c" identifier 970
"->" arrow 971
"c" identifier 973
" " whitespace 974
"||" or 975
" " whitespace 977
"null" null 978
" " whitespace 982
"<" lt 983
" " whitespace 984
"a" identifier 985
")" parenRight 986
"]" bracketRight 987
"[" bracketLeft 988
"(" parenLeft 989
"b" identifier 990
"[" bracketLeft 991
"]" bracketRight 992
"." dot 993
"b" identifier 994
" " whitespace 995
">" gt 996
" " whitespace 997
"true" bool 998
" " whitespace 1002
"||" or 1003
" " whitespace 1005
"b" identifier 1006
"[" bracketLeft 1007
"]" bracketRight 1008
"." dot 1009
"b" identifier 1010
")" parenRight 1011
"]" bracketRight 1012
"[" bracketLeft 1013
"1" integer 1014
".." dotDot 1015
"1" integer 1017
"]" bracketRight 1018
"," comma 1019
" " whitespace 1020
"-" - 1021
"3e12" float 1022
" " whitespace 1026
"+" + 1027
" " whitespace 1028
"-" - 1029
"1" integer 1030
"]" bracketRight 1031
"[" bracketLeft 1032
"100" integer 1033
"]" bracketRight 1036
"," comma 1037
" " whitespace 1038
"true" bool 1039
" " whitespace 1043
"==" equals 1044
" " whitespace 1046
"a" identifier 1047
" " whitespace 1048
"=>" rocket 1049
" " whitespace 1051
"{" braceLeft 1052
"!" not 1053
"a" identifier 1054
" " whitespace 1055
"=>" rocket 1056
" " whitespace 1058
"{" braceLeft 1059
"..." dotDotDot 1060
"," comma 1063
" " whitespace 1064
"\"b\"" string 1065
":" colon 1068
" " whitespace 1069
"(" parenLeft 1070
"b" identifier 1071
" " whitespace 1072
"|" pipe 1073
" " whitespace 1074
"order" identifier 1075
"(" parenLeft 1080
"a" identifier 1081
")" parenRight 1082
" " whitespace 1083
"|" pipe 1084
" " whitespace 1085
"order" identifier 1086
"(" parenLeft 1091
"b" identifier 1092
")" parenRight 1093
")" parenRight 1094
"}" braceRight 1095
"," comma 1096
" " whitespace 1097
"b" identifier 1098
"[" bracketLeft 1099
"]" bracketRight 1100
"." dot 1101
"c" identifier 1102
" " whitespace 1103
"=>" rocket 1104
" " whitespace 1106
"{" braceLeft 1107
"..." dotDotDot 1108
"," comma 1111
" " whitespace 1112
"count" identifier 1113
"(" parenLeft 1118
"*" * 1119
"[" bracketLeft 1120
"b" identifier 1121
"->" arrow 1122
"]" bracketRight 1124
"[" bracketLeft 1125
"a" identifier 1126
"[" bracketLeft 1127
"]" bracketRight 1128
"." dot 1129
"c" identifier 1130
" " whitespace 1131
"<=" lte 1132
" " whitespace 1134
"false" bool 1135
"]" bracketRight 1140
"[" bracketLeft 1141
"!" not 1142
"(" parenLeft 1143
"select" identifier 1144
"(" parenLeft 1150
"@" at 1151
"." dot 1152
"a" identifier 1153
" " whitespace 1154
"=>" rocket 1155
" " whitespace 1157
"$myParam" identifier 1158
")" parenRight 1166
" " whitespace 1167
"!=" neq 1168
" " whitespace 1170
"-" - 1171
"100" integer 1172
")" parenRight 1175
"]" bracketRight 1176
" " whitespace 1177
"|" pipe 1178
" " whitespace 1179
"{" braceLeft 1180
"c" identifier 1181
"[" bracketLeft 1182
"\"g\"" string 1183
"]" bracketRight 1186
" " whitespace 1187
"=>" rocket 1188
" " whitespace 1190
"{" braceLeft 1191
"..." dotDotDot 1192
"," comma 1195
" " whitespace 1196
"\"d\"" string 1197
":" colon 1200
" " whitespace 1201
"[" bracketLeft 1202
"*" * 1203
"[" bracketLeft 1204
"2" integer 1205
"]" bracketRight 1206
"]" bracketRight 1207
"[" bracketLeft 1208
"(" parenLeft 1209
"b" identifier 1210
"->" arrow 1211
" " whitespace 1213
"||" or 1214
" " whitespace 1216
"pt" identifier 1217
"::" doubleColon 1219
"text" identifier 1221
"(" parenLeft 1225
"a" identifier 1226
")" parenRight 1227
" " whitespace 1228
"<" lt 1229
" " whitespace 1230
"-" - 1231
"1.1" float 1232
")" parenRight 1235
"]" bracketRight 1236
"[" bracketLeft 1237
"!" not 1238
"(" parenLeft 1239
"!" not 1240
"a" identifier 1241
"[" bracketLeft 1242
"]" bracketRight 1243
"." dot 1244
"a" identifier 1245
")" parenRight 1246
"]" bracketRight 1247
" " whitespace 1248
"|" pipe 1249
" " whitespace 1250
"{" braceLeft 1251
"..." dotDotDot 1252
"," comma 1255
" " whitespace 1256
"\"g\"" string 1257
":" colon 1260
" " whitespace 1261
"\"d\"" string 1262
" " whitespace 1265
"+" + 1266
" " whitespace 1267
"\"c\"" string 1268
"}" braceRight 1271
"}" braceRight 1272
"," comma 1273
" " whitespace 1274
"..." dotDotDot 1275
"}" braceRight 1278
")" parenRight 1279
" " whitespace 1280
"<" lt 1281
" " whitespace 1282
"3e-12" float 1283
" " whitespace 1288
"=>" rocket 1289
" " whitespace 1291
"{" braceLeft 1292
"\"f\"" string 1293
":" colon 1296
" " whitespace 1297
"\"f\"" string 1298
" " whitespace 1301
"+" + 1302
" " whitespace 1303
"\"f\"" string 1304
"}" braceRight 1307
"}" braceRight 1308
"}" braceRight 1309
"}" braceRight 1310
"," comma 1311
" " whitespace 1312
"..." dotDotDot 1313
"}" braceRight 1316
")" parenRight 1317
"," comma 1318
" " whitespace 1319
"!" not 1320
"c" identifier 1321
"->" arrow 1322
" " whitespace 1324
"=>" rocket 1325
" " whitespace 1327
"{" braceLeft 1328
"\"f\"" string 1329
":" colon 1332
" " whitespace 1333
"[" bracketLeft 1334
"(" parenLeft 1335
"1.1" float 1336
" " whitespace 1339
"==" equals 1340
" " whitespace 1342
"b" identifier 1343
" " whitespace 1344
"&&" and 1345
" " whitespace 1347
"!" not 1348
"c" identifier 1349
")" parenRight 1350
"," comma 1351
" " whitespace 1352
"1.1" float 1353
" " whitespace 1356
"+" + 1357
" " whitespace 1358
"-" - 1359
"1" integer 1360
"," comma 1361
" " whitespace 1362
"^" hat 1363
"." dot 1364
"^" hat 1365
"." dot 1366
"a" identifier 1367
"[" bracketLeft 1368
"]" bracketRight 1369
"." dot 1370
"b" identifier 1371
"]" bracketRight 1372
"[" bracketLeft 1373
"1000000000000000" integer 1374
".." dotDot 1390
"100" integer 1392
"]" bracketRight 1395
"," comma 1396
" " whitespace 1397
"..." dotDotDot 1398
"," comma 1401
" " whitespace 1402
"!" not 1403
"a" identifier 1404
"." dot 1405
"c" identifier 1406
" " whitespace 1407
"=>" rocket 1408
" " whitespace 1410
"{" braceLeft 1411
"\"a\"" string 1412
":" colon 1415
" " whitespace 1416
"*" * 1417
"[" bracketLeft 1418
"!" not 1419
"b" identifier 1420
"[" bracketLeft 1421
"]" bracketRight 1422
"." dot 1423
"a" identifier 1424
"]" bracketRight 1425
"[" bracketLeft 1426
"(" parenLeft 1427
"select" identifier 1428
"(" parenLeft 1434
"[" bracketLeft 1435
"[" bracketLeft 1436
"*" * 1437
"{" braceLeft 1438
"\"f\"" string 1439
":" colon 1442
" " whitespace 1443
"[" bracketLeft 1444
"(" parenLeft 1445
"count" identifier 1446
"(" parenLeft 1451
"*" * 1452
"[" bracketLeft 1453
"b" identifier 1454
"[" bracketLeft 1455
"]" bracketRight 1456
" " whitespace 1457
"<" lt 1458
" " whitespace 1459
"-" - 1460
"1.1" float 1461
"]" bracketRight 1464
"[" bracketLeft 1465
"(" parenLeft 1466
"b" identifier 1467
"->" arrow 1468
" " whitespace 1470
"=>" rocket 1471
" " whitespace 1473
"false" bool 1474
" " whitespace 1479
"&&" and 1480
" " whitespace 1482
"pt" identifier 1483
"::" doubleColon 1485
"text" identifier 1487
"(" parenLeft 1491
"c" identifier 1492
")" parenRight 1493
" " whitespace 1494
">" gt 1495
" " whitespace 1496
"true" bool 1497
")" parenRight 1501
"]" bracketRight 1502
"[" bracketLeft 1503
"(" parenLeft 1504
"a" identifier 1505
"[" bracketLeft 1506
"]" bracketRight 1507
"." dot 1508
"c" identifier 1509
" " whitespace 1510
"<=" lte 1511
" " whitespace 1513
"null" null 1514
" " whitespace 1518
"||" or 1519
" " whitespace 1521
"select" identifier 1522
"(" parenLeft 1528
"\"a\"" string 1529
" " whitespace 1532
"==" equals 1533
" " whitespace 1535
"c" identifier 1536
" " whitespace 1537
"=>" rocket 1538
" " whitespace 1540
"b" identifier 1541
")" parenRight 1542
" " whitespace 1543
"<" lt 1544
" " whitespace 1545
"null" null 1546
")" parenRight 1550
"]" bracketRight 1551
")" parenRight 1552
" " whitespace 1553
"<" lt 1554
" " whitespace 1555
"\"g\"" string 1556
" " whitespace 1559
"&&" and 1560
" " whitespace 1562
"coalesce" identifier 1563
"(" parenLeft 1571
"-" - 1572
"3e-12" float 1573
" " whitespace 1578
"*" * 1579
" " whitespace 1580
"1.1" float 1581
"," comma 1584
" " whitespace 1585
"^" hat 1586
"." dot 1587
"^" hat 1588
"." dot 1589
"^" hat 1590
"." dot 1591
"c" identifier 1592
"->" arrow 1593
"b" identifier 1595
")" parenRight 1596
" " whitespace 1597
"==" equals 1598
" " whitespace 1600
"true" bool 1601
")" parenRight 1605
"," comma 1606
" " whitespace 1607
"[" bracketLeft 1608
"]" bracketRight 1609
"[" bracketLeft 1610
"!" not 1611
"(" parenLeft 1612
"c" identifier 1613
" " whitespace 1614
"<=" lte 1615
" " whitespace 1617
"\"d\"" string 1618
")" parenRight 1621
"]" bracketRight 1622
"[" bracketLeft 1623
"!" not 1624
"a" identifier 1625
"->" arrow 1626
"c" identifier 1628
"]" bracketRight 1629
"[" bracketLeft 1630
"(" parenLeft 1631
"-" - 1632
"100" integer 1633
" " whitespace 1636
"=>" rocket 1637
" " whitespace 1639
"b" identifier 1640
")" parenRight 1641
"]" bracketRight 1642
"[" bracketLeft 1643
"(" parenLeft 1644
"coalesce" identifier 1645
"(" parenLeft 1653
"(" parenLeft 1654
"*" * 1655
"[" bracketLeft 1656
"a" identifier 1657
"]" bracketRight 1658
"[" bracketLeft 1659
"a" identifier 1660
"]" bracketRight 1661
"{" braceLeft 1662
"a" identifier 1663
" " whitespace 1664
"=>" rocket 1665
" " whitespace 1667
"{" braceLeft 1668
"\"a\"" string 1669
":" colon 1672
" " whitespace 1673
"a" identifier 1674
"}" braceRight 1675
"," comma 1676
" " whitespace 1677
"..." dotDotDot 1678
"," comma 1681
" " whitespace 1682
"a" identifier 1683
" " whitespace 1684
"=>" rocket 1685
" " whitespace 1687
"{" braceLeft 1688
"\"a\"" string 1689
":" colon 1692
" " whitespace 1693
"a" identifier 1694
"}" braceRight 1695
"}" braceRight 1696
")" parenRight 1697
"," comma 1698
" " whitespace 1699
"(" parenLeft 1700
"a" identifier 1701
"->" arrow 1702
"a" identifier 1704
" " whitespace 1705
"&&" and 1706
" " whitespace 1708
"b" identifier 1709
"." dot 1710
"c" identifier 1711
")" parenRight 1712
")" parenRight 1713
" " whitespace 1714
"<" lt 1715
" " whitespace 1716
"\"g\"" string 1717
" " whitespace 1720
"&&" and 1721
" " whitespace 1723
"c" identifier 1724
"->" arrow 1725
"." dot 1727
"b" identifier 1728
")" parenRight 1729
"]" bracketRight 1730
"[" bracketLeft 1731
"b" identifier 1732
" " whitespace 1733
"<=" lte 1734
" " whitespace 1736
"3e-12" float 1737
"]" bracketRight 1742
"[" bracketLeft 1743
"(" parenLeft 1744
"b" identifier 1745
"->" arrow 1746
"a" identifier 1748
" " whitespace 1749
"&&" and 1750
" " whitespace 1752
"!" not 1753
"c" identifier 1754
"[" bracketLeft 1755
"\"b\"" string 1756
"]" bracketRight 1759
")" parenRight 1760
"]" bracketRight 1761
"[" bracketLeft 1762
"-" - 1763
"1" integer 1764
"]" bracketRight 1765
"," comma 1766
" " whitespace 1767
"*" * 1768
" " whitespace 1769
"|" pipe 1770
" " whitespace 1771
"{" braceLeft 1772
"-" - 1773
"1.1" float 1774
" " whitespace 1777
"<=" lte 1778
" " whitespace 1780
"c" identifier 1781
" " whitespace 1782
"=>" rocket 1783
" " whitespace 1785
"{" braceLeft 1786
"\"c\"" string 1787
":" colon 1790
" " whitespace 1791
"*" * 1792
" " whitespace 1793
"|" pipe 1794
" " whitespace 1795
"{" braceLeft 1796
"..." dotDotDot 1797
"," comma 1800
" " whitespace 1801
"pt" identifier 1802
"::" doubleColon 1804
"text" identifier 1806
"(" parenLeft 1810
"a" identifier 1811
")" parenRight 1812
" " whitespace 1813
"!=" neq 1814
" " whitespace 1816
"3e-12" float 1817
" " whitespace 1822
"=>" rocket 1823
" " whitespace 1825
"{" braceLeft 1826
"null" null 1827
" " whitespace 1831
"==" equals 1832
" " whitespace 1834
"a" identifier 1835
" " whitespace 1836
"=>" rocket 1837
" " whitespace 1839
"{" braceLeft 1840
"\"a\"" string 1841
":" colon 1844
" " whitespace 1845
"a" identifier 1846
"}" braceRight 1847
"}" braceRight 1848
"}" braceRight 1849
" " whitespace 1850
"|" pipe 1851
" " whitespace 1852
"order" identifier 1853
"(" parenLeft 1858
"c" identifier 1859
")" parenRight 1860
"," comma 1861
" " whitespace 1862
"..." dotDotDot 1863
"}" braceRight 1866
"," comma 1867
" " whitespace 1868
"..." dotDotDot 1869
"," comma 1872
" " whitespace 1873
"\"f\"" string 1874
":" colon 1877
" " whitespace 1878
"$myParam" identifier 1879
"}" braceRight 1887
"]" bracketRight 1888
"[" bracketLeft 1889
"false" bool 1890
" " whitespace 1895
"<" lt 1896
" " whitespace 1897
"b" identifier 1898
"]" bracketRight 1899
"[" bracketLeft 1900
"(" parenLeft 1901
"!" not 1902
"a" identifier 1903
"." dot 1904
"a" identifier 1905
" " whitespace 1906
"||" or 1907
" " whitespace 1909
"a" identifier 1910
"->" arrow 1911
"." dot 1913
"a" identifier 1914
")" parenRight 1915
"]" bracketRight 1916
"[" bracketLeft 1917
"(" parenLeft 1918
"!" not 1919
"a" identifier 1920
"." dot 1921
"a" identifier 1922
")" parenRight 1923
"]" bracketRight 1924
"[" bracketLeft 1925
"1" integer 1926
".." dotDot 1927
"1" integer 1929
"]" bracketRight 1930
"," comma 1931
" " whitespace 1932
"..." dotDotDot 1933
"," comma 1936
" " whitespace 1937
"count" identifier 1938
"(" parenLeft 1943
"-" - 1944
"100" integer 1945
" " whitespace 1948
"/" / 1949
" " whitespace 1950
"1.1" float 1951
")" parenRight 1954
" " whitespace 1955
">" gt 1956
" " whitespace 1957
"-" - 1958
"3e12" float 1959
" " whitespace 1963
"=>" rocket 1964
" " whitespace 1966
"{" braceLeft 1967
"\"d\"" string 1968
":" colon 1971
" " whitespace 1972
"b" identifier 1973
"," comma 1974
" " whitespace 1975
"..." dotDotDot 1976
"," comma 1979
" " whitespace 1980
"c" identifier 1981
"[" bracketLeft 1982
"]" bracketRight 1983
"." dot 1984
"a" identifier 1985
" " whitespace 1986
"==" equals 1987
" " whitespace 1989
"3e-12" float 1990
" " whitespace 1995
"=>" rocket 1996
" " whitespace 1998
"{" braceLeft 1999
"\"g\"" string 2000
":" colon 2003
" " whitespace 2004
"coalesce" identifier 2005
"(" parenLeft 2013
"coalesce" identifier 2014
"(" parenLeft 2022
"b" identifier 2023
"->" arrow 2024
"," comma 2026
" " whitespace 2027
"count" identifier 2028
"(" parenLeft 2033
"^" hat 2034
"." dot 2035
"a" identifier 2036
"->" arrow 2037
")" parenRight 2039
")" parenRight 2040
"," comma 2041
" " whitespace 2042
"null" null 2043
")" parenRight 2047
"," comma 2048
" " whitespace 2049
"\"f\"" string 2050
":" colon 2053
" " whitespace 2054
"1.1" float 2055
" " whitespace 2058
"*" * 2059
" " whitespace 2060
"3e12" float 2061
"}" braceRight 2065
"}" braceRight 2066
"}" braceRight 2067
"," comma 2068
" " whitespace 2069
"1000000000000000" integer 2070
" " whitespace 2086
"-" - 2087
" " whitespace 2088
"3e-12" float 2089
"]" bracketRight 2094
"[" bracketLeft 2095
"(" parenLeft 2096
"select" identifier 2097
"(" parenLeft 2103
"\"a\"" string 2104
" " whitespace 2107
"+" + 2108
" " whitespace 2109
"\"a\"" string 2110
" " whitespace 2113
"=>" rocket 2114
" " whitespace 2116
"^" hat 2117
"." dot 2118
"^" hat 2119
"." dot 2120
"^" hat 2121
"." dot 2122
"b" identifier 2123
"->" arrow 2124
")" parenRight 2126
" " whitespace 2127
"!=" neq 2128
" " whitespace 2130
"2" integer 2131
" " whitespace 2132
"||" or 2133
" " whitespace 2135
"!" not 2136
"a" identifier 2137
"->" arrow 2138
"b" identifier 2140
")" parenRight 2141
"]" bracketRight 2142
"[" bracketLeft 2143
"(" parenLeft 2144
"c" identifier 2145
"->" arrow 2146
"c" identifier 2148
" " whitespace 2149
"||" or 2150
" " whitespace 2152
"b" identifier 2153
" " whitespace 2154
"<" lt 2155
" " whitespace 2156
"3.141592653589793" float 2157
")" parenRight 2174
"]" bracketRight 2175
" " whitespace 2176
"|" pipe 2177
" " whitespace 2178
"{" braceLeft 2179
"..." dotDotDot 2180
"," comma 2183
" " whitespace 2184
"\"c\"" string 2185
":" colon 2188
" " whitespace 2189
"^" hat 2190
"." dot 2191
"^" hat 2192
"." dot 2193
"a" identifier 2194
"->" arrow 2195
"c" identifier 2197
"}" braceRight 2198
"," comma 2199
" " whitespace 2200
"..." dotDotDot 2201
"[" bracketLeft 2204
"a" identifier 2205
"," comma 2206
" " whitespace 2207
"3.141592653589793" float 2208
" " whitespace 2225
"/" / 2226
" " whitespace 2227
"-" - 2228
"1" integer 2229
" " whitespace 2230
"|" pipe 2231
" " whitespace 2232
"order" identifier 2233
"(" parenLeft 2238
"a" identifier 2239
")" parenRight 2240
"," comma 2241
" " whitespace 2242
"@" at 2243
"." dot 2244
"b" identifier 2245
"]" bracketRight 2246
"]" bracketRight 2247
"[" bracketLeft 2248
"(" parenLeft 2249
"count" identifier 2250
"(" parenLeft 2255
"*" * 2256
"[" bracketLeft 2257
"1" integer 2258
"..." dotDotDot 2259
"1" integer 2262
"]" bracketRight 2263
")" parenRight 2264
" " whitespace 2265
"<=" lte 2266
" " whitespace 2268
"-" - 2269
"3e-12" float 2270
" " whitespace 2275
"||" or 2276
" " whitespace 2278
"-" - 2279
"1" integer 2280
" " whitespace 2281
">" gt 2282
" " whitespace 2283
"c" identifier 2284
")" parenRight 2285
"]" bracketRight 2286
"[" bracketLeft 2287
"!" not 2288
"(" parenLeft 2289
"b" identifier 2290
"." dot 2291
"c" identifier 2292
" " whitespace 2293
"==" equals 2294
" " whitespace 2296
"3e12" float 2297
")" parenRight 2301
"]" bracketRight 2302
"[" bracketLeft 2303
"(" parenLeft 2304
"true" bool 2305
" " whitespace 2309
">" gt 2310
" " whitespace 2311
"c" identifier 2312
" " whitespace 2313
"||" or 2314
" " whitespace 2316
"coalesce" identifier 2317
"(" parenLeft 2325
"*" * 2326
"[" bracketLeft 2327
"1000000000000000" integer 2328
"]" bracketRight 2344
"," comma 2345
" " whitespace 2346
"^" hat 2347
"." dot 2348
"^" hat 2349
"." dot 2350
"^" hat 2351
"." dot 2352
"c" identifier 2353
"[" bracketLeft 2354
"]" bracketRight 2355
")" parenRight 2356
" " whitespace 2357
"!=" neq 2358
" " whitespace 2360
"null" null 2361
")" parenRight 2365
"]" bracketRight 2366
" " whitespace 2367
"=>" rocket 2368
" " whitespace 2370
"*" * 2371
"{" braceLeft 2372
"\"f\"" string 2373
":" colon 2376
" " whitespace 2377
"(" parenLeft 2378
"1" integer 2379
" " whitespace 2380
"%" % 2381
" " whitespace 2382
"-" - 2383
"1.1" float 2384
")" parenRight 2387
"}" braceRight 2388
")" parenRight 2389
" " whitespace 2390
"<" lt 2391
" " whitespace 2392
"1000000000000000" integer 2393
" " whitespace 2409
"&&" and 2410
" " whitespace 2412
"count" identifier 2413
"(" parenLeft 2418
"\"b\"" string 2419
" " whitespace 2422
"+" + 2423
" " whitespace 2424
"\"d\"" string 2425
")" parenRight 2428
" " whitespace 2429
"<=" lte 2430
" " whitespace 2432
"2" integer 2433
")" parenRight 2434
"]" bracketRight 2435
"," comma 2436
" " whitespace 2437
"..." dotDotDot 2438
"," comma 2441
" " whitespace 2442
"\"b\"" string 2443
":" colon 2446
" " whitespace 2447
"[" bracketLeft 2448
"*" * 2449
"[" bracketLeft 2450
"c" identifier 2451
"->" arrow 2452
"." dot 2454
"b" identifier 2455
"]" bracketRight 2456
"," comma 2457
" " whitespace 2458
"[" bracketLeft 2459
"[" bracketLeft 2460
"[" bracketLeft 2461
"*" * 2462
"[" bracketLeft 2463
"1000000000000000" integer 2464
"]" bracketRight 2480
"]" bracketRight 2481
"[" bracketLeft 2482
"(" parenLeft 2483
"!" not 2484
"c" identifier 2485
"->" arrow 2486
" " whitespace 2488
"||" or 2489
" " whitespace 2491
"!" not 2492
"c" identifier 2493
"." dot 2494
"b" identifier 2495
")" parenRight 2496
"]" bracketRight 2497
"[" bracketLeft 2498
"(" parenLeft 2499
"b" identifier 2500
" " whitespace 2501
">" gt 2502
" " whitespace 2503
"-" - 2504
"3e12" float 2505
" " whitespace 2509
"&&" and 2510
" " whitespace 2512
"!" not 2513
"c" identifier 2514
"->" arrow 2515
")" parenRight 2517
"]" bracketRight 2518
"," comma 2519
" " whitespace 2520
"..." dotDotDot 2521
"[" bracketLeft 2524
"]" bracketRight 2525
"]" bracketRight 2526
"]" bracketRight 2527
"[" bracketLeft 2528
"!" not 2529
"(" parenLeft 2530
"\"a\"" string 2531
" " whitespace 2534
"<=" lte 2535
" " whitespace 2537
"a" identifier 2538
")" parenRight 2539
"]" bracketRight 2540
"[" bracketLeft 2541
"-" - 2542
"100" integer 2543
".." dotDot 2546
"100" integer 2548
"]" bracketRight 2551
"]" bracketRight 2552
"[" bracketLeft 2553
"(" parenLeft 2554
"!" not 2555
"b" identifier 2556
"->" arrow 2557
"b" identifier 2559
" " whitespace 2560
"&&" and 2561
" " whitespace 2563
"a" identifier 2564
"->" arrow 2565
"." dot 2567
"b" identifier 2568
" " whitespace 2569
"=>" rocket 2570
" " whitespace 2572
"null" null 2573
")" parenRight 2577
"]" bracketRight 2578
"}" braceRight 2579
"}" braceRight 2580
"}" braceRight 2581
"," comma 2582
" " whitespace 2583
"(" parenLeft 2584
"coalesce" identifier 2585
"(" parenLeft 2593
"$myParam" identifier 2594
"," comma 2602
" " whitespace 2603
"$myParam" identifier 2604
")" parenRight 2612
")" parenRight 2613
"]" bracketRight 2614
"[" bracketLeft 2615
"(" parenLeft 2616
"!" not 2617
"a" identifier 2618
"[" bracketLeft 2619
"\"b\"" string 2620
"]" bracketRight 2623
" " whitespace 2624
"&&" and 2625
" " whitespace 2627
"count" identifier 2628
"(" parenLeft 2633
"pt" identifier 2634
"::" doubleColon 2636
"text" identifier 2638
"(" parenLeft 2642
"b" identifier 2643
")" parenRight 2644
")" parenRight 2645
" " whitespace 2646
"!=" neq 2647
" " whitespace 2649
"-" - 2650
"1" integer 2651
")" parenRight 2652
"]" bracketRight 2653
"[" bracketLeft 2654
"null" null 2655
" " whitespace 2659
"<" lt 2660
" " whitespace 2661
"c" identifier 2662
"]" bracketRight 2663
"[" bracketLeft 2664
"(" parenLeft 2665
"!" not 2666
"b" identifier 2667
"->" arrow 2668
"b" identifier 2670
" " whitespace 2671
"&&" and 2672
" " whitespace 2674
"null" null 2675
" " whitespace 2679
"<" lt 2680
" " whitespace 2681
"a" identifier 2682
")" parenRight 2683
"]" bracketRight 2684
"[" bracketLeft 2685
"(" parenLeft 2686
"b" identifier 2687
" " whitespace 2688
"=>" rocket 2689
" " whitespace 2691
"3.141592653589793" float 2692
" " whitespace 2709
"||" or 2710
" " whitespace 2712
"c" identifier 2713
"[" bracketLeft 2714
"]" bracketRight 2715
")" parenRight 2716
"]" bracketRight 2717
"[" bracketLeft 2718
"(" parenLeft 2719
"true" bool 2720
" " whitespace 2724
"<=" lte 2725
" " whitespace 2727
"b" identifier 2728
" " whitespace 2729
"||" or 2730
" " whitespace 2732
"\"g\"" string 2733
" " whitespace 2736
"==" equals 2737
" " whitespace 2739
"b" identifier 2740
")" parenRight 2741
"]" bracketRight 2742
"[" bracketLeft 2743
"(" parenLeft 2744
"count" identifier 2745
"(" parenLeft 2750
"\"a\"" string 2751
" " whitespace 2754
"+" + 2755
" " whitespace 2756
"\"c\"" string 2757
")" parenRight 2760
" " whitespace 2761
">" gt 2762
" " whitespace 2763
"null" null 2764
")" parenRight 2768
"]" bracketRight 2769
"[" bracketLeft 2770
"-" - 2771
"100" integer 2772
"]" bracketRight 2775
" " whitespace 2776
"|" pipe 2777
" " whitespace 2778
"order" identifier 2779
"(" parenLeft 2784
"b" identifier 2785
")" parenRight 2786
")" parenRight 2787
" " whitespace 2788
">" gt 2789
" " whitespace 2790
"1" integer 2791
")" parenRight 2792
"]" bracketRight 2793
" " whitespace 2794
"|" pipe 2795
" " whitespace 2796
"{" braceLeft 2797
"\"e\"" string 2798
":" colon 2801
" " whitespace 2802
"$myParam" identifier 2803
"}" braceRight 2811
"," comma 2812
" " whitespace 2813
"coalesce" identifier 2814
"(" parenLeft 2822
"[" bracketLeft 2823
"[" bracketLeft 2824
"1000000000000000" integer 2825
" " whitespace 2841
"%" % 2842
" " whitespace 2843
"1.1" float 2844
"," comma 2847
" " whitespace 2848
"..." dotDotDot 2849
"[" bracketLeft 2852
"$myParam" identifier 2853
"]" bracketRight 2861
"]" bracketRight 2862
"," comma 2863
" " whitespace 2864
"1" integer 2865
"," comma 2866
" " whitespace 2867
"(" parenLeft 2868
"count" identifier 2869
"(" parenLeft 2874
"pt" identifier 2875
"::" doubleColon 2877
"text" identifier 2879
"(" parenLeft 2883
"a" identifier 2884
")" parenRight 2885
")" parenRight 2886
")" parenRight 2887
"]" bracketRight 2888
"[" bracketLeft 2889
"100" integer 2890
"]" bracketRight 2893
"," comma 2894
" " whitespace 2895
"@" at 2896
")" parenRight 2897
")" parenRight 2898
" " whitespace 2899
"=>" rocket 2900
" " whitespace 2902
"3e12" float 2903
" " whitespace 2907
"=>" rocket 2908
" " whitespace 2910
"{" braceLeft 2911
"b" identifier 2912
"[" bracketLeft 2913
"]" bracketRight 2914
" " whitespace 2915
">" gt 2916
" " whitespace 2917
"3e12" float 2918
" " whitespace 2922
"=>" rocket 2923
" " whitespace 2925
"{" braceLeft 2926
"..." dotDotDot 2927
"," comma 2930
" " whitespace 2931
"\"g\"" string 2932
":" colon 2935
" " whitespace 2936
"3.141592653589793" float 2937
" " whitespace 2954
"+" + 2955
" " whitespace 2956
"3.141592653589793" float 2957
"}" braceRight 2974
"," comma 2975
" " whitespace 2976
"b" identifier 2977
"->" arrow 2978
" " whitespace 2980
"=>" rocket 2981
" " whitespace 2983
"{" braceLeft 2984
"..." dotDotDot 2985
"," comma 2988
" " whitespace 2989
"count" identifier 2990
"(" parenLeft 2995
"*" * 2996
"{" braceLeft 2997
"a" identifier 2998
"->" arrow 2999
"." dot 3001
"a" identifier 3002
" " whitespace 3003
"<=" lte 3004
" " whitespace 3006
"-" - 3007
"1" integer 3008
" " whitespace 3009
"=>" rocket 3010
" " whitespace 3012
"{" braceLeft 3013
"\"d\"" string 3014
":" colon 3017
" " whitespace 3018
"(" parenLeft 3019
"c" identifier 3020
"[" bracketLeft 3021
"\"e\"" string 3022
"]" bracketRight 3025
" " whitespace 3026
"==" equals 3027
" " whitespace 3029
"3e12" float 3030
")" parenRight 3034
"," comma 3035
" " whitespace 3036
"..." dotDotDot 3037
"," comma 3040
" " whitespace 3041
"false" bool 3042
" " whitespace 3047
"==" equals 3048
" " whitespace 3050
"b" identifier 3051
" " whitespace 3052
"=>" rocket 3053
" " whitespace 3055
"{" braceLeft 3056
"\"e\"" string 3057
":" colon 3060
" " whitespace 3061
"count" identifier 3062
"(" parenLeft 3067
"^" hat 3068
"." dot 3069
"b" identifier 3070
"->" arrow 3071
"." dot 3073
"c" identifier 3074
")" parenRight 3075
"," comma 3076
" " whitespace 3077
"..." dotDotDot 3078
"," comma 3081
" " whitespace 3082
"b" identifier 3083
"[" bracketLeft 3084
"]" bracketRight 3085
"." dot 3086
"c" identifier 3087
" " whitespace 3088
"=>" rocket 3089
" " whitespace 3091
"{" braceLeft 3092
"\"f\"" string 3093
":" colon 3096
" " whitespace 3097
"-" - 3098
"100" integer 3099
" " whitespace 3102
"-" - 3103
" " whitespace 3104
"-" - 3105
"3e-12" float 3106
"," comma 3111
" " whitespace 3112
"a" identifier 3113
"->" arrow 3114
" " whitespace 3116
"=>" rocket 3117
" " whitespace 3119
"{" braceLeft 3120
"\"f\"" string 3121
":" colon 3124
" " whitespace 3125
"\"f\"" string 3126
" " whitespace 3129
"+" + 3130
" " whitespace 3131
"\"d\"" string 3132
"," comma 3135
" " whitespace 3136
"c" identifier 3137
"[" bracketLeft 3138
"]" bracketRight 3139
"." dot 3140
"c" identifier 3141
" " whitespace 3142
"=>" rocket 3143
" " whitespace 3145
"{" braceLeft 3146
"b" identifier 3147
"[" bracketLeft 3148
"\"a\"" string 3149
"]" bracketRight 3152
" " whitespace 3153
"<=" lte 3154
" " whitespace 3156
"null" null 3157
" " whitespace 3161
"=>" rocket 3162
" " whitespace 3164
"{" braceLeft 3165
"..." dotDotDot 3166
"," comma 3169
" " whitespace 3170
"a" identifier 3171
"." dot 3172
"b" identifier 3173
" " whitespace 3174
"=>" rocket 3175
" " whitespace 3177
"{" braceLeft 3178
"c" identifier 3179
"->" arrow 3180
"b" identifier 3182
" " whitespace 3183
"=>" rocket 3184
" " whitespace 3186
"{" braceLeft 3187
"\"e\"" string 3188
":" colon 3191
" " whitespace 3192
"select" identifier 3193
"(" parenLeft 3199
"^" hat 3200
"." dot 3201
"^" hat 3202
"." dot 3203
"^" hat 3204
"." dot 3205
"c" identifier 3206
"->" arrow 3207
" " whitespace 3209
"=>" rocket 3210
" " whitespace 3212
"(" parenLeft 3213
"-" - 3214
"1" integer 3215
" " whitespace 3216
"/" / 3217
" " whitespace 3218
"-" - 3219
"3e12" float 3220
")" parenRight 3224
")" parenRight 3225
"," comma 3226
" " whitespace 3227
"..." dotDotDot 3228
"," comma 3231
" " whitespace 3232
"pt" identifier 3233
"::" doubleColon 3235
"text" identifier 3237
"(" parenLeft 3241
"a" identifier 3242
")" parenRight 3243
" " whitespace 3244
"<=" lte 3245
" " whitespace 3247
"3e-12" float 3248
" " whitespace 3253
"=>" rocket 3254
" " whitespace 3256
"{" braceLeft 3257
"false" bool 3258
" " whitespace 3263
"==" equals 3264
" " whitespace 3266
"a" identifier 3267
" " whitespace 3268
"=>" rocket 3269
" " whitespace 3271
"{" braceLeft 3272
"!" not 3273
"c" identifier 3274
"[" bracketLeft 3275
"]" bracketRight 3276
"." dot 3277
"b" identifier 3278
" " whitespace 3279
"=>" rocket 3280
" " whitespace 3282
"{" braceLeft 3283
"a" identifier 3284
"[" bracketLeft 3285
"\"a\"" string 3286
"]" bracketRight 3289
" " whitespace 3290
"<" lt 3291
" " whitespace 3292
"false" bool 3293
" " whitespace 3298
"=>" rocket 3299
" " whitespace 3301
"{" braceLeft 3302
"b" identifier 3303
"[" bracketLeft 3304
"\"b\"" string 3305
"]" bracketRight 3308
" " whitespace 3309
"=>" rocket 3310
" " whitespace 3312
"{" braceLeft 3313
"\"b\"" string 3314
":" colon 3317
" " whitespace 3318
"[" bracketLeft 3319
"$myParam" identifier 3320
" " whitespace 3328
"|" pipe 3329
" " whitespace 3330
"order" identifier 3331
"(" parenLeft 3336
"c" identifier 3337
")" parenRight 3338
"," comma 3339
" " whitespace 3340
"(" parenLeft 3341
"\"a\"" string 3342
" " whitespace 3345
"+" + 3346
" " whitespace 3347
"\"e\"" string 3348
" " whitespace 3351
"|" pipe 3352
" " whitespace 3353
"order" identifier 3354
"(" parenLeft 3359
"a" identifier 3360
")" parenRight 3361
")" parenRight 3362
"]" bracketRight 3363
"[" bracketLeft 3364
"-" - 3365
"100" integer 3366
"..." dotDotDot 3369
"1" integer 3372
"]" bracketRight 3373
"}" braceRight 3374
"," comma 3375
" " whitespace 3376
"..." dotDotDot 3377
"}" braceRight 3380
"," comma 3381
" " whitespace 3382
"..." dotDotDot 3383
"}" braceRight 3386
"," comma 3387
" " whitespace 3388
"..." dotDotDot 3389
"," comma 3392
" " whitespace 3393
"c" identifier 3394
"[" bracketLeft 3395
"]" bracketRight 3396
"." dot 3397
"b" identifier 3398
" " whitespace 3399
"=>" rocket 3400
" " whitespace 3402
"{" braceLeft 3403
"\"f\"" string 3404
":" colon 3407
" " whitespace 3408
"(" parenLeft 3409
"*" * 3410
"[" bracketLeft 3411
"1000000000000000" integer 3412
"]" bracketRight 3428
")" parenRight 3429
"," comma 3430
" " whitespace 3431
"..." dotDotDot 3432
"," comma 3435
" " whitespace 3436
"\"b\"" string 3437
":" colon 3440
" " whitespace 3441
"*" * 3442
"}" braceRight 3443
"}" braceRight 3444
"}" braceRight 3445
"}" braceRight 3446
"," comma 3447
" " whitespace 3448
"..." dotDotDot 3449
"}" braceRight 3452
"}" braceRight 3453
"}" braceRight 3454
"}" braceRight 3455
"}" braceRight 3456
"}" braceRight 3457
"}" braceRight 3458
"}" braceRight 3459
")" parenRight 3460
" " whitespace 3461
"!=" neq 3462
" " whitespace 3464
"true" bool 3465
" " whitespace 3469
"=>" rocket 3470
" " whitespace 3472
"{" braceLeft 3473
"\"f\"" string 3474
":" colon 3477
" " whitespace 3478
"select" identifier 3479
"(" parenLeft 3485
"*" * 3486
"[" bracketLeft 3487
"100" integer 3488
"]" bracketRight 3491
" " whitespace 3492
"=>" rocket 3493
" " whitespace 3495
"c" identifier 3496
" " whitespace 3497
"|" pipe 3498
" " whitespace 3499
"order" identifier 3500
"(" parenLeft 3505
"b" identifier 3506
")" parenRight 3507
")" parenRight 3508
"," comma 3509
" " whitespace 3510
"..." dotDotDot 3511
"," comma 3514
" " whitespace 3515
"!" not 3516
"c" identifier 3517
"." dot 3518
"a" identifier 3519
" " whitespace 3520
"=>" rocket 3521
" " whitespace 3523
"{" braceLeft 3524
"null" null 3525
" " whitespace 3529
"=>" rocket 3530
" " whitespace 3532
"c" identifier 3533
" " whitespace 3534
"=>" rocket 3535
" " whitespace 3537
"{" braceLeft 3538
"!" not 3539
"b" identifier 3540
"." dot 3541
"b" identifier 3542
" " whitespace 3543
"=>" rocket 3544
" " whitespace 3546
"{" braceLeft 3547
"\"e\"" string 3548
":" colon 3551
" " whitespace 3552
"a" identifier 3553
"," comma 3554
" " whitespace 3555
"\"d\"" string 3556
":" colon 3559
" " whitespace 3560
"*" * 3561
"[" bracketLeft 3562
"(" parenLeft 3563
"select" identifier 3564
"(" parenLeft 3570
"\"d\"" string 3571
" " whitespace 3574
"+" + 3575
" " whitespace 3576
"\"e\"" string 3577
" " whitespace 3580
"=>" rocket 3581
" " whitespace 3583
"(" parenLeft 3584
"c" identifier 3585
")" parenRight 3586
")" parenRight 3587
" " whitespace 3588
"<=" lte 3589
" " whitespace 3591
"false" bool 3592
" " whitespace 3597
"||" or 3598
" " whitespace 3600
"coalesce" identifier 3601
"(" parenLeft 3609
"*" * 3610
"[" bracketLeft 3611
"(" parenLeft 3612
"b" identifier 3613
"->" arrow 3614
"a" identifier 3616
")" parenRight 3617
"]" bracketRight 3618
"," comma 3619
" " whitespace 3620
"*" * 3621
")" parenRight 3622
" " whitespace 3623
"<" lt 3624
" " whitespace 3625
"false" bool 3626
")" parenRight 3631
"]" bracketRight 3632
"[" bracketLeft 3633
"(" parenLeft 3634
"3.141592653589793" float 3635
" " whitespace 3652
"<" lt 3653
" " whitespace 3654
"c" identifier 3655
")" parenRight 3656
"]" bracketRight 3657
"[" bracketLeft 3658
"100" integer 3659
"]" bracketRight 3662
"}" braceRight 3663
"}" braceRight 3664
"," comma 3665
" " whitespace 3666
"b" identifier 3667
"->" arrow 3668
" " whitespace 3670
"=>" rocket 3671
" " whitespace 3673
"{" braceLeft 3674
"null" null 3675
" " whitespace 3679
">" gt 3680
" " whitespace 3681
"b" identifier 3682
" " whitespace 3683
"=>" rocket 3684
" " whitespace 3686
"{" braceLeft 3687
"b" identifier 3688
"." dot 3689
"a" identifier 3690
" " whitespace 3691
"<" lt 3692
" " whitespace 3693
"100" integer 3694
" " whitespace 3697
"=>" rocket 3698
" " whitespace 3700
"{" braceLeft 3701
"b" identifier 3702
"." dot 3703
"a" identifier 3704
" " whitespace 3705
"=>" rocket 3706
" " whitespace 3708
"{" braceLeft 3709
"\"a\"" string 3710
":" colon 3713
" " whitespace 3714
"^" hat 3715
"." dot 3716
"c" identifier 3717
"," comma 3718
" " whitespace 3719
"!" not 3720
"c" identifier 3721
"->" arrow 3722
"a" identifier 3724
" " whitespace 3725
"=>" rocket 3726
" " whitespace 3728
"{" braceLeft 3729
"-" - 3730
"1.1" float 3731
" " whitespace 3734
"!=" neq 3735
" " whitespace 3737
"b" identifier 3738
" " whitespace 3739
"=>" rocket 3740
" " whitespace 3742
"{" braceLeft 3743
"..." dotDotDot 3744
"," comma 3747
" " whitespace 3748
"a" identifier 3749
"->" arrow 3750
"b" identifier 3752
" " whitespace 3753
"=>" rocket 3754
" " whitespace 3756
"{" braceLeft 3757
"1" integer 3758
" " whitespace 3759
"!=" neq 3760
" " whitespace 3762
"a" identifier 3763
" " whitespace 3764
"=>" rocket 3765
" " whitespace 3767
"{" braceLeft 3768
"b" identifier 3769
"[" bracketLeft 3770
"\"e\"" string 3771
"]" bracketRight 3774
" " whitespace 3775
"!=" neq 3776
" " whitespace 3778
"1.1" float 3779
" " whitespace 3782
"=>" rocket 3783
" " whitespace 3785
"{" braceLeft 3786
"c" identifier 3787
"[" bracketLeft 3788
"]" bracketRight 3789
"." dot 3790
"b" identifier 3791
" " whitespace 3792
"<=" lte 3793
" " whitespace 3795
"3.141592653589793" float 3796
" " whitespace 3813
"=>" rocket 3814
" " whitespace 3816
"{" braceLeft 3817
"..." dotDotDot 3818
"," comma 3821
" " whitespace 3822
"pt" identifier 3823
"::" doubleColon 3825
"text" identifier 3827
"(" parenLeft 3831
"b" identifier 3832
")" parenRight 3833
" " whitespace 3834
"<" lt 3835
" " whitespace 3836
"true" bool 3837
" " whitespace 3841
"=>" rocket 3842
" " whitespace 3844
"{" braceLeft 3845
"\"a\"" string 3846
":" colon 3849
" " whitespace 3850
"{" braceLeft 3851
"c" identifier 3852
"[" bracketLeft 3853
"]" bracketRight 3854
" " whitespace 3855
"=>" rocket 3856
" " whitespace 3858
"{" braceLeft 3859
"\"g\"" string 3860
":" colon 3863
" " whitespace 3864
"*" * 3865
"," comma 3866
" " whitespace 3867
"..." dotDotDot 3868
"," comma 3871
" " whitespace 3872
"\"d\"" string 3873
":" colon 3876
" " whitespace 3877
"[" bracketLeft 3878
"count" identifier 3879
"(" parenLeft 3884
"b" identifier 3885
"[" bracketLeft 3886
"]" bracketRight 3887
")" parenRight 3888
"," comma 3889
" " whitespace 3890
"..." dotDotDot 3891
"[" bracketLeft 3894
"@" at 3895
"," comma 3896
" " whitespace 3897
"-" - 3898
"1.1" float 3899
" " whitespace 3902
"-" - 3903
" " whitespace 3904
"-" - 3905
"1" integer 3906
"," comma 3907
" " whitespace 3908
"pt" identifier 3909
"::" doubleColon 3911
"text" identifier 3913
"(" parenLeft 3917
"c" identifier 3918
")" parenRight 3919
"]" bracketRight 3920
"]" bracketRight 3921
"[" bracketLeft 3922
"1" integer 3923
"]" bracketRight 3924
"}" braceRight 3925
"}" braceRight 3926
"," comma 3927
" " whitespace 3928
"count" identifier 3929
"(" parenLeft 3934
"@" at 3935
")" parenRight 3936
" " whitespace 3937
">" gt 3938
" " whitespace 3939
"1000000000000000" integer 3940
" " whitespace 3956
"=>" rocket 3957
" " whitespace 3959
"{" braceLeft 3960
"select" identifier 3961
"(" parenLeft 3967
"select" identifier 3968
"(" parenLeft 3974
"^" hat 3975
"." dot 3976
"c" identifier 3977
"->" arrow 3978
"b" identifier 3980
" " whitespace 3981
"=>" rocket 3982
" " whitespace 3984
"@" at 3985
"." dot 3986
"a" identifier 3987
")" parenRight 3988
" " whitespace 3989
"=>" rocket 3990
" " whitespace 3992
"@" at 3993
")" parenRight 3994
" " whitespace 3995
"<=" lte 3996
" " whitespace 3998
"null" null 3999
" " whitespace 4003
"=>" rocket 4004
" " whitespace 4006
"{" braceLeft 4007
"..." dotDotDot 4008
"," comma 4011
" " whitespace 4012
"\"d\"" string 4013
":" colon 4016
" " whitespace 4017
"[" bracketLeft 4018
"{" braceLeft 4019
"!" not 4020
"a" identifier 4021
"->" arrow 4022
"c" identifier 4024
" " whitespace 4025
"=>" rocket 4026
" " whitespace 4028
"{" braceLeft 4029
"select" identifier 4030
"(" parenLeft 4036
"!" not 4037
"(" parenLeft 4038
"c" identifier 4039
"[" bracketLeft 4040
"]" bracketRight 4041
")" parenRight 4042
" " whitespace 4043
"=>" rocket 4044
" " whitespace 4046
"^" hat 4047
"." dot 4048
"a" identifier 4049
")" parenRight 4050
" " whitespace 4051
">" gt 4052
" " whitespace 4053
"1" integer 4054
" " whitespace 4055
"=>" rocket 4056
" " whitespace 4058
"{" braceLeft 4059
"\"c\"" string 4060
":" colon 4063
" " whitespace 4064
"*" * 4065
"[" bracketLeft 4066
"(" parenLeft 4067
"count" identifier 4068
"(" parenLeft 4073
"*" * 4074
"[" bracketLeft 4075
"!" not 4076
"c" identifier 4077
"[" bracketLeft 4078
"]" bracketRight 4079
"]" bracketRight 4080
"[" bracketLeft 4081
"(" parenLeft 4082
"!" not 4083
"a" identifier 4084
"[" bracketLeft 4085
"]" bracketRight 4086
" " whitespace 4087
"||" or 4088
" " whitespace 4090
"!" not 4091
"a" identifier 4092
"." dot 4093
"b" identifier 4094
")" parenRight 4095
"]" bracketRight 4096
")" parenRight 4097
" " whitespace 4098
"==" equals 4099
" " whitespace 4101
"null" null 4102
")" parenRight 4106
"]" bracketRight 4107
"{" braceLeft 4108
"..." dotDotDot 4109
"," comma 4112
" " whitespace 4113
"!" not 4114
"c" identifier 4115
"[" bracketLeft 4116
"]" bracketRight 4117
" " whitespace 4118
"=>" rocket 4119
" " whitespace 4121
"{" braceLeft 4122
"pt" identifier 4123
"::" doubleColon 4125
"text" identifier 4127
"(" parenLeft 4131
"c" identifier 4132
")" parenRight 4133
" " whitespace 4134
"==" equals 4135
" " whitespace 4137
"null" null 4138
" " whitespace 4142
"=>" rocket 4143
" " whitespace 4145
"{" braceLeft 4146
"..." dotDotDot 4147
"," comma 4150
" " whitespace 4151
"\"e\"" string 4152
":" colon 4155
" " whitespace 4156
"@" at 4157
"." dot 4158
"c" identifier 4159
"}" braceRight 4160
"," comma 4161
" " whitespace 4162
"..." dotDotDot 4163
"}" braceRight 4166
"}" braceRight 4167
"}" braceRight 4168
"," comma 4169
" " whitespace 4170
"..." dotDotDot 4171
"}" braceRight 4174
"}" braceRight 4175
"," comma 4176
" " whitespace 4177
"..." dotDotDot 4178
"[" bracketLeft 4181
"*" * 4182
"[" bracketLeft 4183
"!" not 4184
"(" parenLeft 4185
"\"a\"" string 4186
" " whitespace 4189
"!=" neq 4190
" " whitespace 4192
"a" identifier 4193
")" parenRight 4194
"]" bracketRight 4195
"[" bracketLeft 4196
"(" parenLeft 4197
"3.141592653589793" float 4198
" " whitespace 4215
"!=" neq 4216
" " whitespace 4218
"c" identifier 4219
" " whitespace 4220
"||" or 4221
" " whitespace 4223
"count" identifier 4224
"(" parenLeft 4229
"[" bracketLeft 4230
"[" bracketLeft 4231
"2" integer 4232
" " whitespace 4233
"+" + 4234
" " whitespace 4235
"3.141592653589793" float 4236
"]" bracketRight 4253
"," comma 4254
" " whitespace 4255
"(" parenLeft 4256
"*" * 4257
"[" bracketLeft 4258
"(" parenLeft 4259
"a" identifier 4260
"->" arrow 4261
"b" identifier 4263
" " whitespace 4264
"||" or 4265
" " whitespace 4267
"b" identifier 4268
"[" bracketLeft 4269
"\"b\"" string 4270
"]" bracketRight 4273
" " whitespace 4274
"=>" rocket 4275
" " whitespace 4277
"\"b\"" string 4278
")" parenRight 4281
"]" bracketRight 4282
"[" bracketLeft 4283
"!" not 4284
"(" parenLeft 4285
"select" identifier 4286
"(" parenLeft 4292
"a" identifier 4293
" " whitespace 4294
"=>" rocket 4295
" " whitespace 4297
"(" parenLeft 4298
"count" identifier 4299
"(" parenLeft 4304
"a" identifier 4305
")" parenRight 4306
" " whitespace 4307
"=>" rocket 4308
" " whitespace 4310
"true" bool 4311
" " whitespace 4315
"&&" and 4316
" " whitespace 4318
"count" identifier 4319
"(" parenLeft 4324
"!" not 4325
"(" parenLeft 4326
"!" not 4327
"b" identifier 4328
"->" arrow 4329
"a" identifier 4331
")" parenRight 4332
")" parenRight 4333
" " whitespace 4334
"!=" neq 4335
" " whitespace 4337
"null" null 4338
")" parenRight 4342
")" parenRight 4343
" " whitespace 4344
"<=" lte 4345
" " whitespace 4347
"false" bool 4348
")" parenRight 4353
"]" bracketRight 4354
")" parenRight 4355
" " whitespace 4356
"|" pipe 4357
" " whitespace 4358
"order" identifier 4359
"(" parenLeft 4364
"b" identifier 4365
")" parenRight 4366
"," comma 4367
" " whitespace 4368
"\"f\"" string 4369
" " whitespace 4372
"+" + 4373
" " whitespace 4374
"\"e\"" string 4375
"]" bracketRight 4378
"{" braceLeft 4379
"\"b\"" string 4380
":" colon 4383
" " whitespace 4384
"$myParam" identifier 4385
"," comma 4393
" " whitespace 4394
"..." dotDotDot 4395
"," comma 4398
" " whitespace 4399
"\"e\"" string 4400
":" colon 4403
" " whitespace 4404
"{" braceLeft 4405
"..." dotDotDot 4406
"," comma 4409
" " whitespace 4410
"\"d\"" string 4411
":" colon 4414
" " whitespace 4415
"[" bracketLeft 4416
"a" identifier 4417
"," comma 4418
" " whitespace 4419
"..." dotDotDot 4420
"[" bracketLeft 4423
"$myParam" identifier 4424
"]" bracketRight 4432
"]" bracketRight 4433
"[" bracketLeft 4434
"-" - 4435
"100" integer 4436
"]" bracketRight 4439
"}" braceRight 4440
" " whitespace 4441
"|" pipe 4442
" " whitespace 4443
"order" identifier 4444
"(" parenLeft 4449
"c" identifier 4450
")" parenRight 4451
"}" braceRight 4452
")" parenRight 4453
" " whitespace 4454
"<=" lte 4455
" " whitespace 4457
"\"c\"" string 4458
")" parenRight 4461
"]" bracketRight 4462
"," comma 4463
" " whitespace 4464
"..." dotDotDot 4465
"[" bracketLeft 4468
"(" parenLeft 4469
"a" identifier 4470
")" parenRight 4471
"," comma 4472
" " whitespace 4473
"select" identifier 4474
"(" parenLeft 4480
"$myParam" identifier 4481
" " whitespace 4489
"=>" rocket 4490
" " whitespace 4492
"*" * 4493
"{" braceLeft 4494
"..." dotDotDot 4495
"," comma 4498
" " whitespace 4499
"\"b\"" string 4500
":" colon 4503
" " whitespace 4504
"[" bracketLeft 4505
"]" bracketRight 4506
"}" braceRight 4507
")" parenRight 4508
"," comma 4509
" " whitespace 4510
"(" parenLeft 4511
"a" identifier 4512
"->" arrow 4513
" " whitespace 4515
"==" equals 4516
" " whitespace 4518
"true" bool 4519
" " whitespace 4523
"&&" and 4524
" " whitespace 4526
"c" identifier 4527
"[" bracketLeft 4528
"]" bracketRight 4529
"." dot 4530
"c" identifier 4531
")" parenRight 4532
"]" bracketRight 4533
"]" bracketRight 4534
"]" bracketRight 4535
"[" bracketLeft 4536
"coalesce" identifier 4537
"(" parenLeft 4545
"$myParam" identifier 4546
"," comma 4554
" " whitespace 4555
"1" integer 4556
")" parenRight 4557
" " whitespace 4558
"!=" neq 4559
" " whitespace 4561
"\"c\"" string 4562
"]" bracketRight 4565
"}" braceRight 4566
"}" braceRight 4567
"}" braceRight 4568
"}" braceRight 4569
"," comma 4570
" " whitespace 4571
"\"g\"" string 4572
":" colon 4575
" " whitespace 4576
"*" * 4577
"[" bracketLeft 4578
"1" integer 4579
"..." dotDotDot 4580
"-" - 4583
"1" integer 4584
"]" bracketRight 4585
" " whitespace 4586
"|" pipe 4587
" " whitespace 4588
"order" identifier 4589
"(" parenLeft 4594
"a" identifier 4595
")" parenRight 4596
"}" braceRight 4597
"}" braceRight 4598
"," comma 4599
" " whitespace 4600
"..." dotDotDot 4601
"," comma 4604
" " whitespace 4605
"!" not 4606
"c" identifier 4607
"[" bracketLeft 4608
"\"g\"" string 4609
"]" bracketRight 4612
" " whitespace 4613
"=>" rocket 4614
" " whitespace 4616
"{" braceLeft 4617
"!" not 4618
"b" identifier 4619
"->" arrow 4620
" " whitespace 4622
"=>" rocket 4623
" " whitespace 4625
"{" braceLeft 4626
"..." dotDotDot 4627
"," comma 4630
" " whitespace 4631
"\"g\"" string 4632
":" colon 4635
" " whitespace 4636
"a" identifier 4637
"}" braceRight 4638
"," comma 4639
" " whitespace 4640
"..." dotDotDot 4641
"," comma 4644
" " whitespace 4645
"\"g\"" string 4646
":" colon 4649
" " whitespace 4650
"*" * 4651
"[" bracketLeft 4652
"-" - 4653
"100" integer 4654
"]" bracketRight 4657
"}" braceRight 4658
"}" braceRight 4659
"}" braceRight 4660
"}" braceRight 4661
"}" braceRight 4662
"," comma 4663
" " whitespace 4664
"..." dotDotDot 4665
"}" braceRight 4668
"," comma 4669
" " whitespace 4670
"..." dotDotDot 4671
"}" braceRight 4674
"}" braceRight 4675
"}" braceRight 4676
"}" braceRight 4677
"}" braceRight 4678
"}" braceRight 4679
"," comma 4680
" " whitespace 4681
"..." dotDotDot 4682
"}" braceRight 4685
"}" braceRight 4686
"," comma 4687
" " whitespace 4688
"\"a\"" string 4689
":" colon 4692
" " whitespace 4693
"*" * 4694
"[" bracketLeft 4695
"2" integer 4696
"]" bracketRight 4697
"}" braceRight 4698
"," comma 4699
" " whitespace 4700
"..." dotDotDot 4701
"," comma 4704
" " whitespace 4705
"-" - 4706
"3e12" float 4707
" " whitespace 4711
">" gt 4712
" " whitespace 4713
"a" identifier 4714
" " whitespace 4715
"=>" rocket 4716
" " whitespace 4718
"{" braceLeft 4719
"\"f\"" string 4720
":" colon 4723
" " whitespace 4724
"*" * 4725
"[" bracketLeft 4726
"(" parenLeft 4727
"b" identifier 4728
" " whitespace 4729
"==" equals 4730
" " whitespace 4732
"true" bool 4733
")" parenRight 4737
"]" bracketRight 4738
"[" bracketLeft 4739
"1000000000000000" integer 4740
"]" bracketRight 4756
"," comma 4757
" " whitespace 4758
"..." dotDotDot 4759
"}" braceRight 4762
"}" braceRight 4763
"}" braceRight 4764
"}" braceRight 4765
"}" braceRight 4766
"," comma 4767
" " whitespace 4768
"\"a\"" string 4769
":" colon 4772
" " whitespace 4773
"[" bracketLeft 4774
"\"g\"" string 4775
" " whitespace 4778
"+" + 4779
" " whitespace 4780
"\"d\"" string 4781
"]" bracketRight 4784
"}" braceRight 4785
"," comma 4786
" " whitespace 4787
"\"d\"" string 4788
":" colon 4791
" " whitespace 4792
"(" parenLeft 4793
"[" bracketLeft 4794
"*" * 4795
" " whitespace 4796
"|" pipe 4797
" " whitespace 4798
"{" braceLeft 4799
"c" identifier 4800
"->" arrow 4801
"." dot 4803
"c" identifier 4804
" " whitespace 4805
"<" lt 4806
" " whitespace 4807
"false" bool 4808
" " whitespace 4813
"=>" rocket 4814
" " whitespace 4816
"{" braceLeft 4817
"\"c\"" string 4818
":" colon 4821
" " whitespace 4822
"@" at 4823
"," comma 4824
" " whitespace 4825
"..." dotDotDot 4826
"," comma 4829
" " whitespace 4830
"c" identifier 4831
"[" bracketLeft 4832
"\"f\"" string 4833
"]" bracketRight 4836
" " whitespace 4837
"=>" rocket 4838
" " whitespace 4840
"{" braceLeft 4841
"!" not 4842
"c" identifier 4843
" " whitespace 4844
"=>" rocket 4845
" " whitespace 4847
"{" braceLeft 4848
"\"c\"" string 4849
":" colon 4852
" " whitespace 4853
"[" bracketLeft 4854
"-" - 4855
"100" integer 4856
" " whitespace 4859
"<=" lte 4860
" " whitespace 4862
"c" identifier 4863
"]" bracketRight 4864
"[" bracketLeft 4865
"-" - 4866
"100" integer 4867
"..." dotDotDot 4870
"1" integer 4873
"]" bracketRight 4874
"," comma 4875
" " whitespace 4876
"..." dotDotDot 4877
"," comma 4880
" " whitespace 4881
"!" not 4882
"c" identifier 4883
"->" arrow 4884
"a" identifier 4886
" " whitespace 4887
"=>" rocket 4888
" " whitespace 4890
"{" braceLeft 4891
"\"d\"" string 4892
":" colon 4895
" " whitespace 4896
"[" bracketLeft 4897
"$myParam" identifier 4898
"," comma 4906
" " whitespace 4907
"[" bracketLeft 4908
"@" at 4909
"." dot 4910
"c" identifier 4911
"," comma 4912
" " whitespace 4913
"[" bracketLeft 4914
"-" - 4915
"1" integer 4916
" " whitespace 4917
"%" % 4918
" " whitespace 4919
"1" integer 4920
"]" bracketRight 4921
"[" bracketLeft 4922
"(" parenLeft 4923
"b" identifier 4924
"->" arrow 4925
"a" identifier 4927
" " whitespace 4928
"||" or 4929
" " whitespace 4931
"true" bool 4932
" " whitespace 4936
"<" lt 4937
" " whitespace 4938
"c" identifier 4939
")" parenRight 4940
"]" bracketRight 4941
" " whitespace 4942
"|" pipe 4943
" " whitespace 4944
"order" identifier 4945
"(" parenLeft 4950
"c" identifier 4951
")" parenRight 4952
"," comma 4953
" " whitespace 4954
"c" identifier 4955
"]" bracketRight 4956
"[" bracketLeft 4957
"null" null 4958
" " whitespace 4962
"==" equals 4963
" " whitespace 4965
"a" identifier 4966
"]" bracketRight 4967
" " whitespace 4968
"|" pipe 4969
" " whitespace 4970
"{" braceLeft 4971
"\"d\"" string 4972
":" colon 4975
" " whitespace 4976
"[" bracketLeft 4977
"]" bracketRight 4978
"[" bracketLeft 4979
"1" integer 4980
"]" bracketRight 4981
"}" braceRight 4982
"]" bracketRight 4983
"}" braceRight 4984
"}" braceRight 4985
"," comma 4986
" " whitespace 4987
"..." dotDotDot 4988
"}" braceRight 4991
"}" braceRight 4992
"," comma 4993
" " whitespace 4994
"..." dotDotDot 4995
"}" braceRight 4998
"," comma 4999
" " whitespace 5000
"[" bracketLeft 5001
"(" parenLeft 5002
"[" bracketLeft 5003
"a" identifier 5004
"," comma 5005
" " whitespace 5006
"\"c\"" string 5007
" " whitespace 5010
"+" + 5011
" " whitespace 5012
"\"g\"" string 5013
"]" bracketRight 5016
"[" bracketLeft 5017
"!" not 5018
"(" parenLeft 5019
"a" identifier 5020
"[" bracketLeft 5021
"]" bracketRight 5022
")" parenRight 5023
"]" bracketRight 5024
"[" bracketLeft 5025
"(" parenLeft 5026
"c" identifier 5027
"[" bracketLeft 5028
"]" bracketRight 5029
"." dot 5030
"c" identifier 5031
" " whitespace 5032
"||" or 5033
" " whitespace 5035
"b" identifier 5036
"[" bracketLeft 5037
"]" bracketRight 5038
" " whitespace 5039
"<" lt 5040
" " whitespace 5041
"\"d\"" string 5042
")" parenRight 5045
"]" bracketRight 5046
")" parenRight 5047
"]" bracketRight 5048
"[" bracketLeft 5049
"(" parenLeft 5050
"select" identifier 5051
"(" parenLeft 5057
"!" not 5058
"(" parenLeft 5059
"b" identifier 5060
"->" arrow 5061
"." dot 5063
"b" identifier 5064
" " whitespace 5065
"==" equals 5066
" " whitespace 5068
"-" - 5069
"100" integer 5070
")" parenRight 5073
" " whitespace 5074
"=>" rocket 5075
" " whitespace 5077
"[" bracketLeft 5078
"*" * 5079
"[" bracketLeft 5080
"-" - 5081
"1" integer 5082
"]" bracketRight 5083
"," comma 5084
" " whitespace 5085
"..." dotDotDot 5086
"[" bracketLeft 5089
"]" bracketRight 5090
"]" bracketRight 5091
")" parenRight 5092
" " whitespace 5093
"=>" rocket 5094
" " whitespace 5096
"1" integer 5097
" " whitespace 5098
"&&" and 5099
" " whitespace 5101
"\"b\"" string 5102
" " whitespace 5105
"<" lt 5106
" " whitespace 5107
"c" identifier 5108
")" parenRight 5109
"]" bracketRight 5110
"]" bracketRight 5111
")" parenRight 5112
"}" braceRight 5113
"," comma 5114
" " whitespace 5115
"null" null 5116
" " whitespace 5120
"<=" lte 5121
" " whitespace 5123
"b" identifier 5124
")" parenRight 5125
"" eof 5126
