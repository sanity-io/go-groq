//groq:version=2.x.x
//groq:param:myParam="abc"

// The following query exercises all parser-related features for GROQ 2

def foo::bar($baz) = $baz{a, b}; def foo::lala($baz) = $baz->{a, b}; def foo::nana($baz) = $baz[]{a,b}; def foo::doodoo($baz) = $baz[]->{a,b}; coalesce({count($myParam) > "d" => {c["e"] => {..., null == c => {count([(!b-> || !c.c), ^.^.c->][(true > c && false <= c)][!(b->)][1000000000000000]) <= "g" => {..., b->a => {b.a => {"e": b, ...}, c-> => {"g": count(* | order(a)), "b": @}}}, !a => {..., "f": {!b->.a => {select(@.b => * | {..., "f": *[(!a[] || "f" == b)][(pt::text(c) => 2 && select([!(-1 != c)] => ([[[], 1 % -3e12, 2][!b[].b][-100..-100], (null != a || a.c != 100)][(a->c)] | order(b))) < 2)]}) != 100 => {"a": $myParam, b[] < 3e-12 => {coalesce([*{c["d"] < true => {false > c => {a => {..., "f": *[null <= a]}}, ..., b->b < "d" => {"d": -100 + 3e12 | order(b), "c": [b | order(a) | order(b)]}}, ...}, ...[(* | {"f": *[!(!b)][!a->a][c->c == 100], ..., "a": c}), @.b]][(-3e-12 > c && count([*{"b": ({pt::text(c) != 3e12 => {"a": [b, [][(!c->c || null < a)][(b[].b > true || b[].b)][1..1], -3e12 + -1][100], true == a => {!a => {..., "b": (b | order(a) | order(b))}, b[].c => {..., count(*[b->][a[].c <= false][!(select(@.a => $myParam) != -100)] | {c["g"] => {..., "d": [*[2]][(b-> || pt::text(a) < -1.1)][!(!a[].a)] | {..., "g": "d" + "c"}}, ...}) < 3e-12 => {"f": "f" + "f"}}}}, ...}), !c-> => {"f": [(1.1 == b && !c), 1.1 + -1, ^.^.a[].b][1000000000000000..100], ..., !a.c => {"a": *[!b[].a][(select([[*{"f": [(count(*[b[] < -1.1][(b-> => false && pt::text(c) > true)][(a[].c <= null || select("a" == c => b) < null)]) < "g" && coalesce(-3e-12 * 1.1, ^.^.^.c->b) == true), [][!(c <= "d")][!a->c][(-100 => b)][(coalesce((*[a][a]{a => {"a": a}, ..., a => {"a": a}}), (a->a && b.c)) < "g" && c->.b)][b <= 3e-12][(b->a && !c["b"])][-1], * | {-1.1 <= c => {"c": * | {..., pt::text(a) != 3e-12 => {null == a => {"a": a}}} | order(c), ...}, ..., "f": $myParam}][false < b][(!a.a || a->.a)][(!a.a)][1..1], ..., count(-100 / 1.1) > -3e12 => {"d": b, ..., c[].a == 3e-12 => {"g": coalesce(coalesce(b->, count(^.a->)), null), "f": 1.1 * 3e12}}}, 1000000000000000 - 3e-12][(select("a" + "a" => ^.^.^.b->) != 2 || !a->b)][(c->c || b < 3.141592653589793)] | {..., "c": ^.^.a->c}, ...[a, 3.141592653589793 / -1 | order(a), @.b]][(count(*[1...1]) <= -3e-12 || -1 > c)][!(b.c == 3e12)][(true > c || coalesce(*[1000000000000000], ^.^.^.c[]) != null)] => *{"f": (1 % -1.1)}) < 1000000000000000 && count("b" + "d") <= 2)], ..., "b": [*[c->.b], [[[*[1000000000000000]][(!c-> || !c.b)][(b > -3e12 && !c->)], ...[]]][!("a" <= a)][-100..100]][(!b->b && a->.b => null)]}}}, (coalesce($myParam, $myParam))][(!a["b"] && count(pt::text(b)) != -1)][null < c][(!b->b && null < a)][(b => 3.141592653589793 || c[])][(true <= b || "g" == b)][(count("a" + "c") > null)][-100] | order(b)) > 1)] | {"e": $myParam}, coalesce([[1000000000000000 % 1.1, ...[$myParam]], 1, (count(pt::text(a)))][100], @)) => 3e12 => {b[] > 3e12 => {..., "g": 3.141592653589793 + 3.141592653589793}, b-> => {..., count(*{a->.a <= -1 => {"d": (c["e"] == 3e12), ..., false == b => {"e": count(^.b->.c), ..., b[].c => {"f": -100 - -3e-12, a-> => {"f": "f" + "d", c[].c => {b["a"] <= null => {..., a.b => {c->b => {"e": select(^.^.^.c-> => (-1 / -3e12)), ..., pt::text(a) <= 3e-12 => {false == a => {!c[].b => {a["a"] < false => {b["b"] => {"b": [$myParam | order(c), ("a" + "e" | order(a))][-100...1]}, ...}, ...}, ..., c[].b => {"f": (*[1000000000000000]), ..., "b": *}}}}, ...}}}}}}}}) != true => {"f": select(*[100] => c | order(b)), ..., !c.a => {null => c => {!b.b => {"e": a, "d": *[(select("d" + "e" => (c)) <= false || coalesce(*[(b->a)], *) < false)][(3.141592653589793 < c)][100]}}, b-> => {null > b => {b.a < 100 => {b.a => {"a": ^.c, !c->a => {-1.1 != b => {..., a->b => {1 != a => {b["e"] != 1.1 => {c[].b <= 3.141592653589793 => {..., pt::text(b) < true => {"a": {c[] => {"g": *, ..., "d": [count(b[]), ...[@, -1.1 - -1, pt::text(c)]][1]}}, count(@) > 1000000000000000 => {select(select(^.c->b => @.a) => @) <= null => {..., "d": [{!a->c => {select(!(c[]) => ^.a) > 1 => {"c": *[(count(*[!c[]][(!a[] || !a.b)]) == null)]{..., !c[] => {pt::text(c) == null => {..., "e": @.c}, ...}}}, ...}}, ...[*[!("a" != a)][(3.141592653589793 != c || count([[2 + 3.141592653589793], (*[(a->b || b["b"] => "b")][!(select(a => (count(a) => true && count(!(!b->a)) != null)) <= false)]) | order(b), "f" + "e"]{"b": $myParam, ..., "e": {..., "d": [a, ...[$myParam]][-100]} | order(c)}) <= "c")], ...[(a), select($myParam => *{..., "b": []}), (a-> == true && c[].c)]]][coalesce($myParam, 1) != "c"]}}}}, "g": *[1...-1] | order(a)}}, ..., !c["g"] => {!b-> => {..., "g": a}, ..., "g": *[-100]}}}}}, ...}, ...}}}}}}, ...}}, "a": *[2]}, ..., -3e12 > a => {"f": *[(b == true)][1000000000000000], ...}}}}}, "a": ["g" + "d"]}, "d": ([* | {c->.c < false => {"c": @, ..., c["f"] => {!c => {"c": [-100 <= c][-100...1], ..., !c->a => {"d": [$myParam, [@.c, [-1 % 1][(b->a || true < c)] | order(c), c][null == a] | {"d": [][1]}]}}, ...}}, ...}, [([a, "c" + "g"][!(a[])][(c[].c || b[] < "d")])][(select(!(b->.b == -100) => [*[-1], ...[]]) => 1 && "b" < c)]])}, null <= b)
----
"\n" whitespace 48
"\n" whitespace 121
"def" identifier 122
" " whitespace 125
"foo" identifier 126
"::" doubleColon 129
"bar" identifier 131
"(" parenLeft 134
"$baz" identifier 135
")" parenRight 139
" " whitespace 140
"=" equalSign 141
" " whitespace 142
"$baz" identifier 143
"{" braceLeft 147
"a" identifier 148
"," comma 149
" " whitespace 150
"b" identifier 151
"}" braceRight 152
";" semicolon 153
" " whitespace 154
"def" identifier 155
" " whitespace 158
"foo" identifier 159
"::" doubleColon 162
"lala" identifier 164
"(" parenLeft 168
"$baz" identifier 169
")" parenRight 173
" " whitespace 174
"=" equalSign 175
" " whitespace 176
"$baz" identifier 177
"->" arrow 181
"{" braceLeft 183
"a" identifier 184
"," comma 185
" " whitespace 186
"b" identifier 187
"}" braceRight 188
";" semicolon 189
" " whitespace 190
"def" identifier 191
" " whitespace 194
"foo" identifier 195
"::" doubleColon 198
"nana" identifier 200
"(" parenLeft 204
"$baz" identifier 205
")" parenRight 209
" " whitespace 210
"=" equalSign 211
" " whitespace 212
"$baz" identifier 213
"[" bracketLeft 217
"]" bracketRight 218
"{" braceLeft 219
"a" identifier 220
"," comma 221
"b" identifier 222
"}" braceRight 223
";" semicolon 224
" " whitespace 225
"def" identifier 226
" " whitespace 229
"foo" identifier 230
"::" doubleColon 233
"doodoo" identifier 235
"(" parenLeft 241
"$baz" identifier 242
")" parenRight 246
" " whitespace 247
"=" equalSign 248
" " whitespace 249
"$baz" identifier 250
"[" bracketLeft 254
"]" bracketRight 255
"->" arrow 256
"{" braceLeft 258
"a" identifier 259
"," comma 260
"b" identifier 261
"}" braceRight 262
";" semicolon 263
" " whitespace 264
"coalesce" identifier 265
"(" parenLeft 273
"{" braceLeft 274
"count" identifier 275
"(" parenLeft 280
"$myParam" identifier 281
")" parenRight 289
" " whitespace 290
">" gt 291
" " whitespace 292
"\"d\"" string 293
" " whitespace 296
"=>" rocket 297
" " whitespace 299
"{" braceLeft 300
"c" identifier 301
"[" bracketLeft 302
"\"e\"" string 303
"]" bracketRight 306
" " whitespace 307
"=>" rocket 308
" " whitespace 310
"{" braceLeft 311
"..." dotDotDot 312
"," comma 315
" " whitespace 316
"null" null 317
" " whitespace 321
"==" equals 322
" " whitespace 324
"c" identifier 325
" " whitespace 326
"=>" rocket 327
" " whitespace 329
"{" braceLeft 330
"count" identifier 331
"(" parenLeft 336
"[" bracketLeft 337
"(" parenLeft 338
"!" not 339
"b" identifier 340
"->" arrow 341
" " whitespace 343
"||" or 344
" " whitespace 346
"!" not 347
"c" identifier 348
"." dot 349
"c" identifier 350
")" parenRight 351
"," comma 352
" " whitespace 353
"^" hat 354
"." dot 355
"^" hat 356
"." dot 357
"c" identifier 358
"->" arrow 359
"]" bracketRight 361
"[" bracketLeft 362
"(" parenLeft 363
"true" bool 364
" " whitespace 368
">" gt 369
" " whitespace 370
"c" identifier 371
" " whitespace 372
"&&" and 373
" " whitespace 375
"false" bool 376
" " whitespace 381
"<=" lte 382
" " whitespace 384
"c" identifier 385
")" parenRight 386
"]" bracketRight 387
"[" bracketLeft 388
"!" not 389
"(" parenLeft 390
"b" identifier 391
"->" arrow 392
")" parenRight 394
"]" bracketRight 395
"[" bracketLeft 396
"1000000000000000" integer 397
"]" bracketRight 413
")" parenRight 414
" " whitespace 415
"<=" lte 416
" " whitespace 418
"\"g\"" string 419
" " whitespace 422
"=>" rocket 423
" " whitespace 425
"{" braceLeft 426
"..." dotDotDot 427
"," comma 430
" " whitespace 431
"b" identifier 432
"->" arrow 433
"a" identifier 435
" " whitespace 436
"=>" rocket 437
" " whitespace 439
"{" braceLeft 440
"b" identifier 441
"." dot 442
"a" identifier 443
" " whitespace 444
"=>" rocket 445
" " whitespace 447
"{" braceLeft 448
"\"e\"" string 449
":" colon 452
" " whitespace 453
"b" identifier 454
"," comma 455
" " whitespace 456
"..." dotDotDot 457
"}" braceRight 460
"," comma 461
" " whitespace 462
"c" identifier 463
"->" arrow 464
" " whitespace 466
"=>" rocket 467
" " whitespace 469
"{" braceLeft 470
"\"g\"" string 471
":" colon 474
" " whitespace 475
"count" identifier 476
"(" parenLeft 481
"*" * 482
" " whitespace 483
"|" pipe 484
" " whitespace 485
"order" identifier 486
"(" parenLeft 491
"a" identifier 492
")" parenRight 493
")" parenRight 494
"," comma 495
" " whitespace 496
"\"b\"" string 497
":" colon 500
" " whitespace 501
"@" at 502
"}" braceRight 503
"}" braceRight 504
"}" braceRight 505
"," comma 506
" " whitespace 507
"!" not 508
"a" identifier 509
" " whitespace 510
"=>" rocket 511
" " whitespace 513
"{" braceLeft 514
"..." dotDotDot 515
"," comma 518
" " whitespace 519
"\"f\"" string 520
":" colon 523
" " whitespace 524
"{" braceLeft 525
"!" not 526
"b" identifier 527
"->" arrow 528
"." dot 530
"a" identifier 531
" " whitespace 532
"=>" rocket 533
" " whitespace 535
"{" braceLeft 536
"select" identifier 537
"(" parenLeft 543
"@" at 544
"." dot 545
"b" identifier 546
" " whitespace 547
"=>" rocket 548
" " whitespace 550
"*" * 551
" " whitespace 552
"|" pipe 553
" " whitespace 554
"{" braceLeft 555
"..." dotDotDot 556
"," comma 559
" " whitespace 560
"\"f\"" string 561
":" colon 564
" " whitespace 565
"*" * 566
"[" bracketLeft 567
"(" parenLeft 568
"!" not 569
"a" identifier 570
"[" bracketLeft 571
"]" bracketRight 572
" " whitespace 573
"||" or 574
" " whitespace 576
"\"f\"" string 577
" " whitespace 580
"==" equals 581
" " whitespace 583
"b" identifier 584
")" parenRight 585
"]" bracketRight 586
"[" bracketLeft 587
"(" parenLeft 588
"pt" identifier 589
"::" doubleColon 591
"text" identifier 593
"(" parenLeft 597
"c" identifier 598
")" parenRight 599
" " whitespace 600
"=>" rocket 601
" " whitespace 603
"2" integer 604
" " whitespace 605
"&&" and 606
" " whitespace 608
"select" identifier 609
"(" parenLeft 615
"[" bracketLeft 616
"!" not 617
"(" parenLeft 618
"-" - 619
"1" integer 620
" " whitespace 621
"!=" neq 622
" " whitespace 624
"c" identifier 625
")" parenRight 626
"]" bracketRight 627
" " whitespace 628
"=>" rocket 629
" " whitespace 631
"(" parenLeft 632
"[" bracketLeft 633
"[" bracketLeft 634
"[" bracketLeft 635
"]" bracketRight 636
"," comma 637
" " whitespace 638
"1" integer 639
" " whitespace 640
"%" % 641
" " whitespace 642
"-" - 643
"3e12" float 644
"," comma 648
" " whitespace 649
"2" integer 650
"]" bracketRight 651
"[" bracketLeft 652
"!" not 653
"b" identifier 654
"[" bracketLeft 655
"]" bracketRight 656
"." dot 657
"b" identifier 658
"]" bracketRight 659
"[" bracketLeft 660
"-" - 661
"100" integer 662
".." dotDot 665
"-" - 667
"100" integer 668
"]" bracketRight 671
"," comma 672
" " whitespace 673
"(" parenLeft 674
"null" null 675
" " whitespace 679
"!=" neq 680
" " whitespace 682
"a" identifier 683
" " whitespace 684
"||" or 685
" " whitespace 687
"a" identifier 688
"." dot 689
"c" identifier 690
" " whitespace 691
"!=" neq 692
" " whitespace 694
"100" integer 695
")" parenRight 698
"]" bracketRight 699
"[" bracketLeft 700
"(" parenLeft 701
"a" identifier 702
"->" arrow 703
"c" identifier 705
")" parenRight 706
"]" bracketRight 707
" " whitespace 708
"|" pipe 709
" " whitespace 710
"order" identifier 711
"(" parenLeft 716
"b" identifier 717
")" parenRight 718
")" parenRight 719
")" parenRight 720
" " whitespace 721
"<" lt 722
" " whitespace 723
"2" integer 724
")" parenRight 725
"]" bracketRight 726
"}" braceRight 727
")" parenRight 728
" " whitespace 729
"!=" neq 730
" " whitespace 732
"100" integer 733
" " whitespace 736
"=>" rocket 737
" " whitespace 739
"{" braceLeft 740
"\"a\"" string 741
":" colon 744
" " whitespace 745
"$myParam" identifier 746
"," comma 754
" " whitespace 755
"b" identifier 756
"[" bracketLeft 757
"]" bracketRight 758
" " whitespace 759
"<" lt 760
" " whitespace 761
"3e-12" float 762
" " whitespace 767
"=>" rocket 768
" " whitespace 770
"{" braceLeft 771
"coalesce" identifier 772
"(" parenLeft 780
"[" bracketLeft 781
"*" * 782
"{" braceLeft 783
"c" identifier 784
"[" bracketLeft 785
"\"d\"" string 786
"]" bracketRight 789
" " whitespace 790
"<" lt 791
" " whitespace 792
"true" bool 793
" " whitespace 797
"=>" rocket 798
" " whitespace 800
"{" braceLeft 801
"false" bool 802
" " whitespace 807
">" gt 808
" " whitespace 809
"c" identifier 810
" " whitespace 811
"=>" rocket 812
" " whitespace 814
"{" braceLeft 815
"a" identifier 816
" " whitespace 817
"=>" rocket 818
" " whitespace 820
"{" braceLeft 821
"..." dotDotDot 822
"," comma 825
" " whitespace 826
"\"f\"" string 827
":" colon 830
" " whitespace 831
"*" * 832
"[" bracketLeft 833
"null" null 834
" " whitespace 838
"<=" lte 839
" " whitespace 841
"a" identifier 842
"]" bracketRight 843
"}" braceRight 844
"}" braceRight 845
"," comma 846
" " whitespace 847
"..." dotDotDot 848
"," comma 851
" " whitespace 852
"b" identifier 853
"->" arrow 854
"b" identifier 856
" " whitespace 857
"<" lt 858
" " whitespace 859
"\"d\"" string 860
" " whitespace 863
"=>" rocket 864
" " whitespace 866
"{" braceLeft 867
"\"d\"" string 868
":" colon 871
" " whitespace 872
"-" - 873
"100" integer 874
" " whitespace 877
"+" + 878
" " whitespace 879
"3e12" float 880
" " whitespace 884
"|" pipe 885
" " whitespace 886
"order" identifier 887
"(" parenLeft 892
"b" identifier 893
")" parenRight 894
"," comma 895
" " whitespace 896
"\"c\"" string 897
":" colon 900
" " whitespace 901
"[" bracketLeft 902
"b" identifier 903
" " whitespace 904
"|" pipe 905
" " whitespace 906
"order" identifier 907
"(" parenLeft 912
"a" identifier 913
")" parenRight 914
" " whitespace 915
"|" pipe 916
" " whitespace 917
"order" identifier 918
"(" parenLeft 923
"b" identifier 924
")" parenRight 925
"]" bracketRight 926
"}" braceRight 927
"}" braceRight 928
"," comma 929
" " whitespace 930
"..." dotDotDot 931
"}" braceRight 934
"," comma 935
" " whitespace 936
"..." dotDotDot 937
"[" bracketLeft 940
"(" parenLeft 941
"*" * 942
" " whitespace 943
"|" pipe 944
" " whitespace 945
"{" braceLeft 946
"\"f\"" string 947
":" colon 950
" " whitespace 951
"*" * 952
"[" bracketLeft 953
"!" not 954
"(" parenLeft 955
"!" not 956
"b" identifier 957
")" parenRight 958
"]" bracketRight 959
"[" bracketLeft 960
"!" not 961
"a" identifier 962
"->" arrow 963
"a" identifier 965
"]" bracketRight 966
"[" bracketLeft 967
"c" identifier 968
"->" arrow 969
"c" identifier 971
" " whitespace 972
"==" equals 973
" " whitespace 975
"100" integer 976
"]" bracketRight 979
"," comma 980
" " whitespace 981
"..." dotDotDot 982
"," comma 985
" " whitespace 986
"\"a\"" string 987
":" colon 990
" " whitespace 991
"c" identifier 992
"}" braceRight 993
")" parenRight 994
"," comma 995
" " whitespace 996
"@" at 997
"." dot 998
"b" identifier 999
"]" bracketRight 1000
"]" bracketRight 1001
"[" bracketLeft 1002
"(" parenLeft 1003
"-" - 1004
"3e-12" float 1005
" " whitespace 1010
">" gt 1011
" " whitespace 1012
"c" identifier 1013
" " whitespace 1014
"&&" and 1015
" " whitespace 1017
"count" identifier 1018
"(" parenLeft 1023
"[" bracketLeft 1024
"*" * 1025
"{" braceLeft 1026
"\"b\"" string 1027
":" colon 1030
" " whitespace 1031
"(" parenLeft 1032
"{" braceLeft 1033
"pt" identifier 1034
"::" doubleColon 1036
"text" identifier 1038
"(" parenLeft 1042
"c" identifier 1043
")" parenRight 1044
" " whitespace 1045
"!=" neq 1046
" " whitespace 1048
"3e12" float 1049
" " whitespace 1053
"=>" rocket 1054
" " whitespace 1056
"{" braceLeft 1057
"\"a\"" string 1058
":" colon 1061
" " whitespace 1062
"[" bracketLeft 1063
"b" identifier 1064
"," comma 1065
" " whitespace 1066
"[" bracketLeft 1067
"]" bracketRight 1068
"[" bracketLeft 1069
"(" parenLeft 1070
"!" not 1071
"c" identifier 1072
"->" arrow 1073
"c" identifier 1075
" " whitespace 1076
"||" or 1077
" " whitespace 1079
"null" null 1080
" " whitespace 1084
"<" lt 1085
" " whitespace 1086
"a" identifier 1087
")" parenRight 1088
"]" bracketRight 1089
"[" bracketLeft 1090
"(" parenLeft 1091
"b" identifier 1092
"[" bracketLeft 1093
"]" bracketRight 1094
"." dot 1095
"b" identifier 1096
" " whitespace 1097
">" gt 1098
" " whitespace 1099
"true" bool 1100
" " whitespace 1104
"||" or 1105
" " whitespace 1107
"b" identifier 1108
"[" bracketLeft 1109
"]" bracketRight 1110
"." dot 1111
"b" identifier 1112
")" parenRight 1113
"]" bracketRight 1114
"[" bracketLeft 1115
"1" integer 1116
".." dotDot 1117
"1" integer 1119
"]" bracketRight 1120
"," comma 1121
" " whitespace 1122
"-" - 1123
"3e12" float 1124
" " whitespace 1128
"+" + 1129
" " whitespace 1130
"-" - 1131
"1" integer 1132
"]" bracketRight 1133
"[" bracketLeft 1134
"100" integer 1135
"]" bracketRight 1138
"," comma 1139
" " whitespace 1140
"true" bool 1141
" " whitespace 1145
"==" equals 1146
" " whitespace 1148
"a" identifier 1149
" " whitespace 1150
"=>" rocket 1151
" " whitespace 1153
"{" braceLeft 1154
"!" not 1155
"a" identifier 1156
" " whitespace 1157
"=>" rocket 1158
" " whitespace 1160
"{" braceLeft 1161
"..." dotDotDot 1162
"," comma 1165
" " whitespace 1166
"\"b\"" string 1167
":" colon 1170
" " whitespace 1171
"(" parenLeft 1172
"b" identifier 1173
" " whitespace 1174
"|" pipe 1175
" " whitespace 1176
"order" identifier 1177
"(" parenLeft 1182
"a" identifier 1183
")" parenRight 1184
" " whitespace 1185
"|" pipe 1186
" " whitespace 1187
"order" identifier 1188
"(" parenLeft 1193
"b" identifier 1194
")" parenRight 1195
")" parenRight 1196
"}" braceRight 1197
"," comma 1198
" " whitespace 1199
"b" identifier 1200
"[" bracketLeft 1201
"]" bracketRight 1202
"." dot 1203
"c" identifier 1204
" " whitespace 1205
"=>" rocket 1206
" " whitespace 1208
"{" braceLeft 1209
"..." dotDotDot 1210
"," comma 1213
" " whitespace 1214
"count" identifier 1215
"(" parenLeft 1220
"*" * 1221
"[" bracketLeft 1222
"b" identifier 1223
"->" arrow 1224
"]" bracketRight 1226
"[" bracketLeft 1227
"a" identifier 1228
"[" bracketLeft 1229
"]" bracketRight 1230
"." dot 1231
"c" identifier 1232
" " whitespace 1233
"<=" lte 1234
" " whitespace 1236
"false" bool 1237
"]" bracketRight 1242
"[" bracketLeft 1243
"!" not 1244
"(" parenLeft 1245
"select" identifier 1246
"(" parenLeft 1252
"@" at 1253
"." dot 1254
"a" identifier 1255
" " whitespace 1256
"=>" rocket 1257
" " whitespace 1259
"$myParam" identifier 1260
")" parenRight 1268
" " whitespace 1269
"!=" neq 1270
" " whitespace 1272
"-" - 1273
"100" integer 1274
")" parenRight 1277
"]" bracketRight 1278
" " whitespace 1279
"|" pipe 1280
" " whitespace 1281
"{" braceLeft 1282
"c" identifier 1283
"[" bracketLeft 1284
"\"g\"" string 1285
"]" bracketRight 1288
" " whitespace 1289
"=>" rocket 1290
" " whitespace 1292
"{" braceLeft 1293
"..." dotDotDot 1294
"," comma 1297
" " whitespace 1298
"\"d\"" string 1299
":" colon 1302
" " whitespace 1303
"[" bracketLeft 1304
"*" * 1305
"[" bracketLeft 1306
"2" integer 1307
"]" bracketRight 1308
"]" bracketRight 1309
"[" bracketLeft 1310
"(" parenLeft 1311
"b" identifier 1312
"->" arrow 1313
" " whitespace 1315
"||" or 1316
" " whitespace 1318
"pt" identifier 1319
"::" doubleColon 1321
"text" identifier 1323
"(" parenLeft 1327
"a" identifier 1328
")" parenRight 1329
" " whitespace 1330
"<" lt 1331
" " whitespace 1332
"-" - 1333
"1.1" float 1334
")" parenRight 1337
"]" bracketRight 1338
"[" bracketLeft 1339
"!" not 1340
"(" parenLeft 1341
"!" not 1342
"a" identifier 1343
"[" bracketLeft 1344
"]" bracketRight 1345
"." dot 1346
"a" identifier 1347
")" parenRight 1348
"]" bracketRight 1349
" " whitespace 1350
"|" pipe 1351
" " whitespace 1352
"{" braceLeft 1353
"..." dotDotDot 1354
"," comma 1357
" " whitespace 1358
"\"g\"" string 1359
":" colon 1362
" " whitespace 1363
"\"d\"" string 1364
" " whitespace 1367
"+" + 1368
" " whitespace 1369
"\"c\"" string 1370
"}" braceRight 1373
"}" braceRight 1374
"," comma 1375
" " whitespace 1376
"..." dotDotDot 1377
"}" braceRight 1380
")" parenRight 1381
" " whitespace 1382
"<" lt 1383
" " whitespace 1384
"3e-12" float 1385
" " whitespace 1390
"=>" rocket 1391
" " whitespace 1393
"{" braceLeft 1394
"\"f\"" string 1395
":" colon 1398
" " whitespace 1399
"\"f\"" string 1400
" " whitespace 1403
"+" + 1404
" " whitespace 1405
"\"f\"" string 1406
"}" braceRight 1409
"}" braceRight 1410
"}" braceRight 1411
"}" braceRight 1412
"," comma 1413
" " whitespace 1414
"..." dotDotDot 1415
"}" braceRight 1418
")" parenRight 1419
"," comma 1420
" " whitespace 1421
"!" not 1422
"c" identifier 1423
"->" arrow 1424
" " whitespace 1426
"=>" rocket 1427
" " whitespace 1429
"{" braceLeft 1430
"\"f\"" string 1431
":" colon 1434
" " whitespace 1435
"[" bracketLeft 1436
"(" parenLeft 1437
"1.1" float 1438
" " whitespace 1441
"==" equals 1442
" " whitespace 1444
"b" identifier 1445
" " whitespace 1446
"&&" and 1447
" " whitespace 1449
"!" not 1450
"c" identifier 1451
")" parenRight 1452
"," comma 1453
" " whitespace 1454
"1.1" float 1455
" " whitespace 1458
"+" + 1459
" " whitespace 1460
"-" - 1461
"1" integer 1462
"," comma 1463
" " whitespace 1464
"^" hat 1465
"." dot 1466
"^" hat 1467
"." dot 1468
"a" identifier 1469
"[" bracketLeft 1470
"]" bracketRight 1471
"." dot 1472
"b" identifier 1473
"]" bracketRight 1474
"[" bracketLeft 1475
"1000000000000000" integer 1476
".." dotDot 1492
"100" integer 1494
"]" bracketRight 1497
"," comma 1498
" " whitespace 1499
"..." dotDotDot 1500
"," comma 1503
" " whitespace 1504
"!" not 1505
"a" identifier 1506
"." dot 1507
"c" identifier 1508
" " whitespace 1509
"=>" rocket 1510
" " whitespace 1512
"{" braceLeft 1513
"\"a\"" string 1514
":" colon 1517
" " whitespace 1518
"*" * 1519
"[" bracketLeft 1520
"!" not 1521
"b" identifier 1522
"[" bracketLeft 1523
"]" bracketRight 1524
"." dot 1525
"a" identifier 1526
"]" bracketRight 1527
"[" bracketLeft 1528
"(" parenLeft 1529
"select" identifier 1530
"(" parenLeft 1536
"[" bracketLeft 1537
"[" bracketLeft 1538
"*" * 1539
"{" braceLeft 1540
"\"f\"" string 1541
":" colon 1544
" " whitespace 1545
"[" bracketLeft 1546
"(" parenLeft 1547
"count" identifier 1548
"(" parenLeft 1553
"*" * 1554
"[" bracketLeft 1555
"b" identifier 1556
"[" bracketLeft 1557
"]" bracketRight 1558
" " whitespace 1559
"<" lt 1560
" " whitespace 1561
"-" - 1562
"1.1" float 1563
"]" bracketRight 1566
"[" bracketLeft 1567
"(" parenLeft 1568
"b" identifier 1569
"->" arrow 1570
" " whitespace 1572
"=>" rocket 1573
" " whitespace 1575
"false" bool 1576
" " whitespace 1581
"&&" and 1582
" " whitespace 1584
"pt" identifier 1585
"::" doubleColon 1587
"text" identifier 1589
"(" parenLeft 1593
"c" identifier 1594
")" parenRight 1595
" " whitespace 1596
">" gt 1597
" " whitespace 1598
"true" bool 1599
")" parenRight 1603
"]" bracketRight 1604
"[" bracketLeft 1605
"(" parenLeft 1606
"a" identifier 1607
"[" bracketLeft 1608
"]" bracketRight 1609
"." dot 1610
"c" identifier 1611
" " whitespace 1612
"<=" lte 1613
" " whitespace 1615
"null" null 1616
" " whitespace 1620
"||" or 1621
" " whitespace 1623
"select" identifier 1624
"(" parenLeft 1630
"\"a\"" string 1631
" " whitespace 1634
"==" equals 1635
" " whitespace 1637
"c" identifier 1638
" " whitespace 1639
"=>" rocket 1640
" " whitespace 1642
"b" identifier 1643
")" parenRight 1644
" " whitespace 1645
"<" lt 1646
" " whitespace 1647
"null" null 1648
")" parenRight 1652
"]" bracketRight 1653
")" parenRight 1654
" " whitespace 1655
"<" lt 1656
" " whitespace 1657
"\"g\"" string 1658
" " whitespace 1661
"&&" and 1662
" " whitespace 1664
"coalesce" identifier 1665
"(" parenLeft 1673
"-" - 1674
"3e-12" float 1675
" " whitespace 1680
"*" * 1681
" " whitespace 1682
"1.1" float 1683
"," comma 1686
" " whitespace 1687
"^" hat 1688
"." dot 1689
"^" hat 1690
"." dot 1691
"^" hat 1692
"." dot 1693
"c" identifier 1694
"->" arrow 1695
"b" identifier 1697
")" parenRight 1698
" " whitespace 1699
"==" equals 1700
" " whitespace 1702
"true" bool 1703
")" parenRight 1707
"," comma 1708
" " whitespace 1709
"[" bracketLeft 1710
"]" bracketRight 1711
"[" bracketLeft 1712
"!" not 1713
"(" parenLeft 1714
"c" identifier 1715
" " whitespace 1716
"<=" lte 1717
" " whitespace 1719
"\"d\"" string 1720
")" parenRight 1723
"]" bracketRight 1724
"[" bracketLeft 1725
"!" not 1726
"a" identifier 1727
"->" arrow 1728
"c" identifier 1730
"]" bracketRight 1731
"[" bracketLeft 1732
"(" parenLeft 1733
"-" - 1734
"100" integer 1735
" " whitespace 1738
"=>" rocket 1739
" " whitespace 1741
"b" identifier 1742
")" parenRight 1743
"]" bracketRight 1744
"[" bracketLeft 1745
"(" parenLeft 1746
"coalesce" identifier 1747
"(" parenLeft 1755
"(" parenLeft 1756
"*" * 1757
"[" bracketLeft 1758
"a" identifier 1759
"]" bracketRight 1760
"[" bracketLeft 1761
"a" identifier 1762
"]" bracketRight 1763
"{" braceLeft 1764
"a" identifier 1765
" " whitespace 1766
"=>" rocket 1767
" " whitespace 1769
"{" braceLeft 1770
"\"a\"" string 1771
":" colon 1774
" " whitespace 1775
"a" identifier 1776
"}" braceRight 1777
"," comma 1778
" " whitespace 1779
"..." dotDotDot 1780
"," comma 1783
" " whitespace 1784
"a" identifier 1785
" " whitespace 1786
"=>" rocket 1787
" " whitespace 1789
"{" braceLeft 1790
"\"a\"" string 1791
":" colon 1794
" " whitespace 1795
"a" identifier 1796
"}" braceRight 1797
"}" braceRight 1798
")" parenRight 1799
"," comma 1800
" " whitespace 1801
"(" parenLeft 1802
"a" identifier 1803
"->" arrow 1804
"a" identifier 1806
" " whitespace 1807
"&&" and 1808
" " whitespace 1810
"b" identifier 1811
"." dot 1812
"c" identifier 1813
")" parenRight 1814
")" parenRight 1815
" " whitespace 1816
"<" lt 1817
" " whitespace 1818
"\"g\"" string 1819
" " whitespace 1822
"&&" and 1823
" " whitespace 1825
"c" identifier 1826
"->" arrow 1827
"." dot 1829
"b" identifier 1830
")" parenRight 1831
"]" bracketRight 1832
"[" bracketLeft 1833
"b" identifier 1834
" " whitespace 1835
"<=" lte 1836
" " whitespace 1838
"3e-12" float 1839
"]" bracketRight 1844
"[" bracketLeft 1845
"(" parenLeft 1846
"b" identifier 1847
"->" arrow 1848
"a" identifier 1850
" " whitespace 1851
"&&" and 1852
" " whitespace 1854
"!" not 1855
"c" identifier 1856
"[" bracketLeft 1857
"\"b\"" string 1858
"]" bracketRight 1861
")" parenRight 1862
"]" bracketRight 1863
"[" bracketLeft 1864
"-" - 1865
"1" integer 1866
"]" bracketRight 1867
"," comma 1868
" " whitespace 1869
"*" * 1870
" " whitespace 1871
"|" pipe 1872
" " whitespace 1873
"{" braceLeft 1874
"-" - 1875
"1.1" float 1876
" " whitespace 1879
"<=" lte 1880
" " whitespace 1882
"c" identifier 1883
" " whitespace 1884
"=>" rocket 1885
" " whitespace 1887
"{" braceLeft 1888
"\"c\"" string 1889
":" colon 1892
" " whitespace 1893
"*" * 1894
" " whitespace 1895
"|" pipe 1896
" " whitespace 1897
"{" braceLeft 1898
"..." dotDotDot 1899
"," comma 1902
" " whitespace 1903
"pt" identifier 1904
"::" doubleColon 1906
"text" identifier 1908
"(" parenLeft 1912
"a" identifier 1913
")" parenRight 1914
" " whitespace 1915
"!=" neq 1916
" " whitespace 1918
"3e-12" float 1919
" " whitespace 1924
"=>" rocket 1925
" " whitespace 1927
"{" braceLeft 1928
"null" null 1929
" " whitespace 1933
"==" equals 1934
" " whitespace 1936
"a" identifier 1937
" " whitespace 1938
"=>" rocket 1939
" " whitespace 1941
"{" braceLeft 1942
"\"a\"" string 1943
":" colon 1946
" " whitespace 1947
"a" identifier 1948
"}" braceRight 1949
"}" braceRight 1950
"}" braceRight 1951
" " whitespace 1952
"|" pipe 1953
" " whitespace 1954
"order" identifier 1955
"(" parenLeft 1960
"c" identifier 1961
")" parenRight 1962
"," comma 1963
" " whitespace 1964
"..." dotDotDot 1965
"}" braceRight 1968
"," comma 1969
" " whitespace 1970
"..." dotDotDot 1971
"," comma 1974
" " whitespace 1975
"\"f\"" string 1976
":" colon 1979
" " whitespace 1980
"$myParam" identifier 1981
"}" braceRight 1989
"]" bracketRight 1990
"[" bracketLeft 1991
"false" bool 1992
" " whitespace 1997
"<" lt 1998
" " whitespace 1999
"b" identifier 2000
"]" bracketRight 2001
"[" bracketLeft 2002
"(" parenLeft 2003
"!" not 2004
"a" identifier 2005
"." dot 2006
"a" identifier 2007
" " whitespace 2008
"||" or 2009
" " whitespace 2011
"a" identifier 2012
"->" arrow 2013
"." dot 2015
"a" identifier 2016
")" parenRight 2017
"]" bracketRight 2018
"[" bracketLeft 2019
"(" parenLeft 2020
"!" not 2021
"a" identifier 2022
"." dot 2023
"a" identifier 2024
")" parenRight 2025
"]" bracketRight 2026
"[" bracketLeft 2027
"1" integer 2028
".." dotDot 2029
"1" integer 2031
"]" bracketRight 2032
"," comma 2033
" " whitespace 2034
"..." dotDotDot 2035
"," comma 2038
" " whitespace 2039
"count" identifier 2040
"(" parenLeft 2045
"-" - 2046
"100" integer 2047
" " whitespace 2050
"/" / 2051
" " whitespace 2052
"1.1" float 2053
")" parenRight 2056
" " whitespace 2057
">" gt 2058
" " whitespace 2059
"-" - 2060
"3e12" float 2061
" " whitespace 2065
"=>" rocket 2066
" " whitespace 2068
"{" braceLeft 2069
"\"d\"" string 2070
":" colon 2073
" " whitespace 2074
"b" identifier 2075
"," comma 2076
" " whitespace 2077
"..." dotDotDot 2078
"," comma 2081
" " whitespace 2082
"c" identifier 2083
"[" bracketLeft 2084
"]" bracketRight 2085
"." dot 2086
"a" identifier 2087
" " whitespace 2088
"==" equals 2089
" " whitespace 2091
"3e-12" float 2092
" " whitespace 2097
"=>" rocket 2098
" " whitespace 2100
"{" braceLeft 2101
"\"g\"" string 2102
":" colon 2105
" " whitespace 2106
"coalesce" identifier 2107
"(" parenLeft 2115
"coalesce" identifier 2116
"(" parenLeft 2124
"b" identifier 2125
"->" arrow 2126
"," comma 2128
" " whitespace 2129
"count" identifier 2130
"(" parenLeft 2135
"^" hat 2136
"." dot 2137
"a" identifier 2138
"->" arrow 2139
")" parenRight 2141
")" parenRight 2142
"," comma 2143
" " whitespace 2144
"null" null 2145
")" parenRight 2149
"," comma 2150
" " whitespace 2151
"\"f\"" string 2152
":" colon 2155
" " whitespace 2156
"1.1" float 2157
" " whitespace 2160
"*" * 2161
" " whitespace 2162
"3e12" float 2163
"}" braceRight 2167
"}" braceRight 2168
"}" braceRight 2169
"," comma 2170
" " whitespace 2171
"1000000000000000" integer 2172
" " whitespace 2188
"-" - 2189
" " whitespace 2190
"3e-12" float 2191
"]" bracketRight 2196
"[" bracketLeft 2197
"(" parenLeft 2198
"select" identifier 2199
"(" parenLeft 2205
"\"a\"" string 2206
" " whitespace 2209
"+" + 2210
" " whitespace 2211
"\"a\"" string 2212
" " whitespace 2215
"=>" rocket 2216
" " whitespace 2218
"^" hat 2219
"." dot 2220
"^" hat 2221
"." dot 2222
"^" hat 2223
"." dot 2224
"b" identifier 2225
"->" arrow 2226
")" parenRight 2228
" " whitespace 2229
"!=" neq 2230
" " whitespace 2232
"2" integer 2233
" " whitespace 2234
"||" or 2235
" " whitespace 2237
"!" not 2238
"a" identifier 2239
"->" arrow 2240
"b" identifier 2242
")" parenRight 2243
"]" bracketRight 2244
"[" bracketLeft 2245
"(" parenLeft 2246
"c" identifier 2247
"->" arrow 2248
"c" identifier 2250
" " whitespace 2251
"||" or 2252
" " whitespace 2254
"b" identifier 2255
" " whitespace 2256
"<" lt 2257
" " whitespace 2258
"3.141592653589793" float 2259
")" parenRight 2276
"]" bracketRight 2277
" " whitespace 2278
"|" pipe 2279
" " whitespace 2280
"{" braceLeft 2281
"..." dotDotDot 2282
"," comma 2285
" " whitespace 2286
"\"c\"" string 2287
":" colon 2290
" " whitespace 2291
"^" hat 2292
"." dot 2293
"^" hat 2294
"." dot 2295
"a" identifier 2296
"->" arrow 2297
"c" identifier 2299
"}" braceRight 2300
"," comma 2301
" " whitespace 2302
"..." dotDotDot 2303
"[" bracketLeft 2306
"a" identifier 2307
"," comma 2308
" " whitespace 2309
"3.141592653589793" float 2310
" " whitespace 2327
"/" / 2328
" " whitespace 2329
"-" - 2330
"1" integer 2331
" " whitespace 2332
"|" pipe 2333
" " whitespace 2334
"order" identifier 2335
"(" parenLeft 2340
"a" identifier 2341
")" parenRight 2342
"," comma 2343
" " whitespace 2344
"@" at 2345
"." dot 2346
"b" identifier 2347
"]" bracketRight 2348
"]" bracketRight 2349
"[" bracketLeft 2350
"(" parenLeft 2351
"count" identifier 2352
"(" parenLeft 2357
"*" * 2358
"[" bracketLeft 2359
"1" integer 2360
"..." dotDotDot 2361
"1" integer 2364
"]" bracketRight 2365
")" parenRight 2366
" " whitespace 2367
"<=" lte 2368
" " whitespace 2370
"-" - 2371
"3e-12" float 2372
" " whitespace 2377
"||" or 2378
" " whitespace 2380
"-" - 2381
"1" integer 2382
" " whitespace 2383
">" gt 2384
" " whitespace 2385
"c" identifier 2386
")" parenRight 2387
"]" bracketRight 2388
"[" bracketLeft 2389
"!" not 2390
"(" parenLeft 2391
"b" identifier 2392
"." dot 2393
"c" identifier 2394
" " whitespace 2395
"==" equals 2396
" " whitespace 2398
"3e12" float 2399
")" parenRight 2403
"]" bracketRight 2404
"[" bracketLeft 2405
"(" parenLeft 2406
"true" bool 2407
" " whitespace 2411
">" gt 2412
" " whitespace 2413
"c" identifier 2414
" " whitespace 2415
"||" or 2416
" " whitespace 2418
"coalesce" identifier 2419
"(" parenLeft 2427
"*" * 2428
"[" bracketLeft 2429
"1000000000000000" integer 2430
"]" bracketRight 2446
"," comma 2447
" " whitespace 2448
"^" hat 2449
"." dot 2450
"^" hat 2451
"." dot 2452
"^" hat 2453
"." dot 2454
"c" identifier 2455
"[" bracketLeft 2456
"]" bracketRight 2457
")" parenRight 2458
" " whitespace 2459
"!=" neq 2460
" " whitespace 2462
"null" null 2463
")" parenRight 2467
"]" bracketRight 2468
" " whitespace 2469
"=>" rocket 2470
" " whitespace 2472
"*" * 2473
"{" braceLeft 2474
"\"f\"" string 2475
":" colon 2478
" " whitespace 2479
"(" parenLeft 2480
"1" integer 2481
" " whitespace 2482
"%" % 2483
" " whitespace 2484
"-" - 2485
"1.1" float 2486
")" parenRight 2489
"}" braceRight 2490
")" parenRight 2491
" " whitespace 2492
"<" lt 2493
" " whitespace 2494
"1000000000000000" integer 2495
" " whitespace 2511
"&&" and 2512
" " whitespace 2514
"count" identifier 2515
"(" parenLeft 2520
"\"b\"" string 2521
" " whitespace 2524
"+" + 2525
" " whitespace 2526
"\"d\"" string 2527
")" parenRight 2530
" " whitespace 2531
"<=" lte 2532
" " whitespace 2534
"2" integer 2535
")" parenRight 2536
"]" bracketRight 2537
"," comma 2538
" " whitespace 2539
"..." dotDotDot 2540
"," comma 2543
" " whitespace 2544
"\"b\"" string 2545
":" colon 2548
" " whitespace 2549
"[" bracketLeft 2550
"*" * 2551
"[" bracketLeft 2552
"c" identifier 2553
"->" arrow 2554
"." dot 2556
"b" identifier 2557
"]" bracketRight 2558
"," comma 2559
" " whitespace 2560
"[" bracketLeft 2561
"[" bracketLeft 2562
"[" bracketLeft 2563
"*" * 2564
"[" bracketLeft 2565
"1000000000000000" integer 2566
"]" bracketRight 2582
"]" bracketRight 2583
"[" bracketLeft 2584
"(" parenLeft 2585
"!" not 2586
"c" identifier 2587
"->" arrow 2588
" " whitespace 2590
"||" or 2591
" " whitespace 2593
"!" not 2594
"c" identifier 2595
"." dot 2596
"b" identifier 2597
")" parenRight 2598
"]" bracketRight 2599
"[" bracketLeft 2600
"(" parenLeft 2601
"b" identifier 2602
" " whitespace 2603
">" gt 2604
" " whitespace 2605
"-" - 2606
"3e12" float 2607
" " whitespace 2611
"&&" and 2612
" " whitespace 2614
"!" not 2615
"c" identifier 2616
"->" arrow 2617
")" parenRight 2619
"]" bracketRight 2620
"," comma 2621
" " whitespace 2622
"..." dotDotDot 2623
"[" bracketLeft 2626
"]" bracketRight 2627
"]" bracketRight 2628
"]" bracketRight 2629
"[" bracketLeft 2630
"!" not 2631
"(" parenLeft 2632
"\"a\"" string 2633
" " whitespace 2636
"<=" lte 2637
" " whitespace 2639
"a" identifier 2640
")" parenRight 2641
"]" bracketRight 2642
"[" bracketLeft 2643
"-" - 2644
"100" integer 2645
".." dotDot 2648
"100" integer 2650
"]" bracketRight 2653
"]" bracketRight 2654
"[" bracketLeft 2655
"(" parenLeft 2656
"!" not 2657
"b" identifier 2658
"->" arrow 2659
"b" identifier 2661
" " whitespace 2662
"&&" and 2663
" " whitespace 2665
"a" identifier 2666
"->" arrow 2667
"." dot 2669
"b" identifier 2670
" " whitespace 2671
"=>" rocket 2672
" " whitespace 2674
"null" null 2675
")" parenRight 2679
"]" bracketRight 2680
"}" braceRight 2681
"}" braceRight 2682
"}" braceRight 2683
"," comma 2684
" " whitespace 2685
"(" parenLeft 2686
"coalesce" identifier 2687
"(" parenLeft 2695
"$myParam" identifier 2696
"," comma 2704
" " whitespace 2705
"$myParam" identifier 2706
")" parenRight 2714
")" parenRight 2715
"]" bracketRight 2716
"[" bracketLeft 2717
"(" parenLeft 2718
"!" not 2719
"a" identifier 2720
"[" bracketLeft 2721
"\"b\"" string 2722
"]" bracketRight 2725
" " whitespace 2726
"&&" and 2727
" " whitespace 2729
"count" identifier 2730
"(" parenLeft 2735
"pt" identifier 2736
"::" doubleColon 2738
"text" identifier 2740
"(" parenLeft 2744
"b" identifier 2745
")" parenRight 2746
")" parenRight 2747
" " whitespace 2748
"!=" neq 2749
" " whitespace 2751
"-" - 2752
"1" integer 2753
")" parenRight 2754
"]" bracketRight 2755
"[" bracketLeft 2756
"null" null 2757
" " whitespace 2761
"<" lt 2762
" " whitespace 2763
"c" identifier 2764
"]" bracketRight 2765
"[" bracketLeft 2766
"(" parenLeft 2767
"!" not 2768
"b" identifier 2769
"->" arrow 2770
"b" identifier 2772
" " whitespace 2773
"&&" and 2774
" " whitespace 2776
"null" null 2777
" " whitespace 2781
"<" lt 2782
" " whitespace 2783
"a" identifier 2784
")" parenRight 2785
"]" bracketRight 2786
"[" bracketLeft 2787
"(" parenLeft 2788
"b" identifier 2789
" " whitespace 2790
"=>" rocket 2791
" " whitespace 2793
"3.141592653589793" float 2794
" " whitespace 2811
"||" or 2812
" " whitespace 2814
"c" identifier 2815
"[" bracketLeft 2816
"]" bracketRight 2817
")" parenRight 2818
"]" bracketRight 2819
"[" bracketLeft 2820
"(" parenLeft 2821
"true" bool 2822
" " whitespace 2826
"<=" lte 2827
" " whitespace 2829
"b" identifier 2830
" " whitespace 2831
"||" or 2832
" " whitespace 2834
"\"g\"" string 2835
" " whitespace 2838
"==" equals 2839
" " whitespace 2841
"b" identifier 2842
")" parenRight 2843
"]" bracketRight 2844
"[" bracketLeft 2845
"(" parenLeft 2846
"count" identifier 2847
"(" parenLeft 2852
"\"a\"" string 2853
" " whitespace 2856
"+" + 2857
" " whitespace 2858
"\"c\"" string 2859
")" parenRight 2862
" " whitespace 2863
">" gt 2864
" " whitespace 2865
"null" null 2866
")" parenRight 2870
"]" bracketRight 2871
"[" bracketLeft 2872
"-" - 2873
"100" integer 2874
"]" bracketRight 2877
" " whitespace 2878
"|" pipe 2879
" " whitespace 2880
"order" identifier 2881
"(" parenLeft 2886
"b" identifier 2887
")" parenRight 2888
")" parenRight 2889
" " whitespace 2890
">" gt 2891
" " whitespace 2892
"1" integer 2893
")" parenRight 2894
"]" bracketRight 2895
" " whitespace 2896
"|" pipe 2897
" " whitespace 2898
"{" braceLeft 2899
"\"e\"" string 2900
":" colon 2903
" " whitespace 2904
"$myParam" identifier 2905
"}" braceRight 2913
"," comma 2914
" " whitespace 2915
"coalesce" identifier 2916
"(" parenLeft 2924
"[" bracketLeft 2925
"[" bracketLeft 2926
"1000000000000000" integer 2927
" " whitespace 2943
"%" % 2944
" " whitespace 2945
"1.1" float 2946
"," comma 2949
" " whitespace 2950
"..." dotDotDot 2951
"[" bracketLeft 2954
"$myParam" identifier 2955
"]" bracketRight 2963
"]" bracketRight 2964
"," comma 2965
" " whitespace 2966
"1" integer 2967
"," comma 2968
" " whitespace 2969
"(" parenLeft 2970
"count" identifier 2971
"(" parenLeft 2976
"pt" identifier 2977
"::" doubleColon 2979
"text" identifier 2981
"(" parenLeft 2985
"a" identifier 2986
")" parenRight 2987
")" parenRight 2988
")" parenRight 2989
"]" bracketRight 2990
"[" bracketLeft 2991
"100" integer 2992
"]" bracketRight 2995
"," comma 2996
" " whitespace 2997
"@" at 2998
")" parenRight 2999
")" parenRight 3000
" " whitespace 3001
"=>" rocket 3002
" " whitespace 3004
"3e12" float 3005
" " whitespace 3009
"=>" rocket 3010
" " whitespace 3012
"{" braceLeft 3013
"b" identifier 3014
"[" bracketLeft 3015
"]" bracketRight 3016
" " whitespace 3017
">" gt 3018
" " whitespace 3019
"3e12" float 3020
" " whitespace 3024
"=>" rocket 3025
" " whitespace 3027
"{" braceLeft 3028
"..." dotDotDot 3029
"," comma 3032
" " whitespace 3033
"\"g\"" string 3034
":" colon 3037
" " whitespace 3038
"3.141592653589793" float 3039
" " whitespace 3056
"+" + 3057
" " whitespace 3058
"3.141592653589793" float 3059
"}" braceRight 3076
"," comma 3077
" " whitespace 3078
"b" identifier 3079
"->" arrow 3080
" " whitespace 3082
"=>" rocket 3083
" " whitespace 3085
"{" braceLeft 3086
"..." dotDotDot 3087
"," comma 3090
" " whitespace 3091
"count" identifier 3092
"(" parenLeft 3097
"*" * 3098
"{" braceLeft 3099
"a" identifier 3100
"->" arrow 3101
"." dot 3103
"a" identifier 3104
" " whitespace 3105
"<=" lte 3106
" " whitespace 3108
"-" - 3109
"1" integer 3110
" " whitespace 3111
"=>" rocket 3112
" " whitespace 3114
"{" braceLeft 3115
"\"d\"" string 3116
":" colon 3119
" " whitespace 3120
"(" parenLeft 3121
"c" identifier 3122
"[" bracketLeft 3123
"\"e\"" string 3124
"]" bracketRight 3127
" " whitespace 3128
"==" equals 3129
" " whitespace 3131
"3e12" float 3132
")" parenRight 3136
"," comma 3137
" " whitespace 3138
"..." dotDotDot 3139
"," comma 3142
" " whitespace 3143
"false" bool 3144
" " whitespace 3149
"==" equals 3150
" " whitespace 3152
"b" identifier 3153
" " whitespace 3154
"=>" rocket 3155
" " whitespace 3157
"{" braceLeft 3158
"\"e\"" string 3159
":" colon 3162
" " whitespace 3163
"count" identifier 3164
"(" parenLeft 3169
"^" hat 3170
"." dot 3171
"b" identifier 3172
"->" arrow 3173
"." dot 3175
"c" identifier 3176
")" parenRight 3177
"," comma 3178
" " whitespace 3179
"..." dotDotDot 3180
"," comma 3183
" " whitespace 3184
"b" identifier 3185
"[" bracketLeft 3186
"]" bracketRight 3187
"." dot 3188
"c" identifier 3189
" " whitespace 3190
"=>" rocket 3191
" " whitespace 3193
"{" braceLeft 3194
"\"f\"" string 3195
":" colon 3198
" " whitespace 3199
"-" - 3200
"100" integer 3201
" " whitespace 3204
"-" - 3205
" " whitespace 3206
"-" - 3207
"3e-12" float 3208
"," comma 3213
" " whitespace 3214
"a" identifier 3215
"->" arrow 3216
" " whitespace 3218
"=>" rocket 3219
" " whitespace 3221
"{" braceLeft 3222
"\"f\"" string 3223
":" colon 3226
" " whitespace 3227
"\"f\"" string 3228
" " whitespace 3231
"+" + 3232
" " whitespace 3233
"\"d\"" string 3234
"," comma 3237
" " whitespace 3238
"c" identifier 3239
"[" bracketLeft 3240
"]" bracketRight 3241
"." dot 3242
"c" identifier 3243
" " whitespace 3244
"=>" rocket 3245
" " whitespace 3247
"{" braceLeft 3248
"b" identifier 3249
"[" bracketLeft 3250
"\"a\"" string 3251
"]" bracketRight 3254
" " whitespace 3255
"<=" lte 3256
" " whitespace 3258
"null" null 3259
" " whitespace 3263
"=>" rocket 3264
" " whitespace 3266
"{" braceLeft 3267
"..." dotDotDot 3268
"," comma 3271
" " whitespace 3272
"a" identifier 3273
"." dot 3274
"b" identifier 3275
" " whitespace 3276
"=>" rocket 3277
" " whitespace 3279
"{" braceLeft 3280
"c" identifier 3281
"->" arrow 3282
"b" identifier 3284
" " whitespace 3285
"=>" rocket 3286
" " whitespace 3288
"{" braceLeft 3289
"\"e\"" string 3290
":" colon 3293
" " whitespace 3294
"select" identifier 3295
"(" parenLeft 3301
"^" hat 3302
"." dot 3303
"^" hat 3304
"." dot 3305
"^" hat 3306
"." dot 3307
"c" identifier 3308
"->" arrow 3309
" " whitespace 3311
"=>" rocket 3312
" " whitespace 3314
"(" parenLeft 3315
"-" - 3316
"1" integer 3317
" " whitespace 3318
"/" / 3319
" " whitespace 3320
"-" - 3321
"3e12" float 3322
")" parenRight 3326
")" parenRight 3327
"," comma 3328
" " whitespace 3329
"..." dotDotDot 3330
"," comma 3333
" " whitespace 3334
"pt" identifier 3335
"::" doubleColon 3337
"text" identifier 3339
"(" parenLeft 3343
"a" identifier 3344
")" parenRight 3345
" " whitespace 3346
"<=" lte 3347
" " whitespace 3349
"3e-12" float 3350
" " whitespace 3355
"=>" rocket 3356
" " whitespace 3358
"{" braceLeft 3359
"false" bool 3360
" " whitespace 3365
"==" equals 3366
" " whitespace 3368
"a" identifier 3369
" " whitespace 3370
"=>" rocket 3371
" " whitespace 3373
"{" braceLeft 3374
"!" not 3375
"c" identifier 3376
"[" bracketLeft 3377
"]" bracketRight 3378
"." dot 3379
"b" identifier 3380
" " whitespace 3381
"=>" rocket 3382
" " whitespace 3384
"{" braceLeft 3385
"a" identifier 3386
"[" bracketLeft 3387
"\"a\"" string 3388
"]" bracketRight 3391
" " whitespace 3392
"<" lt 3393
" " whitespace 3394
"false" bool 3395
" " whitespace 3400
"=>" rocket 3401
" " whitespace 3403
"{" braceLeft 3404
"b" identifier 3405
"[" bracketLeft 3406
"\"b\"" string 3407
"]" bracketRight 3410
" " whitespace 3411
"=>" rocket 3412
" " whitespace 3414
"{" braceLeft 3415
"\"b\"" string 3416
":" colon 3419
" " whitespace 3420
"[" bracketLeft 3421
"$myParam" identifier 3422
" " whitespace 3430
"|" pipe 3431
" " whitespace 3432
"order" identifier 3433
"(" parenLeft 3438
"c" identifier 3439
")" parenRight 3440
"," comma 3441
" " whitespace 3442
"(" parenLeft 3443
"\"a\"" string 3444
" " whitespace 3447
"+" + 3448
" " whitespace 3449
"\"e\"" string 3450
" " whitespace 3453
"|" pipe 3454
" " whitespace 3455
"order" identifier 3456
"(" parenLeft 3461
"a" identifier 3462
")" parenRight 3463
")" parenRight 3464
"]" bracketRight 3465
"[" bracketLeft 3466
"-" - 3467
"100" integer 3468
"..." dotDotDot 3471
"1" integer 3474
"]" bracketRight 3475
"}" braceRight 3476
"," comma 3477
" " whitespace 3478
"..." dotDotDot 3479
"}" braceRight 3482
"," comma 3483
" " whitespace 3484
"..." dotDotDot 3485
"}" braceRight 3488
"," comma 3489
" " whitespace 3490
"..." dotDotDot 3491
"," comma 3494
" " whitespace 3495
"c" identifier 3496
"[" bracketLeft 3497
"]" bracketRight 3498
"." dot 3499
"b" identifier 3500
" " whitespace 3501
"=>" rocket 3502
" " whitespace 3504
"{" braceLeft 3505
"\"f\"" string 3506
":" colon 3509
" " whitespace 3510
"(" parenLeft 3511
"*" * 3512
"[" bracketLeft 3513
"1000000000000000" integer 3514
"]" bracketRight 3530
")" parenRight 3531
"," comma 3532
" " whitespace 3533
"..." dotDotDot 3534
"," comma 3537
" " whitespace 3538
"\"b\"" string 3539
":" colon 3542
" " whitespace 3543
"*" * 3544
"}" braceRight 3545
"}" braceRight 3546
"}" braceRight 3547
"}" braceRight 3548
"," comma 3549
" " whitespace 3550
"..." dotDotDot 3551
"}" braceRight 3554
"}" braceRight 3555
"}" braceRight 3556
"}" braceRight 3557
"}" braceRight 3558
"}" braceRight 3559
"}" braceRight 3560
"}" braceRight 3561
")" parenRight 3562
" " whitespace 3563
"!=" neq 3564
" " whitespace 3566
"true" bool 3567
" " whitespace 3571
"=>" rocket 3572
" " whitespace 3574
"{" braceLeft 3575
"\"f\"" string 3576
":" colon 3579
" " whitespace 3580
"select" identifier 3581
"(" parenLeft 3587
"*" * 3588
"[" bracketLeft 3589
"100" integer 3590
"]" bracketRight 3593
" " whitespace 3594
"=>" rocket 3595
" " whitespace 3597
"c" identifier 3598
" " whitespace 3599
"|" pipe 3600
" " whitespace 3601
"order" identifier 3602
"(" parenLeft 3607
"b" identifier 3608
")" parenRight 3609
")" parenRight 3610
"," comma 3611
" " whitespace 3612
"..." dotDotDot 3613
"," comma 3616
" " whitespace 3617
"!" not 3618
"c" identifier 3619
"." dot 3620
"a" identifier 3621
" " whitespace 3622
"=>" rocket 3623
" " whitespace 3625
"{" braceLeft 3626
"null" null 3627
" " whitespace 3631
"=>" rocket 3632
" " whitespace 3634
"c" identifier 3635
" " whitespace 3636
"=>" rocket 3637
" " whitespace 3639
"{" braceLeft 3640
"!" not 3641
"b" identifier 3642
"." dot 3643
"b" identifier 3644
" " whitespace 3645
"=>" rocket 3646
" " whitespace 3648
"{" braceLeft 3649
"\"e\"" string 3650
":" colon 3653
" " whitespace 3654
"a" identifier 3655
"," comma 3656
" " whitespace 3657
"\"d\"" string 3658
":" colon 3661
" " whitespace 3662
"*" * 3663
"[" bracketLeft 3664
"(" parenLeft 3665
"select" identifier 3666
"(" parenLeft 3672
"\"d\"" string 3673
" " whitespace 3676
"+" + 3677
" " whitespace 3678
"\"e\"" string 3679
" " whitespace 3682
"=>" rocket 3683
" " whitespace 3685
"(" parenLeft 3686
"c" identifier 3687
")" parenRight 3688
")" parenRight 3689
" " whitespace 3690
"<=" lte 3691
" " whitespace 3693
"false" bool 3694
" " whitespace 3699
"||" or 3700
" " whitespace 3702
"coalesce" identifier 3703
"(" parenLeft 3711
"*" * 3712
"[" bracketLeft 3713
"(" parenLeft 3714
"b" identifier 3715
"->" arrow 3716
"a" identifier 3718
")" parenRight 3719
"]" bracketRight 3720
"," comma 3721
" " whitespace 3722
"*" * 3723
")" parenRight 3724
" " whitespace 3725
"<" lt 3726
" " whitespace 3727
"false" bool 3728
")" parenRight 3733
"]" bracketRight 3734
"[" bracketLeft 3735
"(" parenLeft 3736
"3.141592653589793" float 3737
" " whitespace 3754
"<" lt 3755
" " whitespace 3756
"c" identifier 3757
")" parenRight 3758
"]" bracketRight 3759
"[" bracketLeft 3760
"100" integer 3761
"]" bracketRight 3764
"}" braceRight 3765
"}" braceRight 3766
"," comma 3767
" " whitespace 3768
"b" identifier 3769
"->" arrow 3770
" " whitespace 3772
"=>" rocket 3773
" " whitespace 3775
"{" braceLeft 3776
"null" null 3777
" " whitespace 3781
">" gt 3782
" " whitespace 3783
"b" identifier 3784
" " whitespace 3785
"=>" rocket 3786
" " whitespace 3788
"{" braceLeft 3789
"b" identifier 3790
"." dot 3791
"a" identifier 3792
" " whitespace 3793
"<" lt 3794
" " whitespace 3795
"100" integer 3796
" " whitespace 3799
"=>" rocket 3800
" " whitespace 3802
"{" braceLeft 3803
"b" identifier 3804
"." dot 3805
"a" identifier 3806
" " whitespace 3807
"=>" rocket 3808
" " whitespace 3810
"{" braceLeft 3811
"\"a\"" string 3812
":" colon 3815
" " whitespace 3816
"^" hat 3817
"." dot 3818
"c" identifier 3819
"," comma 3820
" " whitespace 3821
"!" not 3822
"c" identifier 3823
"->" arrow 3824
"a" identifier 3826
" " whitespace 3827
"=>" rocket 3828
" " whitespace 3830
"{" braceLeft 3831
"-" - 3832
"1.1" float 3833
" " whitespace 3836
"!=" neq 3837
" " whitespace 3839
"b" identifier 3840
" " whitespace 3841
"=>" rocket 3842
" " whitespace 3844
"{" braceLeft 3845
"..." dotDotDot 3846
"," comma 3849
" " whitespace 3850
"a" identifier 3851
"->" arrow 3852
"b" identifier 3854
" " whitespace 3855
"=>" rocket 3856
" " whitespace 3858
"{" braceLeft 3859
"1" integer 3860
" " whitespace 3861
"!=" neq 3862
" " whitespace 3864
"a" identifier 3865
" " whitespace 3866
"=>" rocket 3867
" " whitespace 3869
"{" braceLeft 3870
"b" identifier 3871
"[" bracketLeft 3872
"\"e\"" string 3873
"]" bracketRight 3876
" " whitespace 3877
"!=" neq 3878
" " whitespace 3880
"1.1" float 3881
" " whitespace 3884
"=>" rocket 3885
" " whitespace 3887
"{" braceLeft 3888
"c" identifier 3889
"[" bracketLeft 3890
"]" bracketRight 3891
"." dot 3892
"b" identifier 3893
" " whitespace 3894
"<=" lte 3895
" " whitespace 3897
"3.141592653589793" float 3898
" " whitespace 3915
"=>" rocket 3916
" " whitespace 3918
"{" braceLeft 3919
"..." dotDotDot 3920
"," comma 3923
" " whitespace 3924
"pt" identifier 3925
"::" doubleColon 3927
"text" identifier 3929
"(" parenLeft 3933
"b" identifier 3934
")" parenRight 3935
" " whitespace 3936
"<" lt 3937
" " whitespace 3938
"true" bool 3939
" " whitespace 3943
"=>" rocket 3944
" " whitespace 3946
"{" braceLeft 3947
"\"a\"" string 3948
":" colon 3951
" " whitespace 3952
"{" braceLeft 3953
"c" identifier 3954
"[" bracketLeft 3955
"]" bracketRight 3956
" " whitespace 3957
"=>" rocket 3958
" " whitespace 3960
"{" braceLeft 3961
"\"g\"" string 3962
":" colon 3965
" " whitespace 3966
"*" * 3967
"," comma 3968
" " whitespace 3969
"..." dotDotDot 3970
"," comma 3973
" " whitespace 3974
"\"d\"" string 3975
":" colon 3978
" " whitespace 3979
"[" bracketLeft 3980
"count" identifier 3981
"(" parenLeft 3986
"b" identifier 3987
"[" bracketLeft 3988
"]" bracketRight 3989
")" parenRight 3990
"," comma 3991
" " whitespace 3992
"..." dotDotDot 3993
"[" bracketLeft 3996
"@" at 3997
"," comma 3998
" " whitespace 3999
"-" - 4000
"1.1" float 4001
" " whitespace 4004
"-" - 4005
" " whitespace 4006
"-" - 4007
"1" integer 4008
"," comma 4009
" " whitespace 4010
"pt" identifier 4011
"::" doubleColon 4013
"text" identifier 4015
"(" parenLeft 4019
"c" identifier 4020
")" parenRight 4021
"]" bracketRight 4022
"]" bracketRight 4023
"[" bracketLeft 4024
"1" integer 4025
"]" bracketRight 4026
"}" braceRight 4027
"}" braceRight 4028
"," comma 4029
" " whitespace 4030
"count" identifier 4031
"(" parenLeft 4036
"@" at 4037
")" parenRight 4038
" " whitespace 4039
">" gt 4040
" " whitespace 4041
"1000000000000000" integer 4042
" " whitespace 4058
"=>" rocket 4059
" " whitespace 4061
"{" braceLeft 4062
"select" identifier 4063
"(" parenLeft 4069
"select" identifier 4070
"(" parenLeft 4076
"^" hat 4077
"." dot 4078
"c" identifier 4079
"->" arrow 4080
"b" identifier 4082
" " whitespace 4083
"=>" rocket 4084
" " whitespace 4086
"@" at 4087
"." dot 4088
"a" identifier 4089
")" parenRight 4090
" " whitespace 4091
"=>" rocket 4092
" " whitespace 4094
"@" at 4095
")" parenRight 4096
" " whitespace 4097
"<=" lte 4098
" " whitespace 4100
"null" null 4101
" " whitespace 4105
"=>" rocket 4106
" " whitespace 4108
"{" braceLeft 4109
"..." dotDotDot 4110
"," comma 4113
" " whitespace 4114
"\"d\"" string 4115
":" colon 4118
" " whitespace 4119
"[" bracketLeft 4120
"{" braceLeft 4121
"!" not 4122
"a" identifier 4123
"->" arrow 4124
"c" identifier 4126
" " whitespace 4127
"=>" rocket 4128
" " whitespace 4130
"{" braceLeft 4131
"select" identifier 4132
"(" parenLeft 4138
"!" not 4139
"(" parenLeft 4140
"c" identifier 4141
"[" bracketLeft 4142
"]" bracketRight 4143
")" parenRight 4144
" " whitespace 4145
"=>" rocket 4146
" " whitespace 4148
"^" hat 4149
"." dot 4150
"a" identifier 4151
")" parenRight 4152
" " whitespace 4153
">" gt 4154
" " whitespace 4155
"1" integer 4156
" " whitespace 4157
"=>" rocket 4158
" " whitespace 4160
"{" braceLeft 4161
"\"c\"" string 4162
":" colon 4165
" " whitespace 4166
"*" * 4167
"[" bracketLeft 4168
"(" parenLeft 4169
"count" identifier 4170
"(" parenLeft 4175
"*" * 4176
"[" bracketLeft 4177
"!" not 4178
"c" identifier 4179
"[" bracketLeft 4180
"]" bracketRight 4181
"]" bracketRight 4182
"[" bracketLeft 4183
"(" parenLeft 4184
"!" not 4185
"a" identifier 4186
"[" bracketLeft 4187
"]" bracketRight 4188
" " whitespace 4189
"||" or 4190
" " whitespace 4192
"!" not 4193
"a" identifier 4194
"." dot 4195
"b" identifier 4196
")" parenRight 4197
"]" bracketRight 4198
")" parenRight 4199
" " whitespace 4200
"==" equals 4201
" " whitespace 4203
"null" null 4204
")" parenRight 4208
"]" bracketRight 4209
"{" braceLeft 4210
"..." dotDotDot 4211
"," comma 4214
" " whitespace 4215
"!" not 4216
"c" identifier 4217
"[" bracketLeft 4218
"]" bracketRight 4219
" " whitespace 4220
"=>" rocket 4221
" " whitespace 4223
"{" braceLeft 4224
"pt" identifier 4225
"::" doubleColon 4227
"text" identifier 4229
"(" parenLeft 4233
"c" identifier 4234
")" parenRight 4235
" " whitespace 4236
"==" equals 4237
" " whitespace 4239
"null" null 4240
" " whitespace 4244
"=>" rocket 4245
" " whitespace 4247
"{" braceLeft 4248
"..." dotDotDot 4249
"," comma 4252
" " whitespace 4253
"\"e\"" string 4254
":" colon 4257
" " whitespace 4258
"@" at 4259
"." dot 4260
"c" identifier 4261
"}" braceRight 4262
"," comma 4263
" " whitespace 4264
"..." dotDotDot 4265
"}" braceRight 4268
"}" braceRight 4269
"}" braceRight 4270
"," comma 4271
" " whitespace 4272
"..." dotDotDot 4273
"}" braceRight 4276
"}" braceRight 4277
"," comma 4278
" " whitespace 4279
"..." dotDotDot 4280
"[" bracketLeft 4283
"*" * 4284
"[" bracketLeft 4285
"!" not 4286
"(" parenLeft 4287
"\"a\"" string 4288
" " whitespace 4291
"!=" neq 4292
" " whitespace 4294
"a" identifier 4295
")" parenRight 4296
"]" bracketRight 4297
"[" bracketLeft 4298
"(" parenLeft 4299
"3.141592653589793" float 4300
" " whitespace 4317
"!=" neq 4318
" " whitespace 4320
"c" identifier 4321
" " whitespace 4322
"||" or 4323
" " whitespace 4325
"count" identifier 4326
"(" parenLeft 4331
"[" bracketLeft 4332
"[" bracketLeft 4333
"2" integer 4334
" " whitespace 4335
"+" + 4336
" " whitespace 4337
"3.141592653589793" float 4338
"]" bracketRight 4355
"," comma 4356
" " whitespace 4357
"(" parenLeft 4358
"*" * 4359
"[" bracketLeft 4360
"(" parenLeft 4361
"a" identifier 4362
"->" arrow 4363
"b" identifier 4365
" " whitespace 4366
"||" or 4367
" " whitespace 4369
"b" identifier 4370
"[" bracketLeft 4371
"\"b\"" string 4372
"]" bracketRight 4375
" " whitespace 4376
"=>" rocket 4377
" " whitespace 4379
"\"b\"" string 4380
")" parenRight 4383
"]" bracketRight 4384
"[" bracketLeft 4385
"!" not 4386
"(" parenLeft 4387
"select" identifier 4388
"(" parenLeft 4394
"a" identifier 4395
" " whitespace 4396
"=>" rocket 4397
" " whitespace 4399
"(" parenLeft 4400
"count" identifier 4401
"(" parenLeft 4406
"a" identifier 4407
")" parenRight 4408
" " whitespace 4409
"=>" rocket 4410
" " whitespace 4412
"true" bool 4413
" " whitespace 4417
"&&" and 4418
" " whitespace 4420
"count" identifier 4421
"(" parenLeft 4426
"!" not 4427
"(" parenLeft 4428
"!" not 4429
"b" identifier 4430
"->" arrow 4431
"a" identifier 4433
")" parenRight 4434
")" parenRight 4435
" " whitespace 4436
"!=" neq 4437
" " whitespace 4439
"null" null 4440
")" parenRight 4444
")" parenRight 4445
" " whitespace 4446
"<=" lte 4447
" " whitespace 4449
"false" bool 4450
")" parenRight 4455
"]" bracketRight 4456
")" parenRight 4457
" " whitespace 4458
"|" pipe 4459
" " whitespace 4460
"order" identifier 4461
"(" parenLeft 4466
"b" identifier 4467
")" parenRight 4468
"," comma 4469
" " whitespace 4470
"\"f\"" string 4471
" " whitespace 4474
"+" + 4475
" " whitespace 4476
"\"e\"" string 4477
"]" bracketRight 4480
"{" braceLeft 4481
"\"b\"" string 4482
":" colon 4485
" " whitespace 4486
"$myParam" identifier 4487
"," comma 4495
" " whitespace 4496
"..." dotDotDot 4497
"," comma 4500
" " whitespace 4501
"\"e\"" string 4502
":" colon 4505
" " whitespace 4506
"{" braceLeft 4507
"..." dotDotDot 4508
"," comma 4511
" " whitespace 4512
"\"d\"" string 4513
":" colon 4516
" " whitespace 4517
"[" bracketLeft 4518
"a" identifier 4519
"," comma 4520
" " whitespace 4521
"..." dotDotDot 4522
"[" bracketLeft 4525
"$myParam" identifier 4526
"]" bracketRight 4534
"]" bracketRight 4535
"[" bracketLeft 4536
"-" - 4537
"100" integer 4538
"]" bracketRight 4541
"}" braceRight 4542
" " whitespace 4543
"|" pipe 4544
" " whitespace 4545
"order" identifier 4546
"(" parenLeft 4551
"c" identifier 4552
")" parenRight 4553
"}" braceRight 4554
")" parenRight 4555
" " whitespace 4556
"<=" lte 4557
" " whitespace 4559
"\"c\"" string 4560
")" parenRight 4563
"]" bracketRight 4564
"," comma 4565
" " whitespace 4566
"..." dotDotDot 4567
"[" bracketLeft 4570
"(" parenLeft 4571
"a" identifier 4572
")" parenRight 4573
"," comma 4574
" " whitespace 4575
"select" identifier 4576
"(" parenLeft 4582
"$myParam" identifier 4583
" " whitespace 4591
"=>" rocket 4592
" " whitespace 4594
"*" * 4595
"{" braceLeft 4596
"..." dotDotDot 4597
"," comma 4600
" " whitespace 4601
"\"b\"" string 4602
":" colon 4605
" " whitespace 4606
"[" bracketLeft 4607
"]" bracketRight 4608
"}" braceRight 4609
")" parenRight 4610
"," comma 4611
" " whitespace 4612
"(" parenLeft 4613
"a" identifier 4614
"->" arrow 4615
" " whitespace 4617
"==" equals 4618
" " whitespace 4620
"true" bool 4621
" " whitespace 4625
"&&" and 4626
" " whitespace 4628
"c" identifier 4629
"[" bracketLeft 4630
"]" bracketRight 4631
"." dot 4632
"c" identifier 4633
")" parenRight 4634
"]" bracketRight 4635
"]" bracketRight 4636
"]" bracketRight 4637
"[" bracketLeft 4638
"coalesce" identifier 4639
"(" parenLeft 4647
"$myParam" identifier 4648
"," comma 4656
" " whitespace 4657
"1" integer 4658
")" parenRight 4659
" " whitespace 4660
"!=" neq 4661
" " whitespace 4663
"\"c\"" string 4664
"]" bracketRight 4667
"}" braceRight 4668
"}" braceRight 4669
"}" braceRight 4670
"}" braceRight 4671
"," comma 4672
" " whitespace 4673
"\"g\"" string 4674
":" colon 4677
" " whitespace 4678
"*" * 4679
"[" bracketLeft 4680
"1" integer 4681
"..." dotDotDot 4682
"-" - 4685
"1" integer 4686
"]" bracketRight 4687
" " whitespace 4688
"|" pipe 4689
" " whitespace 4690
"order" identifier 4691
"(" parenLeft 4696
"a" identifier 4697
")" parenRight 4698
"}" braceRight 4699
"}" braceRight 4700
"," comma 4701
" " whitespace 4702
"..." dotDotDot 4703
"," comma 4706
" " whitespace 4707
"!" not 4708
"c" identifier 4709
"[" bracketLeft 4710
"\"g\"" string 4711
"]" bracketRight 4714
" " whitespace 4715
"=>" rocket 4716
" " whitespace 4718
"{" braceLeft 4719
"!" not 4720
"b" identifier 4721
"->" arrow 4722
" " whitespace 4724
"=>" rocket 4725
" " whitespace 4727
"{" braceLeft 4728
"..." dotDotDot 4729
"," comma 4732
" " whitespace 4733
"\"g\"" string 4734
":" colon 4737
" " whitespace 4738
"a" identifier 4739
"}" braceRight 4740
"," comma 4741
" " whitespace 4742
"..." dotDotDot 4743
"," comma 4746
" " whitespace 4747
"\"g\"" string 4748
":" colon 4751
" " whitespace 4752
"*" * 4753
"[" bracketLeft 4754
"-" - 4755
"100" integer 4756
"]" bracketRight 4759
"}" braceRight 4760
"}" braceRight 4761
"}" braceRight 4762
"}" braceRight 4763
"}" braceRight 4764
"," comma 4765
" " whitespace 4766
"..." dotDotDot 4767
"}" braceRight 4770
"," comma 4771
" " whitespace 4772
"..." dotDotDot 4773
"}" braceRight 4776
"}" braceRight 4777
"}" braceRight 4778
"}" braceRight 4779
"}" braceRight 4780
"}" braceRight 4781
"," comma 4782
" " whitespace 4783
"..." dotDotDot 4784
"}" braceRight 4787
"}" braceRight 4788
"," comma 4789
" " whitespace 4790
"\"a\"" string 4791
":" colon 4794
" " whitespace 4795
"*" * 4796
"[" bracketLeft 4797
"2" integer 4798
"]" bracketRight 4799
"}" braceRight 4800
"," comma 4801
" " whitespace 4802
"..." dotDotDot 4803
"," comma 4806
" " whitespace 4807
"-" - 4808
"3e12" float 4809
" " whitespace 4813
">" gt 4814
" " whitespace 4815
"a" identifier 4816
" " whitespace 4817
"=>" rocket 4818
" " whitespace 4820
"{" braceLeft 4821
"\"f\"" string 4822
":" colon 4825
" " whitespace 4826
"*" * 4827
"[" bracketLeft 4828
"(" parenLeft 4829
"b" identifier 4830
" " whitespace 4831
"==" equals 4832
" " whitespace 4834
"true" bool 4835
")" parenRight 4839
"]" bracketRight 4840
"[" bracketLeft 4841
"1000000000000000" integer 4842
"]" bracketRight 4858
"," comma 4859
" " whitespace 4860
"..." dotDotDot 4861
"}" braceRight 4864
"}" braceRight 4865
"}" braceRight 4866
"}" braceRight 4867
"}" braceRight 4868
"," comma 4869
" " whitespace 4870
"\"a\"" string 4871
":" colon 4874
" " whitespace 4875
"[" bracketLeft 4876
"\"g\"" string 4877
" " whitespace 4880
"+" + 4881
" " whitespace 4882
"\"d\"" string 4883
"]" bracketRight 4886
"}" braceRight 4887
"," comma 4888
" " whitespace 4889
"\"d\"" string 4890
":" colon 4893
" " whitespace 4894
"(" parenLeft 4895
"[" bracketLeft 4896
"*" * 4897
" " whitespace 4898
"|" pipe 4899
" " whitespace 4900
"{" braceLeft 4901
"c" identifier 4902
"->" arrow 4903
"." dot 4905
"c" identifier 4906
" " whitespace 4907
"<" lt 4908
" " whitespace 4909
"false" bool 4910
" " whitespace 4915
"=>" rocket 4916
" " whitespace 4918
"{" braceLeft 4919
"\"c\"" string 4920
":" colon 4923
" " whitespace 4924
"@" at 4925
"," comma 4926
" " whitespace 4927
"..." dotDotDot 4928
"," comma 4931
" " whitespace 4932
"c" identifier 4933
"[" bracketLeft 4934
"\"f\"" string 4935
"]" bracketRight 4938
" " whitespace 4939
"=>" rocket 4940
" " whitespace 4942
"{" braceLeft 4943
"!" not 4944
"c" identifier 4945
" " whitespace 4946
"=>" rocket 4947
" " whitespace 4949
"{" braceLeft 4950
"\"c\"" string 4951
":" colon 4954
" " whitespace 4955
"[" bracketLeft 4956
"-" - 4957
"100" integer 4958
" " whitespace 4961
"<=" lte 4962
" " whitespace 4964
"c" identifier 4965
"]" bracketRight 4966
"[" bracketLeft 4967
"-" - 4968
"100" integer 4969
"..." dotDotDot 4972
"1" integer 4975
"]" bracketRight 4976
"," comma 4977
" " whitespace 4978
"..." dotDotDot 4979
"," comma 4982
" " whitespace 4983
"!" not 4984
"c" identifier 4985
"->" arrow 4986
"a" identifier 4988
" " whitespace 4989
"=>" rocket 4990
" " whitespace 4992
"{" braceLeft 4993
"\"d\"" string 4994
":" colon 4997
" " whitespace 4998
"[" bracketLeft 4999
"$myParam" identifier 5000
"," comma 5008
" " whitespace 5009
"[" bracketLeft 5010
"@" at 5011
"." dot 5012
"c" identifier 5013
"," comma 5014
" " whitespace 5015
"[" bracketLeft 5016
"-" - 5017
"1" integer 5018
" " whitespace 5019
"%" % 5020
" " whitespace 5021
"1" integer 5022
"]" bracketRight 5023
"[" bracketLeft 5024
"(" parenLeft 5025
"b" identifier 5026
"->" arrow 5027
"a" identifier 5029
" " whitespace 5030
"||" or 5031
" " whitespace 5033
"true" bool 5034
" " whitespace 5038
"<" lt 5039
" " whitespace 5040
"c" identifier 5041
")" parenRight 5042
"]" bracketRight 5043
" " whitespace 5044
"|" pipe 5045
" " whitespace 5046
"order" identifier 5047
"(" parenLeft 5052
"c" identifier 5053
")" parenRight 5054
"," comma 5055
" " whitespace 5056
"c" identifier 5057
"]" bracketRight 5058
"[" bracketLeft 5059
"null" null 5060
" " whitespace 5064
"==" equals 5065
" " whitespace 5067
"a" identifier 5068
"]" bracketRight 5069
" " whitespace 5070
"|" pipe 5071
" " whitespace 5072
"{" braceLeft 5073
"\"d\"" string 5074
":" colon 5077
" " whitespace 5078
"[" bracketLeft 5079
"]" bracketRight 5080
"[" bracketLeft 5081
"1" integer 5082
"]" bracketRight 5083
"}" braceRight 5084
"]" bracketRight 5085
"}" braceRight 5086
"}" braceRight 5087
"," comma 5088
" " whitespace 5089
"..." dotDotDot 5090
"}" braceRight 5093
"}" braceRight 5094
"," comma 5095
" " whitespace 5096
"..." dotDotDot 5097
"}" braceRight 5100
"," comma 5101
" " whitespace 5102
"[" bracketLeft 5103
"(" parenLeft 5104
"[" bracketLeft 5105
"a" identifier 5106
"," comma 5107
" " whitespace 5108
"\"c\"" string 5109
" " whitespace 5112
"+" + 5113
" " whitespace 5114
"\"g\"" string 5115
"]" bracketRight 5118
"[" bracketLeft 5119
"!" not 5120
"(" parenLeft 5121
"a" identifier 5122
"[" bracketLeft 5123
"]" bracketRight 5124
")" parenRight 5125
"]" bracketRight 5126
"[" bracketLeft 5127
"(" parenLeft 5128
"c" identifier 5129
"[" bracketLeft 5130
"]" bracketRight 5131
"." dot 5132
"c" identifier 5133
" " whitespace 5134
"||" or 5135
" " whitespace 5137
"b" identifier 5138
"[" bracketLeft 5139
"]" bracketRight 5140
" " whitespace 5141
"<" lt 5142
" " whitespace 5143
"\"d\"" string 5144
")" parenRight 5147
"]" bracketRight 5148
")" parenRight 5149
"]" bracketRight 5150
"[" bracketLeft 5151
"(" parenLeft 5152
"select" identifier 5153
"(" parenLeft 5159
"!" not 5160
"(" parenLeft 5161
"b" identifier 5162
"->" arrow 5163
"." dot 5165
"b" identifier 5166
" " whitespace 5167
"==" equals 5168
" " whitespace 5170
"-" - 5171
"100" integer 5172
")" parenRight 5175
" " whitespace 5176
"=>" rocket 5177
" " whitespace 5179
"[" bracketLeft 5180
"*" * 5181
"[" bracketLeft 5182
"-" - 5183
"1" integer 5184
"]" bracketRight 5185
"," comma 5186
" " whitespace 5187
"..." dotDotDot 5188
"[" bracketLeft 5191
"]" bracketRight 5192
"]" bracketRight 5193
")" parenRight 5194
" " whitespace 5195
"=>" rocket 5196
" " whitespace 5198
"1" integer 5199
" " whitespace 5200
"&&" and 5201
" " whitespace 5203
"\"b\"" string 5204
" " whitespace 5207
"<" lt 5208
" " whitespace 5209
"c" identifier 5210
")" parenRight 5211
"]" bracketRight 5212
"]" bracketRight 5213
")" parenRight 5214
"}" braceRight 5215
"," comma 5216
" " whitespace 5217
"null" null 5218
" " whitespace 5222
"<=" lte 5223
" " whitespace 5225
"b" identifier 5226
")" parenRight 5227
"" eof 5228
