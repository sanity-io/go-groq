//groq:version=0.x.x
//groq:param:myParam="abc"

// The following query exercises all parser-related features for GROQ 2 plus the experimental fragments feature.

fragment Alphabet { a, b } coalesce({count($myParam) > "d" => {c["e"] => {..., null == c => {count([(!b-> || !c.c), ^.^.c->][(true > c && false <= c)][!(b->)][1000000000000000]) <= "g" => {..., b->a => {b.a => {"e": b, ...}, c-> => {"g": count(* | order(a)), "b": @}}}, !a => {..., "f": {!b->.a => {select(@.b => * | {..., "f": *[(!a[] || "f" == b)][(pt::text(c) => 2 && select([!(-1 != c)] => ([[[], 1 % -3e12, 2][!b[].b][-100..-100], (null != a || a.c != 100)][(a->c)] | order(b))) < 2)]}) != 100 => {"a": $myParam, ...$Alphabet, fragment::Alphabet(), b[] < 3e-12 => {coalesce([*{c["d"] < true => {false > c => {a => {..., "f": *[null <= a]}}, ..., b->b < "d" => {"d": -100 + 3e12 | order(b), "c": [b | order(a) | order(b)]}}, ...}, ...[(* | {"f": *[!(!b)][!a->a][c->c == 100], ..., "a": c}), @.b]][(-3e-12 > c && count([*{"b": ({pt::text(c) != 3e12 => {"a": [b, [][(!c->c || null < a)][(b[].b > true || b[].b)][1..1], -3e12 + -1][100], true == a => {!a => {..., "b": (b | order(a) | order(b))}, b[].c => {..., count(*[b->][a[].c <= false][!(select(@.a => $myParam) != -100)] | {c["g"] => {..., "d": [*[2]][(b-> || pt::text(a) < -1.1)][!(!a[].a)] | {..., "g": "d" + "c"}}, ...}) < 3e-12 => {"f": "f" + "f"}}}}, ...}), !c-> => {"f": [(1.1 == b && !c), 1.1 + -1, ^.^.a[].b][1000000000000000..100], ..., !a.c => {"a": *[!b[].a][(select([[*{"f": [(count(*[b[] < -1.1][(b-> => false && pt::text(c) > true)][(a[].c <= null || select("a" == c => b) < null)]) < "g" && coalesce(-3e-12 * 1.1, ^.^.^.c->b) == true), [][!(c <= "d")][!a->c][(-100 => b)][(coalesce((*[a][a]{a => {"a": a}, ..., a => {"a": a}}), (a->a && b.c)) < "g" && c->.b)][b <= 3e-12][(b->a && !c["b"])][-1], * | {-1.1 <= c => {"c": * | {..., pt::text(a) != 3e-12 => {null == a => {"a": a}}} | order(c), ...}, ..., "f": $myParam}][false < b][(!a.a || a->.a)][(!a.a)][1..1], ..., count(-100 / 1.1) > -3e12 => {"d": b, ..., c[].a == 3e-12 => {"g": coalesce(coalesce(b->, count(^.a->)), null), "f": 1.1 * 3e12}}}, 1000000000000000 - 3e-12][(select("a" + "a" => ^.^.^.b->) != 2 || !a->b)][(c->c || b < 3.141592653589793)] | {..., "c": ^.^.a->c}, ...[a, 3.141592653589793 / -1 | order(a), @.b]][(count(*[1...1]) <= -3e-12 || -1 > c)][!(b.c == 3e12)][(true > c || coalesce(*[1000000000000000], ^.^.^.c[]) != null)] => *{"f": (1 % -1.1)}) < 1000000000000000 && count("b" + "d") <= 2)], ..., "b": [*[c->.b], [[[*[1000000000000000]][(!c-> || !c.b)][(b > -3e12 && !c->)], ...[]]][!("a" <= a)][-100..100]][(!b->b && a->.b => null)]}}}, (coalesce($myParam, $myParam))][(!a["b"] && count(pt::text(b)) != -1)][null < c][(!b->b && null < a)][(b => 3.141592653589793 || c[])][(true <= b || "g" == b)][(count("a" + "c") > null)][-100] | order(b)) > 1)] | {"e": $myParam}, coalesce([[1000000000000000 % 1.1, ...[$myParam]], 1, (count(pt::text(a)))][100], @)) => 3e12 => {b[] > 3e12 => {..., "g": 3.141592653589793 + 3.141592653589793}, b-> => {..., count(*{a->.a <= -1 => {"d": (c["e"] == 3e12), ..., false == b => {"e": count(^.b->.c), ..., b[].c => {"f": -100 - -3e-12, a-> => {"f": "f" + "d", c[].c => {b["a"] <= null => {..., a.b => {c->b => {"e": select(^.^.^.c-> => (-1 / -3e12)), ..., pt::text(a) <= 3e-12 => {false == a => {!c[].b => {a["a"] < false => {b["b"] => {"b": [$myParam | order(c), ("a" + "e" | order(a))][-100...1]}, ...}, ...}, ..., c[].b => {"f": (*[1000000000000000]), ..., "b": *}}}}, ...}}}}}}}}) != true => {"f": select(*[100] => c | order(b)), ..., !c.a => {null => c => {!b.b => {"e": a, "d": *[(select("d" + "e" => (c)) <= false || coalesce(*[(b->a)], *) < false)][(3.141592653589793 < c)][100]}}, b-> => {null > b => {b.a < 100 => {b.a => {"a": ^.c, !c->a => {-1.1 != b => {..., a->b => {1 != a => {b["e"] != 1.1 => {c[].b <= 3.141592653589793 => {..., pt::text(b) < true => {"a": {c[] => {"g": *, ..., "d": [count(b[]), ...[@, -1.1 - -1, pt::text(c)]][1]}}, count(@) > 1000000000000000 => {select(select(^.c->b => @.a) => @) <= null => {..., "d": [{!a->c => {select(!(c[]) => ^.a) > 1 => {"c": *[(count(*[!c[]][(!a[] || !a.b)]) == null)]{..., !c[] => {pt::text(c) == null => {..., "e": @.c}, ...}}}, ...}}, ...[*[!("a" != a)][(3.141592653589793 != c || count([[2 + 3.141592653589793], (*[(a->b || b["b"] => "b")][!(select(a => (count(a) => true && count(!(!b->a)) != null)) <= false)]) | order(b), "f" + "e"]{"b": $myParam, ..., "e": {..., "d": [a, ...[$myParam]][-100]} | order(c)}) <= "c")], ...[(a), select($myParam => *{..., "b": []}), (a-> == true && c[].c)]]][coalesce($myParam, 1) != "c"]}}}}, "g": *[1...-1] | order(a)}}, ..., !c["g"] => {!b-> => {..., "g": a}, ..., "g": *[-100]}}}}}, ...}, ...}}}}}}, ...}}, "a": *[2]}, ..., -3e12 > a => {"f": *[(b == true)][1000000000000000], ...}}}}}, "a": ["g" + "d"]}, "d": ([* | {c->.c < false => {"c": @, ..., c["f"] => {!c => {"c": [-100 <= c][-100...1], ..., !c->a => {"d": [$myParam, [@.c, [-1 % 1][(b->a || true < c)] | order(c), c][null == a] | {"d": [][1]}]}}, ...}}, ...}, [([a, "c" + "g"][!(a[])][(c[].c || b[] < "d")])][(select(!(b->.b == -100) => [*[-1], ...[]]) => 1 && "b" < c)]])}, null <= b)
----
"\n" whitespace 48
"\n" whitespace 162
"fragment" identifier 163
" " whitespace 171
"Alphabet" identifier 172
" " whitespace 180
"{" braceLeft 181
" " whitespace 182
"a" identifier 183
"," comma 184
" " whitespace 185
"b" identifier 186
" " whitespace 187
"}" braceRight 188
" " whitespace 189
"coalesce" identifier 190
"(" parenLeft 198
"{" braceLeft 199
"count" identifier 200
"(" parenLeft 205
"$myParam" identifier 206
")" parenRight 214
" " whitespace 215
">" gt 216
" " whitespace 217
"\"d\"" string 218
" " whitespace 221
"=>" rocket 222
" " whitespace 224
"{" braceLeft 225
"c" identifier 226
"[" bracketLeft 227
"\"e\"" string 228
"]" bracketRight 231
" " whitespace 232
"=>" rocket 233
" " whitespace 235
"{" braceLeft 236
"..." dotDotDot 237
"," comma 240
" " whitespace 241
"null" null 242
" " whitespace 246
"==" equals 247
" " whitespace 249
"c" identifier 250
" " whitespace 251
"=>" rocket 252
" " whitespace 254
"{" braceLeft 255
"count" identifier 256
"(" parenLeft 261
"[" bracketLeft 262
"(" parenLeft 263
"!" not 264
"b" identifier 265
"->" arrow 266
" " whitespace 268
"||" or 269
" " whitespace 271
"!" not 272
"c" identifier 273
"." dot 274
"c" identifier 275
")" parenRight 276
"," comma 277
" " whitespace 278
"^" hat 279
"." dot 280
"^" hat 281
"." dot 282
"c" identifier 283
"->" arrow 284
"]" bracketRight 286
"[" bracketLeft 287
"(" parenLeft 288
"true" bool 289
" " whitespace 293
">" gt 294
" " whitespace 295
"c" identifier 296
" " whitespace 297
"&&" and 298
" " whitespace 300
"false" bool 301
" " whitespace 306
"<=" lte 307
" " whitespace 309
"c" identifier 310
")" parenRight 311
"]" bracketRight 312
"[" bracketLeft 313
"!" not 314
"(" parenLeft 315
"b" identifier 316
"->" arrow 317
")" parenRight 319
"]" bracketRight 320
"[" bracketLeft 321
"1000000000000000" integer 322
"]" bracketRight 338
")" parenRight 339
" " whitespace 340
"<=" lte 341
" " whitespace 343
"\"g\"" string 344
" " whitespace 347
"=>" rocket 348
" " whitespace 350
"{" braceLeft 351
"..." dotDotDot 352
"," comma 355
" " whitespace 356
"b" identifier 357
"->" arrow 358
"a" identifier 360
" " whitespace 361
"=>" rocket 362
" " whitespace 364
"{" braceLeft 365
"b" identifier 366
"." dot 367
"a" identifier 368
" " whitespace 369
"=>" rocket 370
" " whitespace 372
"{" braceLeft 373
"\"e\"" string 374
":" colon 377
" " whitespace 378
"b" identifier 379
"," comma 380
" " whitespace 381
"..." dotDotDot 382
"}" braceRight 385
"," comma 386
" " whitespace 387
"c" identifier 388
"->" arrow 389
" " whitespace 391
"=>" rocket 392
" " whitespace 394
"{" braceLeft 395
"\"g\"" string 396
":" colon 399
" " whitespace 400
"count" identifier 401
"(" parenLeft 406
"*" * 407
" " whitespace 408
"|" pipe 409
" " whitespace 410
"order" identifier 411
"(" parenLeft 416
"a" identifier 417
")" parenRight 418
")" parenRight 419
"," comma 420
" " whitespace 421
"\"b\"" string 422
":" colon 425
" " whitespace 426
"@" at 427
"}" braceRight 428
"}" braceRight 429
"}" braceRight 430
"," comma 431
" " whitespace 432
"!" not 433
"a" identifier 434
" " whitespace 435
"=>" rocket 436
" " whitespace 438
"{" braceLeft 439
"..." dotDotDot 440
"," comma 443
" " whitespace 444
"\"f\"" string 445
":" colon 448
" " whitespace 449
"{" braceLeft 450
"!" not 451
"b" identifier 452
"->" arrow 453
"." dot 455
"a" identifier 456
" " whitespace 457
"=>" rocket 458
" " whitespace 460
"{" braceLeft 461
"select" identifier 462
"(" parenLeft 468
"@" at 469
"." dot 470
"b" identifier 471
" " whitespace 472
"=>" rocket 473
" " whitespace 475
"*" * 476
" " whitespace 477
"|" pipe 478
" " whitespace 479
"{" braceLeft 480
"..." dotDotDot 481
"," comma 484
" " whitespace 485
"\"f\"" string 486
":" colon 489
" " whitespace 490
"*" * 491
"[" bracketLeft 492
"(" parenLeft 493
"!" not 494
"a" identifier 495
"[" bracketLeft 496
"]" bracketRight 497
" " whitespace 498
"||" or 499
" " whitespace 501
"\"f\"" string 502
" " whitespace 505
"==" equals 506
" " whitespace 508
"b" identifier 509
")" parenRight 510
"]" bracketRight 511
"[" bracketLeft 512
"(" parenLeft 513
"pt" identifier 514
"::" doubleColon 516
"text" identifier 518
"(" parenLeft 522
"c" identifier 523
")" parenRight 524
" " whitespace 525
"=>" rocket 526
" " whitespace 528
"2" integer 529
" " whitespace 530
"&&" and 531
" " whitespace 533
"select" identifier 534
"(" parenLeft 540
"[" bracketLeft 541
"!" not 542
"(" parenLeft 543
"-" - 544
"1" integer 545
" " whitespace 546
"!=" neq 547
" " whitespace 549
"c" identifier 550
")" parenRight 551
"]" bracketRight 552
" " whitespace 553
"=>" rocket 554
" " whitespace 556
"(" parenLeft 557
"[" bracketLeft 558
"[" bracketLeft 559
"[" bracketLeft 560
"]" bracketRight 561
"," comma 562
" " whitespace 563
"1" integer 564
" " whitespace 565
"%" % 566
" " whitespace 567
"-" - 568
"3e12" float 569
"," comma 573
" " whitespace 574
"2" integer 575
"]" bracketRight 576
"[" bracketLeft 577
"!" not 578
"b" identifier 579
"[" bracketLeft 580
"]" bracketRight 581
"." dot 582
"b" identifier 583
"]" bracketRight 584
"[" bracketLeft 585
"-" - 586
"100" integer 587
".." dotDot 590
"-" - 592
"100" integer 593
"]" bracketRight 596
"," comma 597
" " whitespace 598
"(" parenLeft 599
"null" null 600
" " whitespace 604
"!=" neq 605
" " whitespace 607
"a" identifier 608
" " whitespace 609
"||" or 610
" " whitespace 612
"a" identifier 613
"." dot 614
"c" identifier 615
" " whitespace 616
"!=" neq 617
" " whitespace 619
"100" integer 620
")" parenRight 623
"]" bracketRight 624
"[" bracketLeft 625
"(" parenLeft 626
"a" identifier 627
"->" arrow 628
"c" identifier 630
")" parenRight 631
"]" bracketRight 632
" " whitespace 633
"|" pipe 634
" " whitespace 635
"order" identifier 636
"(" parenLeft 641
"b" identifier 642
")" parenRight 643
")" parenRight 644
")" parenRight 645
" " whitespace 646
"<" lt 647
" " whitespace 648
"2" integer 649
")" parenRight 650
"]" bracketRight 651
"}" braceRight 652
")" parenRight 653
" " whitespace 654
"!=" neq 655
" " whitespace 657
"100" integer 658
" " whitespace 661
"=>" rocket 662
" " whitespace 664
"{" braceLeft 665
"\"a\"" string 666
":" colon 669
" " whitespace 670
"$myParam" identifier 671
"," comma 679
" " whitespace 680
"..." dotDotDot 681
"$Alphabet" identifier 684
"," comma 693
" " whitespace 694
"fragment" identifier 695
"::" doubleColon 703
"Alphabet" identifier 705
"(" parenLeft 713
")" parenRight 714
"," comma 715
" " whitespace 716
"b" identifier 717
"[" bracketLeft 718
"]" bracketRight 719
" " whitespace 720
"<" lt 721
" " whitespace 722
"3e-12" float 723
" " whitespace 728
"=>" rocket 729
" " whitespace 731
"{" braceLeft 732
"coalesce" identifier 733
"(" parenLeft 741
"[" bracketLeft 742
"*" * 743
"{" braceLeft 744
"c" identifier 745
"[" bracketLeft 746
"\"d\"" string 747
"]" bracketRight 750
" " whitespace 751
"<" lt 752
" " whitespace 753
"true" bool 754
" " whitespace 758
"=>" rocket 759
" " whitespace 761
"{" braceLeft 762
"false" bool 763
" " whitespace 768
">" gt 769
" " whitespace 770
"c" identifier 771
" " whitespace 772
"=>" rocket 773
" " whitespace 775
"{" braceLeft 776
"a" identifier 777
" " whitespace 778
"=>" rocket 779
" " whitespace 781
"{" braceLeft 782
"..." dotDotDot 783
"," comma 786
" " whitespace 787
"\"f\"" string 788
":" colon 791
" " whitespace 792
"*" * 793
"[" bracketLeft 794
"null" null 795
" " whitespace 799
"<=" lte 800
" " whitespace 802
"a" identifier 803
"]" bracketRight 804
"}" braceRight 805
"}" braceRight 806
"," comma 807
" " whitespace 808
"..." dotDotDot 809
"," comma 812
" " whitespace 813
"b" identifier 814
"->" arrow 815
"b" identifier 817
" " whitespace 818
"<" lt 819
" " whitespace 820
"\"d\"" string 821
" " whitespace 824
"=>" rocket 825
" " whitespace 827
"{" braceLeft 828
"\"d\"" string 829
":" colon 832
" " whitespace 833
"-" - 834
"100" integer 835
" " whitespace 838
"+" + 839
" " whitespace 840
"3e12" float 841
" " whitespace 845
"|" pipe 846
" " whitespace 847
"order" identifier 848
"(" parenLeft 853
"b" identifier 854
")" parenRight 855
"," comma 856
" " whitespace 857
"\"c\"" string 858
":" colon 861
" " whitespace 862
"[" bracketLeft 863
"b" identifier 864
" " whitespace 865
"|" pipe 866
" " whitespace 867
"order" identifier 868
"(" parenLeft 873
"a" identifier 874
")" parenRight 875
" " whitespace 876
"|" pipe 877
" " whitespace 878
"order" identifier 879
"(" parenLeft 884
"b" identifier 885
")" parenRight 886
"]" bracketRight 887
"}" braceRight 888
"}" braceRight 889
"," comma 890
" " whitespace 891
"..." dotDotDot 892
"}" braceRight 895
"," comma 896
" " whitespace 897
"..." dotDotDot 898
"[" bracketLeft 901
"(" parenLeft 902
"*" * 903
" " whitespace 904
"|" pipe 905
" " whitespace 906
"{" braceLeft 907
"\"f\"" string 908
":" colon 911
" " whitespace 912
"*" * 913
"[" bracketLeft 914
"!" not 915
"(" parenLeft 916
"!" not 917
"b" identifier 918
")" parenRight 919
"]" bracketRight 920
"[" bracketLeft 921
"!" not 922
"a" identifier 923
"->" arrow 924
"a" identifier 926
"]" bracketRight 927
"[" bracketLeft 928
"c" identifier 929
"->" arrow 930
"c" identifier 932
" " whitespace 933
"==" equals 934
" " whitespace 936
"100" integer 937
"]" bracketRight 940
"," comma 941
" " whitespace 942
"..." dotDotDot 943
"," comma 946
" " whitespace 947
"\"a\"" string 948
":" colon 951
" " whitespace 952
"c" identifier 953
"}" braceRight 954
")" parenRight 955
"," comma 956
" " whitespace 957
"@" at 958
"." dot 959
"b" identifier 960
"]" bracketRight 961
"]" bracketRight 962
"[" bracketLeft 963
"(" parenLeft 964
"-" - 965
"3e-12" float 966
" " whitespace 971
">" gt 972
" " whitespace 973
"c" identifier 974
" " whitespace 975
"&&" and 976
" " whitespace 978
"count" identifier 979
"(" parenLeft 984
"[" bracketLeft 985
"*" * 986
"{" braceLeft 987
"\"b\"" string 988
":" colon 991
" " whitespace 992
"(" parenLeft 993
"{" braceLeft 994
"pt" identifier 995
"::" doubleColon 997
"text" identifier 999
"(" parenLeft 1003
"c" identifier 1004
")" parenRight 1005
" " whitespace 1006
"!=" neq 1007
" " whitespace 1009
"3e12" float 1010
" " whitespace 1014
"=>" rocket 1015
" " whitespace 1017
"{" braceLeft 1018
"\"a\"" string 1019
":" colon 1022
" " whitespace 1023
"[" bracketLeft 1024
"b" identifier 1025
"," comma 1026
" " whitespace 1027
"[" bracketLeft 1028
"]" bracketRight 1029
"[" bracketLeft 1030
"(" parenLeft 1031
"!" not 1032
"c" identifier 1033
"->" arrow 1034
"c" identifier 1036
" " whitespace 1037
"||" or 1038
" " whitespace 1040
"null" null 1041
" " whitespace 1045
"<" lt 1046
" " whitespace 1047
"a" identifier 1048
")" parenRight 1049
"]" bracketRight 1050
"[" bracketLeft 1051
"(" parenLeft 1052
"b" identifier 1053
"[" bracketLeft 1054
"]" bracketRight 1055
"." dot 1056
"b" identifier 1057
" " whitespace 1058
">" gt 1059
" " whitespace 1060
"true" bool 1061
" " whitespace 1065
"||" or 1066
" " whitespace 1068
"b" identifier 1069
"[" bracketLeft 1070
"]" bracketRight 1071
"." dot 1072
"b" identifier 1073
")" parenRight 1074
"]" bracketRight 1075
"[" bracketLeft 1076
"1" integer 1077
".." dotDot 1078
"1" integer 1080
"]" bracketRight 1081
"," comma 1082
" " whitespace 1083
"-" - 1084
"3e12" float 1085
" " whitespace 1089
"+" + 1090
" " whitespace 1091
"-" - 1092
"1" integer 1093
"]" bracketRight 1094
"[" bracketLeft 1095
"100" integer 1096
"]" bracketRight 1099
"," comma 1100
" " whitespace 1101
"true" bool 1102
" " whitespace 1106
"==" equals 1107
" " whitespace 1109
"a" identifier 1110
" " whitespace 1111
"=>" rocket 1112
" " whitespace 1114
"{" braceLeft 1115
"!" not 1116
"a" identifier 1117
" " whitespace 1118
"=>" rocket 1119
" " whitespace 1121
"{" braceLeft 1122
"..." dotDotDot 1123
"," comma 1126
" " whitespace 1127
"\"b\"" string 1128
":" colon 1131
" " whitespace 1132
"(" parenLeft 1133
"b" identifier 1134
" " whitespace 1135
"|" pipe 1136
" " whitespace 1137
"order" identifier 1138
"(" parenLeft 1143
"a" identifier 1144
")" parenRight 1145
" " whitespace 1146
"|" pipe 1147
" " whitespace 1148
"order" identifier 1149
"(" parenLeft 1154
"b" identifier 1155
")" parenRight 1156
")" parenRight 1157
"}" braceRight 1158
"," comma 1159
" " whitespace 1160
"b" identifier 1161
"[" bracketLeft 1162
"]" bracketRight 1163
"." dot 1164
"c" identifier 1165
" " whitespace 1166
"=>" rocket 1167
" " whitespace 1169
"{" braceLeft 1170
"..." dotDotDot 1171
"," comma 1174
" " whitespace 1175
"count" identifier 1176
"(" parenLeft 1181
"*" * 1182
"[" bracketLeft 1183
"b" identifier 1184
"->" arrow 1185
"]" bracketRight 1187
"[" bracketLeft 1188
"a" identifier 1189
"[" bracketLeft 1190
"]" bracketRight 1191
"." dot 1192
"c" identifier 1193
" " whitespace 1194
"<=" lte 1195
" " whitespace 1197
"false" bool 1198
"]" bracketRight 1203
"[" bracketLeft 1204
"!" not 1205
"(" parenLeft 1206
"select" identifier 1207
"(" parenLeft 1213
"@" at 1214
"." dot 1215
"a" identifier 1216
" " whitespace 1217
"=>" rocket 1218
" " whitespace 1220
"$myParam" identifier 1221
")" parenRight 1229
" " whitespace 1230
"!=" neq 1231
" " whitespace 1233
"-" - 1234
"100" integer 1235
")" parenRight 1238
"]" bracketRight 1239
" " whitespace 1240
"|" pipe 1241
" " whitespace 1242
"{" braceLeft 1243
"c" identifier 1244
"[" bracketLeft 1245
"\"g\"" string 1246
"]" bracketRight 1249
" " whitespace 1250
"=>" rocket 1251
" " whitespace 1253
"{" braceLeft 1254
"..." dotDotDot 1255
"," comma 1258
" " whitespace 1259
"\"d\"" string 1260
":" colon 1263
" " whitespace 1264
"[" bracketLeft 1265
"*" * 1266
"[" bracketLeft 1267
"2" integer 1268
"]" bracketRight 1269
"]" bracketRight 1270
"[" bracketLeft 1271
"(" parenLeft 1272
"b" identifier 1273
"->" arrow 1274
" " whitespace 1276
"||" or 1277
" " whitespace 1279
"pt" identifier 1280
"::" doubleColon 1282
"text" identifier 1284
"(" parenLeft 1288
"a" identifier 1289
")" parenRight 1290
" " whitespace 1291
"<" lt 1292
" " whitespace 1293
"-" - 1294
"1.1" float 1295
")" parenRight 1298
"]" bracketRight 1299
"[" bracketLeft 1300
"!" not 1301
"(" parenLeft 1302
"!" not 1303
"a" identifier 1304
"[" bracketLeft 1305
"]" bracketRight 1306
"." dot 1307
"a" identifier 1308
")" parenRight 1309
"]" bracketRight 1310
" " whitespace 1311
"|" pipe 1312
" " whitespace 1313
"{" braceLeft 1314
"..." dotDotDot 1315
"," comma 1318
" " whitespace 1319
"\"g\"" string 1320
":" colon 1323
" " whitespace 1324
"\"d\"" string 1325
" " whitespace 1328
"+" + 1329
" " whitespace 1330
"\"c\"" string 1331
"}" braceRight 1334
"}" braceRight 1335
"," comma 1336
" " whitespace 1337
"..." dotDotDot 1338
"}" braceRight 1341
")" parenRight 1342
" " whitespace 1343
"<" lt 1344
" " whitespace 1345
"3e-12" float 1346
" " whitespace 1351
"=>" rocket 1352
" " whitespace 1354
"{" braceLeft 1355
"\"f\"" string 1356
":" colon 1359
" " whitespace 1360
"\"f\"" string 1361
" " whitespace 1364
"+" + 1365
" " whitespace 1366
"\"f\"" string 1367
"}" braceRight 1370
"}" braceRight 1371
"}" braceRight 1372
"}" braceRight 1373
"," comma 1374
" " whitespace 1375
"..." dotDotDot 1376
"}" braceRight 1379
")" parenRight 1380
"," comma 1381
" " whitespace 1382
"!" not 1383
"c" identifier 1384
"->" arrow 1385
" " whitespace 1387
"=>" rocket 1388
" " whitespace 1390
"{" braceLeft 1391
"\"f\"" string 1392
":" colon 1395
" " whitespace 1396
"[" bracketLeft 1397
"(" parenLeft 1398
"1.1" float 1399
" " whitespace 1402
"==" equals 1403
" " whitespace 1405
"b" identifier 1406
" " whitespace 1407
"&&" and 1408
" " whitespace 1410
"!" not 1411
"c" identifier 1412
")" parenRight 1413
"," comma 1414
" " whitespace 1415
"1.1" float 1416
" " whitespace 1419
"+" + 1420
" " whitespace 1421
"-" - 1422
"1" integer 1423
"," comma 1424
" " whitespace 1425
"^" hat 1426
"." dot 1427
"^" hat 1428
"." dot 1429
"a" identifier 1430
"[" bracketLeft 1431
"]" bracketRight 1432
"." dot 1433
"b" identifier 1434
"]" bracketRight 1435
"[" bracketLeft 1436
"1000000000000000" integer 1437
".." dotDot 1453
"100" integer 1455
"]" bracketRight 1458
"," comma 1459
" " whitespace 1460
"..." dotDotDot 1461
"," comma 1464
" " whitespace 1465
"!" not 1466
"a" identifier 1467
"." dot 1468
"c" identifier 1469
" " whitespace 1470
"=>" rocket 1471
" " whitespace 1473
"{" braceLeft 1474
"\"a\"" string 1475
":" colon 1478
" " whitespace 1479
"*" * 1480
"[" bracketLeft 1481
"!" not 1482
"b" identifier 1483
"[" bracketLeft 1484
"]" bracketRight 1485
"." dot 1486
"a" identifier 1487
"]" bracketRight 1488
"[" bracketLeft 1489
"(" parenLeft 1490
"select" identifier 1491
"(" parenLeft 1497
"[" bracketLeft 1498
"[" bracketLeft 1499
"*" * 1500
"{" braceLeft 1501
"\"f\"" string 1502
":" colon 1505
" " whitespace 1506
"[" bracketLeft 1507
"(" parenLeft 1508
"count" identifier 1509
"(" parenLeft 1514
"*" * 1515
"[" bracketLeft 1516
"b" identifier 1517
"[" bracketLeft 1518
"]" bracketRight 1519
" " whitespace 1520
"<" lt 1521
" " whitespace 1522
"-" - 1523
"1.1" float 1524
"]" bracketRight 1527
"[" bracketLeft 1528
"(" parenLeft 1529
"b" identifier 1530
"->" arrow 1531
" " whitespace 1533
"=>" rocket 1534
" " whitespace 1536
"false" bool 1537
" " whitespace 1542
"&&" and 1543
" " whitespace 1545
"pt" identifier 1546
"::" doubleColon 1548
"text" identifier 1550
"(" parenLeft 1554
"c" identifier 1555
")" parenRight 1556
" " whitespace 1557
">" gt 1558
" " whitespace 1559
"true" bool 1560
")" parenRight 1564
"]" bracketRight 1565
"[" bracketLeft 1566
"(" parenLeft 1567
"a" identifier 1568
"[" bracketLeft 1569
"]" bracketRight 1570
"." dot 1571
"c" identifier 1572
" " whitespace 1573
"<=" lte 1574
" " whitespace 1576
"null" null 1577
" " whitespace 1581
"||" or 1582
" " whitespace 1584
"select" identifier 1585
"(" parenLeft 1591
"\"a\"" string 1592
" " whitespace 1595
"==" equals 1596
" " whitespace 1598
"c" identifier 1599
" " whitespace 1600
"=>" rocket 1601
" " whitespace 1603
"b" identifier 1604
")" parenRight 1605
" " whitespace 1606
"<" lt 1607
" " whitespace 1608
"null" null 1609
")" parenRight 1613
"]" bracketRight 1614
")" parenRight 1615
" " whitespace 1616
"<" lt 1617
" " whitespace 1618
"\"g\"" string 1619
" " whitespace 1622
"&&" and 1623
" " whitespace 1625
"coalesce" identifier 1626
"(" parenLeft 1634
"-" - 1635
"3e-12" float 1636
" " whitespace 1641
"*" * 1642
" " whitespace 1643
"1.1" float 1644
"," comma 1647
" " whitespace 1648
"^" hat 1649
"." dot 1650
"^" hat 1651
"." dot 1652
"^" hat 1653
"." dot 1654
"c" identifier 1655
"->" arrow 1656
"b" identifier 1658
")" parenRight 1659
" " whitespace 1660
"==" equals 1661
" " whitespace 1663
"true" bool 1664
")" parenRight 1668
"," comma 1669
" " whitespace 1670
"[" bracketLeft 1671
"]" bracketRight 1672
"[" bracketLeft 1673
"!" not 1674
"(" parenLeft 1675
"c" identifier 1676
" " whitespace 1677
"<=" lte 1678
" " whitespace 1680
"\"d\"" string 1681
")" parenRight 1684
"]" bracketRight 1685
"[" bracketLeft 1686
"!" not 1687
"a" identifier 1688
"->" arrow 1689
"c" identifier 1691
"]" bracketRight 1692
"[" bracketLeft 1693
"(" parenLeft 1694
"-" - 1695
"100" integer 1696
" " whitespace 1699
"=>" rocket 1700
" " whitespace 1702
"b" identifier 1703
")" parenRight 1704
"]" bracketRight 1705
"[" bracketLeft 1706
"(" parenLeft 1707
"coalesce" identifier 1708
"(" parenLeft 1716
"(" parenLeft 1717
"*" * 1718
"[" bracketLeft 1719
"a" identifier 1720
"]" bracketRight 1721
"[" bracketLeft 1722
"a" identifier 1723
"]" bracketRight 1724
"{" braceLeft 1725
"a" identifier 1726
" " whitespace 1727
"=>" rocket 1728
" " whitespace 1730
"{" braceLeft 1731
"\"a\"" string 1732
":" colon 1735
" " whitespace 1736
"a" identifier 1737
"}" braceRight 1738
"," comma 1739
" " whitespace 1740
"..." dotDotDot 1741
"," comma 1744
" " whitespace 1745
"a" identifier 1746
" " whitespace 1747
"=>" rocket 1748
" " whitespace 1750
"{" braceLeft 1751
"\"a\"" string 1752
":" colon 1755
" " whitespace 1756
"a" identifier 1757
"}" braceRight 1758
"}" braceRight 1759
")" parenRight 1760
"," comma 1761
" " whitespace 1762
"(" parenLeft 1763
"a" identifier 1764
"->" arrow 1765
"a" identifier 1767
" " whitespace 1768
"&&" and 1769
" " whitespace 1771
"b" identifier 1772
"." dot 1773
"c" identifier 1774
")" parenRight 1775
")" parenRight 1776
" " whitespace 1777
"<" lt 1778
" " whitespace 1779
"\"g\"" string 1780
" " whitespace 1783
"&&" and 1784
" " whitespace 1786
"c" identifier 1787
"->" arrow 1788
"." dot 1790
"b" identifier 1791
")" parenRight 1792
"]" bracketRight 1793
"[" bracketLeft 1794
"b" identifier 1795
" " whitespace 1796
"<=" lte 1797
" " whitespace 1799
"3e-12" float 1800
"]" bracketRight 1805
"[" bracketLeft 1806
"(" parenLeft 1807
"b" identifier 1808
"->" arrow 1809
"a" identifier 1811
" " whitespace 1812
"&&" and 1813
" " whitespace 1815
"!" not 1816
"c" identifier 1817
"[" bracketLeft 1818
"\"b\"" string 1819
"]" bracketRight 1822
")" parenRight 1823
"]" bracketRight 1824
"[" bracketLeft 1825
"-" - 1826
"1" integer 1827
"]" bracketRight 1828
"," comma 1829
" " whitespace 1830
"*" * 1831
" " whitespace 1832
"|" pipe 1833
" " whitespace 1834
"{" braceLeft 1835
"-" - 1836
"1.1" float 1837
" " whitespace 1840
"<=" lte 1841
" " whitespace 1843
"c" identifier 1844
" " whitespace 1845
"=>" rocket 1846
" " whitespace 1848
"{" braceLeft 1849
"\"c\"" string 1850
":" colon 1853
" " whitespace 1854
"*" * 1855
" " whitespace 1856
"|" pipe 1857
" " whitespace 1858
"{" braceLeft 1859
"..." dotDotDot 1860
"," comma 1863
" " whitespace 1864
"pt" identifier 1865
"::" doubleColon 1867
"text" identifier 1869
"(" parenLeft 1873
"a" identifier 1874
")" parenRight 1875
" " whitespace 1876
"!=" neq 1877
" " whitespace 1879
"3e-12" float 1880
" " whitespace 1885
"=>" rocket 1886
" " whitespace 1888
"{" braceLeft 1889
"null" null 1890
" " whitespace 1894
"==" equals 1895
" " whitespace 1897
"a" identifier 1898
" " whitespace 1899
"=>" rocket 1900
" " whitespace 1902
"{" braceLeft 1903
"\"a\"" string 1904
":" colon 1907
" " whitespace 1908
"a" identifier 1909
"}" braceRight 1910
"}" braceRight 1911
"}" braceRight 1912
" " whitespace 1913
"|" pipe 1914
" " whitespace 1915
"order" identifier 1916
"(" parenLeft 1921
"c" identifier 1922
")" parenRight 1923
"," comma 1924
" " whitespace 1925
"..." dotDotDot 1926
"}" braceRight 1929
"," comma 1930
" " whitespace 1931
"..." dotDotDot 1932
"," comma 1935
" " whitespace 1936
"\"f\"" string 1937
":" colon 1940
" " whitespace 1941
"$myParam" identifier 1942
"}" braceRight 1950
"]" bracketRight 1951
"[" bracketLeft 1952
"false" bool 1953
" " whitespace 1958
"<" lt 1959
" " whitespace 1960
"b" identifier 1961
"]" bracketRight 1962
"[" bracketLeft 1963
"(" parenLeft 1964
"!" not 1965
"a" identifier 1966
"." dot 1967
"a" identifier 1968
" " whitespace 1969
"||" or 1970
" " whitespace 1972
"a" identifier 1973
"->" arrow 1974
"." dot 1976
"a" identifier 1977
")" parenRight 1978
"]" bracketRight 1979
"[" bracketLeft 1980
"(" parenLeft 1981
"!" not 1982
"a" identifier 1983
"." dot 1984
"a" identifier 1985
")" parenRight 1986
"]" bracketRight 1987
"[" bracketLeft 1988
"1" integer 1989
".." dotDot 1990
"1" integer 1992
"]" bracketRight 1993
"," comma 1994
" " whitespace 1995
"..." dotDotDot 1996
"," comma 1999
" " whitespace 2000
"count" identifier 2001
"(" parenLeft 2006
"-" - 2007
"100" integer 2008
" " whitespace 2011
"/" / 2012
" " whitespace 2013
"1.1" float 2014
")" parenRight 2017
" " whitespace 2018
">" gt 2019
" " whitespace 2020
"-" - 2021
"3e12" float 2022
" " whitespace 2026
"=>" rocket 2027
" " whitespace 2029
"{" braceLeft 2030
"\"d\"" string 2031
":" colon 2034
" " whitespace 2035
"b" identifier 2036
"," comma 2037
" " whitespace 2038
"..." dotDotDot 2039
"," comma 2042
" " whitespace 2043
"c" identifier 2044
"[" bracketLeft 2045
"]" bracketRight 2046
"." dot 2047
"a" identifier 2048
" " whitespace 2049
"==" equals 2050
" " whitespace 2052
"3e-12" float 2053
" " whitespace 2058
"=>" rocket 2059
" " whitespace 2061
"{" braceLeft 2062
"\"g\"" string 2063
":" colon 2066
" " whitespace 2067
"coalesce" identifier 2068
"(" parenLeft 2076
"coalesce" identifier 2077
"(" parenLeft 2085
"b" identifier 2086
"->" arrow 2087
"," comma 2089
" " whitespace 2090
"count" identifier 2091
"(" parenLeft 2096
"^" hat 2097
"." dot 2098
"a" identifier 2099
"->" arrow 2100
")" parenRight 2102
")" parenRight 2103
"," comma 2104
" " whitespace 2105
"null" null 2106
")" parenRight 2110
"," comma 2111
" " whitespace 2112
"\"f\"" string 2113
":" colon 2116
" " whitespace 2117
"1.1" float 2118
" " whitespace 2121
"*" * 2122
" " whitespace 2123
"3e12" float 2124
"}" braceRight 2128
"}" braceRight 2129
"}" braceRight 2130
"," comma 2131
" " whitespace 2132
"1000000000000000" integer 2133
" " whitespace 2149
"-" - 2150
" " whitespace 2151
"3e-12" float 2152
"]" bracketRight 2157
"[" bracketLeft 2158
"(" parenLeft 2159
"select" identifier 2160
"(" parenLeft 2166
"\"a\"" string 2167
" " whitespace 2170
"+" + 2171
" " whitespace 2172
"\"a\"" string 2173
" " whitespace 2176
"=>" rocket 2177
" " whitespace 2179
"^" hat 2180
"." dot 2181
"^" hat 2182
"." dot 2183
"^" hat 2184
"." dot 2185
"b" identifier 2186
"->" arrow 2187
")" parenRight 2189
" " whitespace 2190
"!=" neq 2191
" " whitespace 2193
"2" integer 2194
" " whitespace 2195
"||" or 2196
" " whitespace 2198
"!" not 2199
"a" identifier 2200
"->" arrow 2201
"b" identifier 2203
")" parenRight 2204
"]" bracketRight 2205
"[" bracketLeft 2206
"(" parenLeft 2207
"c" identifier 2208
"->" arrow 2209
"c" identifier 2211
" " whitespace 2212
"||" or 2213
" " whitespace 2215
"b" identifier 2216
" " whitespace 2217
"<" lt 2218
" " whitespace 2219
"3.141592653589793" float 2220
")" parenRight 2237
"]" bracketRight 2238
" " whitespace 2239
"|" pipe 2240
" " whitespace 2241
"{" braceLeft 2242
"..." dotDotDot 2243
"," comma 2246
" " whitespace 2247
"\"c\"" string 2248
":" colon 2251
" " whitespace 2252
"^" hat 2253
"." dot 2254
"^" hat 2255
"." dot 2256
"a" identifier 2257
"->" arrow 2258
"c" identifier 2260
"}" braceRight 2261
"," comma 2262
" " whitespace 2263
"..." dotDotDot 2264
"[" bracketLeft 2267
"a" identifier 2268
"," comma 2269
" " whitespace 2270
"3.141592653589793" float 2271
" " whitespace 2288
"/" / 2289
" " whitespace 2290
"-" - 2291
"1" integer 2292
" " whitespace 2293
"|" pipe 2294
" " whitespace 2295
"order" identifier 2296
"(" parenLeft 2301
"a" identifier 2302
")" parenRight 2303
"," comma 2304
" " whitespace 2305
"@" at 2306
"." dot 2307
"b" identifier 2308
"]" bracketRight 2309
"]" bracketRight 2310
"[" bracketLeft 2311
"(" parenLeft 2312
"count" identifier 2313
"(" parenLeft 2318
"*" * 2319
"[" bracketLeft 2320
"1" integer 2321
"..." dotDotDot 2322
"1" integer 2325
"]" bracketRight 2326
")" parenRight 2327
" " whitespace 2328
"<=" lte 2329
" " whitespace 2331
"-" - 2332
"3e-12" float 2333
" " whitespace 2338
"||" or 2339
" " whitespace 2341
"-" - 2342
"1" integer 2343
" " whitespace 2344
">" gt 2345
" " whitespace 2346
"c" identifier 2347
")" parenRight 2348
"]" bracketRight 2349
"[" bracketLeft 2350
"!" not 2351
"(" parenLeft 2352
"b" identifier 2353
"." dot 2354
"c" identifier 2355
" " whitespace 2356
"==" equals 2357
" " whitespace 2359
"3e12" float 2360
")" parenRight 2364
"]" bracketRight 2365
"[" bracketLeft 2366
"(" parenLeft 2367
"true" bool 2368
" " whitespace 2372
">" gt 2373
" " whitespace 2374
"c" identifier 2375
" " whitespace 2376
"||" or 2377
" " whitespace 2379
"coalesce" identifier 2380
"(" parenLeft 2388
"*" * 2389
"[" bracketLeft 2390
"1000000000000000" integer 2391
"]" bracketRight 2407
"," comma 2408
" " whitespace 2409
"^" hat 2410
"." dot 2411
"^" hat 2412
"." dot 2413
"^" hat 2414
"." dot 2415
"c" identifier 2416
"[" bracketLeft 2417
"]" bracketRight 2418
")" parenRight 2419
" " whitespace 2420
"!=" neq 2421
" " whitespace 2423
"null" null 2424
")" parenRight 2428
"]" bracketRight 2429
" " whitespace 2430
"=>" rocket 2431
" " whitespace 2433
"*" * 2434
"{" braceLeft 2435
"\"f\"" string 2436
":" colon 2439
" " whitespace 2440
"(" parenLeft 2441
"1" integer 2442
" " whitespace 2443
"%" % 2444
" " whitespace 2445
"-" - 2446
"1.1" float 2447
")" parenRight 2450
"}" braceRight 2451
")" parenRight 2452
" " whitespace 2453
"<" lt 2454
" " whitespace 2455
"1000000000000000" integer 2456
" " whitespace 2472
"&&" and 2473
" " whitespace 2475
"count" identifier 2476
"(" parenLeft 2481
"\"b\"" string 2482
" " whitespace 2485
"+" + 2486
" " whitespace 2487
"\"d\"" string 2488
")" parenRight 2491
" " whitespace 2492
"<=" lte 2493
" " whitespace 2495
"2" integer 2496
")" parenRight 2497
"]" bracketRight 2498
"," comma 2499
" " whitespace 2500
"..." dotDotDot 2501
"," comma 2504
" " whitespace 2505
"\"b\"" string 2506
":" colon 2509
" " whitespace 2510
"[" bracketLeft 2511
"*" * 2512
"[" bracketLeft 2513
"c" identifier 2514
"->" arrow 2515
"." dot 2517
"b" identifier 2518
"]" bracketRight 2519
"," comma 2520
" " whitespace 2521
"[" bracketLeft 2522
"[" bracketLeft 2523
"[" bracketLeft 2524
"*" * 2525
"[" bracketLeft 2526
"1000000000000000" integer 2527
"]" bracketRight 2543
"]" bracketRight 2544
"[" bracketLeft 2545
"(" parenLeft 2546
"!" not 2547
"c" identifier 2548
"->" arrow 2549
" " whitespace 2551
"||" or 2552
" " whitespace 2554
"!" not 2555
"c" identifier 2556
"." dot 2557
"b" identifier 2558
")" parenRight 2559
"]" bracketRight 2560
"[" bracketLeft 2561
"(" parenLeft 2562
"b" identifier 2563
" " whitespace 2564
">" gt 2565
" " whitespace 2566
"-" - 2567
"3e12" float 2568
" " whitespace 2572
"&&" and 2573
" " whitespace 2575
"!" not 2576
"c" identifier 2577
"->" arrow 2578
")" parenRight 2580
"]" bracketRight 2581
"," comma 2582
" " whitespace 2583
"..." dotDotDot 2584
"[" bracketLeft 2587
"]" bracketRight 2588
"]" bracketRight 2589
"]" bracketRight 2590
"[" bracketLeft 2591
"!" not 2592
"(" parenLeft 2593
"\"a\"" string 2594
" " whitespace 2597
"<=" lte 2598
" " whitespace 2600
"a" identifier 2601
")" parenRight 2602
"]" bracketRight 2603
"[" bracketLeft 2604
"-" - 2605
"100" integer 2606
".." dotDot 2609
"100" integer 2611
"]" bracketRight 2614
"]" bracketRight 2615
"[" bracketLeft 2616
"(" parenLeft 2617
"!" not 2618
"b" identifier 2619
"->" arrow 2620
"b" identifier 2622
" " whitespace 2623
"&&" and 2624
" " whitespace 2626
"a" identifier 2627
"->" arrow 2628
"." dot 2630
"b" identifier 2631
" " whitespace 2632
"=>" rocket 2633
" " whitespace 2635
"null" null 2636
")" parenRight 2640
"]" bracketRight 2641
"}" braceRight 2642
"}" braceRight 2643
"}" braceRight 2644
"," comma 2645
" " whitespace 2646
"(" parenLeft 2647
"coalesce" identifier 2648
"(" parenLeft 2656
"$myParam" identifier 2657
"," comma 2665
" " whitespace 2666
"$myParam" identifier 2667
")" parenRight 2675
")" parenRight 2676
"]" bracketRight 2677
"[" bracketLeft 2678
"(" parenLeft 2679
"!" not 2680
"a" identifier 2681
"[" bracketLeft 2682
"\"b\"" string 2683
"]" bracketRight 2686
" " whitespace 2687
"&&" and 2688
" " whitespace 2690
"count" identifier 2691
"(" parenLeft 2696
"pt" identifier 2697
"::" doubleColon 2699
"text" identifier 2701
"(" parenLeft 2705
"b" identifier 2706
")" parenRight 2707
")" parenRight 2708
" " whitespace 2709
"!=" neq 2710
" " whitespace 2712
"-" - 2713
"1" integer 2714
")" parenRight 2715
"]" bracketRight 2716
"[" bracketLeft 2717
"null" null 2718
" " whitespace 2722
"<" lt 2723
" " whitespace 2724
"c" identifier 2725
"]" bracketRight 2726
"[" bracketLeft 2727
"(" parenLeft 2728
"!" not 2729
"b" identifier 2730
"->" arrow 2731
"b" identifier 2733
" " whitespace 2734
"&&" and 2735
" " whitespace 2737
"null" null 2738
" " whitespace 2742
"<" lt 2743
" " whitespace 2744
"a" identifier 2745
")" parenRight 2746
"]" bracketRight 2747
"[" bracketLeft 2748
"(" parenLeft 2749
"b" identifier 2750
" " whitespace 2751
"=>" rocket 2752
" " whitespace 2754
"3.141592653589793" float 2755
" " whitespace 2772
"||" or 2773
" " whitespace 2775
"c" identifier 2776
"[" bracketLeft 2777
"]" bracketRight 2778
")" parenRight 2779
"]" bracketRight 2780
"[" bracketLeft 2781
"(" parenLeft 2782
"true" bool 2783
" " whitespace 2787
"<=" lte 2788
" " whitespace 2790
"b" identifier 2791
" " whitespace 2792
"||" or 2793
" " whitespace 2795
"\"g\"" string 2796
" " whitespace 2799
"==" equals 2800
" " whitespace 2802
"b" identifier 2803
")" parenRight 2804
"]" bracketRight 2805
"[" bracketLeft 2806
"(" parenLeft 2807
"count" identifier 2808
"(" parenLeft 2813
"\"a\"" string 2814
" " whitespace 2817
"+" + 2818
" " whitespace 2819
"\"c\"" string 2820
")" parenRight 2823
" " whitespace 2824
">" gt 2825
" " whitespace 2826
"null" null 2827
")" parenRight 2831
"]" bracketRight 2832
"[" bracketLeft 2833
"-" - 2834
"100" integer 2835
"]" bracketRight 2838
" " whitespace 2839
"|" pipe 2840
" " whitespace 2841
"order" identifier 2842
"(" parenLeft 2847
"b" identifier 2848
")" parenRight 2849
")" parenRight 2850
" " whitespace 2851
">" gt 2852
" " whitespace 2853
"1" integer 2854
")" parenRight 2855
"]" bracketRight 2856
" " whitespace 2857
"|" pipe 2858
" " whitespace 2859
"{" braceLeft 2860
"\"e\"" string 2861
":" colon 2864
" " whitespace 2865
"$myParam" identifier 2866
"}" braceRight 2874
"," comma 2875
" " whitespace 2876
"coalesce" identifier 2877
"(" parenLeft 2885
"[" bracketLeft 2886
"[" bracketLeft 2887
"1000000000000000" integer 2888
" " whitespace 2904
"%" % 2905
" " whitespace 2906
"1.1" float 2907
"," comma 2910
" " whitespace 2911
"..." dotDotDot 2912
"[" bracketLeft 2915
"$myParam" identifier 2916
"]" bracketRight 2924
"]" bracketRight 2925
"," comma 2926
" " whitespace 2927
"1" integer 2928
"," comma 2929
" " whitespace 2930
"(" parenLeft 2931
"count" identifier 2932
"(" parenLeft 2937
"pt" identifier 2938
"::" doubleColon 2940
"text" identifier 2942
"(" parenLeft 2946
"a" identifier 2947
")" parenRight 2948
")" parenRight 2949
")" parenRight 2950
"]" bracketRight 2951
"[" bracketLeft 2952
"100" integer 2953
"]" bracketRight 2956
"," comma 2957
" " whitespace 2958
"@" at 2959
")" parenRight 2960
")" parenRight 2961
" " whitespace 2962
"=>" rocket 2963
" " whitespace 2965
"3e12" float 2966
" " whitespace 2970
"=>" rocket 2971
" " whitespace 2973
"{" braceLeft 2974
"b" identifier 2975
"[" bracketLeft 2976
"]" bracketRight 2977
" " whitespace 2978
">" gt 2979
" " whitespace 2980
"3e12" float 2981
" " whitespace 2985
"=>" rocket 2986
" " whitespace 2988
"{" braceLeft 2989
"..." dotDotDot 2990
"," comma 2993
" " whitespace 2994
"\"g\"" string 2995
":" colon 2998
" " whitespace 2999
"3.141592653589793" float 3000
" " whitespace 3017
"+" + 3018
" " whitespace 3019
"3.141592653589793" float 3020
"}" braceRight 3037
"," comma 3038
" " whitespace 3039
"b" identifier 3040
"->" arrow 3041
" " whitespace 3043
"=>" rocket 3044
" " whitespace 3046
"{" braceLeft 3047
"..." dotDotDot 3048
"," comma 3051
" " whitespace 3052
"count" identifier 3053
"(" parenLeft 3058
"*" * 3059
"{" braceLeft 3060
"a" identifier 3061
"->" arrow 3062
"." dot 3064
"a" identifier 3065
" " whitespace 3066
"<=" lte 3067
" " whitespace 3069
"-" - 3070
"1" integer 3071
" " whitespace 3072
"=>" rocket 3073
" " whitespace 3075
"{" braceLeft 3076
"\"d\"" string 3077
":" colon 3080
" " whitespace 3081
"(" parenLeft 3082
"c" identifier 3083
"[" bracketLeft 3084
"\"e\"" string 3085
"]" bracketRight 3088
" " whitespace 3089
"==" equals 3090
" " whitespace 3092
"3e12" float 3093
")" parenRight 3097
"," comma 3098
" " whitespace 3099
"..." dotDotDot 3100
"," comma 3103
" " whitespace 3104
"false" bool 3105
" " whitespace 3110
"==" equals 3111
" " whitespace 3113
"b" identifier 3114
" " whitespace 3115
"=>" rocket 3116
" " whitespace 3118
"{" braceLeft 3119
"\"e\"" string 3120
":" colon 3123
" " whitespace 3124
"count" identifier 3125
"(" parenLeft 3130
"^" hat 3131
"." dot 3132
"b" identifier 3133
"->" arrow 3134
"." dot 3136
"c" identifier 3137
")" parenRight 3138
"," comma 3139
" " whitespace 3140
"..." dotDotDot 3141
"," comma 3144
" " whitespace 3145
"b" identifier 3146
"[" bracketLeft 3147
"]" bracketRight 3148
"." dot 3149
"c" identifier 3150
" " whitespace 3151
"=>" rocket 3152
" " whitespace 3154
"{" braceLeft 3155
"\"f\"" string 3156
":" colon 3159
" " whitespace 3160
"-" - 3161
"100" integer 3162
" " whitespace 3165
"-" - 3166
" " whitespace 3167
"-" - 3168
"3e-12" float 3169
"," comma 3174
" " whitespace 3175
"a" identifier 3176
"->" arrow 3177
" " whitespace 3179
"=>" rocket 3180
" " whitespace 3182
"{" braceLeft 3183
"\"f\"" string 3184
":" colon 3187
" " whitespace 3188
"\"f\"" string 3189
" " whitespace 3192
"+" + 3193
" " whitespace 3194
"\"d\"" string 3195
"," comma 3198
" " whitespace 3199
"c" identifier 3200
"[" bracketLeft 3201
"]" bracketRight 3202
"." dot 3203
"c" identifier 3204
" " whitespace 3205
"=>" rocket 3206
" " whitespace 3208
"{" braceLeft 3209
"b" identifier 3210
"[" bracketLeft 3211
"\"a\"" string 3212
"]" bracketRight 3215
" " whitespace 3216
"<=" lte 3217
" " whitespace 3219
"null" null 3220
" " whitespace 3224
"=>" rocket 3225
" " whitespace 3227
"{" braceLeft 3228
"..." dotDotDot 3229
"," comma 3232
" " whitespace 3233
"a" identifier 3234
"." dot 3235
"b" identifier 3236
" " whitespace 3237
"=>" rocket 3238
" " whitespace 3240
"{" braceLeft 3241
"c" identifier 3242
"->" arrow 3243
"b" identifier 3245
" " whitespace 3246
"=>" rocket 3247
" " whitespace 3249
"{" braceLeft 3250
"\"e\"" string 3251
":" colon 3254
" " whitespace 3255
"select" identifier 3256
"(" parenLeft 3262
"^" hat 3263
"." dot 3264
"^" hat 3265
"." dot 3266
"^" hat 3267
"." dot 3268
"c" identifier 3269
"->" arrow 3270
" " whitespace 3272
"=>" rocket 3273
" " whitespace 3275
"(" parenLeft 3276
"-" - 3277
"1" integer 3278
" " whitespace 3279
"/" / 3280
" " whitespace 3281
"-" - 3282
"3e12" float 3283
")" parenRight 3287
")" parenRight 3288
"," comma 3289
" " whitespace 3290
"..." dotDotDot 3291
"," comma 3294
" " whitespace 3295
"pt" identifier 3296
"::" doubleColon 3298
"text" identifier 3300
"(" parenLeft 3304
"a" identifier 3305
")" parenRight 3306
" " whitespace 3307
"<=" lte 3308
" " whitespace 3310
"3e-12" float 3311
" " whitespace 3316
"=>" rocket 3317
" " whitespace 3319
"{" braceLeft 3320
"false" bool 3321
" " whitespace 3326
"==" equals 3327
" " whitespace 3329
"a" identifier 3330
" " whitespace 3331
"=>" rocket 3332
" " whitespace 3334
"{" braceLeft 3335
"!" not 3336
"c" identifier 3337
"[" bracketLeft 3338
"]" bracketRight 3339
"." dot 3340
"b" identifier 3341
" " whitespace 3342
"=>" rocket 3343
" " whitespace 3345
"{" braceLeft 3346
"a" identifier 3347
"[" bracketLeft 3348
"\"a\"" string 3349
"]" bracketRight 3352
" " whitespace 3353
"<" lt 3354
" " whitespace 3355
"false" bool 3356
" " whitespace 3361
"=>" rocket 3362
" " whitespace 3364
"{" braceLeft 3365
"b" identifier 3366
"[" bracketLeft 3367
"\"b\"" string 3368
"]" bracketRight 3371
" " whitespace 3372
"=>" rocket 3373
" " whitespace 3375
"{" braceLeft 3376
"\"b\"" string 3377
":" colon 3380
" " whitespace 3381
"[" bracketLeft 3382
"$myParam" identifier 3383
" " whitespace 3391
"|" pipe 3392
" " whitespace 3393
"order" identifier 3394
"(" parenLeft 3399
"c" identifier 3400
")" parenRight 3401
"," comma 3402
" " whitespace 3403
"(" parenLeft 3404
"\"a\"" string 3405
" " whitespace 3408
"+" + 3409
" " whitespace 3410
"\"e\"" string 3411
" " whitespace 3414
"|" pipe 3415
" " whitespace 3416
"order" identifier 3417
"(" parenLeft 3422
"a" identifier 3423
")" parenRight 3424
")" parenRight 3425
"]" bracketRight 3426
"[" bracketLeft 3427
"-" - 3428
"100" integer 3429
"..." dotDotDot 3432
"1" integer 3435
"]" bracketRight 3436
"}" braceRight 3437
"," comma 3438
" " whitespace 3439
"..." dotDotDot 3440
"}" braceRight 3443
"," comma 3444
" " whitespace 3445
"..." dotDotDot 3446
"}" braceRight 3449
"," comma 3450
" " whitespace 3451
"..." dotDotDot 3452
"," comma 3455
" " whitespace 3456
"c" identifier 3457
"[" bracketLeft 3458
"]" bracketRight 3459
"." dot 3460
"b" identifier 3461
" " whitespace 3462
"=>" rocket 3463
" " whitespace 3465
"{" braceLeft 3466
"\"f\"" string 3467
":" colon 3470
" " whitespace 3471
"(" parenLeft 3472
"*" * 3473
"[" bracketLeft 3474
"1000000000000000" integer 3475
"]" bracketRight 3491
")" parenRight 3492
"," comma 3493
" " whitespace 3494
"..." dotDotDot 3495
"," comma 3498
" " whitespace 3499
"\"b\"" string 3500
":" colon 3503
" " whitespace 3504
"*" * 3505
"}" braceRight 3506
"}" braceRight 3507
"}" braceRight 3508
"}" braceRight 3509
"," comma 3510
" " whitespace 3511
"..." dotDotDot 3512
"}" braceRight 3515
"}" braceRight 3516
"}" braceRight 3517
"}" braceRight 3518
"}" braceRight 3519
"}" braceRight 3520
"}" braceRight 3521
"}" braceRight 3522
")" parenRight 3523
" " whitespace 3524
"!=" neq 3525
" " whitespace 3527
"true" bool 3528
" " whitespace 3532
"=>" rocket 3533
" " whitespace 3535
"{" braceLeft 3536
"\"f\"" string 3537
":" colon 3540
" " whitespace 3541
"select" identifier 3542
"(" parenLeft 3548
"*" * 3549
"[" bracketLeft 3550
"100" integer 3551
"]" bracketRight 3554
" " whitespace 3555
"=>" rocket 3556
" " whitespace 3558
"c" identifier 3559
" " whitespace 3560
"|" pipe 3561
" " whitespace 3562
"order" identifier 3563
"(" parenLeft 3568
"b" identifier 3569
")" parenRight 3570
")" parenRight 3571
"," comma 3572
" " whitespace 3573
"..." dotDotDot 3574
"," comma 3577
" " whitespace 3578
"!" not 3579
"c" identifier 3580
"." dot 3581
"a" identifier 3582
" " whitespace 3583
"=>" rocket 3584
" " whitespace 3586
"{" braceLeft 3587
"null" null 3588
" " whitespace 3592
"=>" rocket 3593
" " whitespace 3595
"c" identifier 3596
" " whitespace 3597
"=>" rocket 3598
" " whitespace 3600
"{" braceLeft 3601
"!" not 3602
"b" identifier 3603
"." dot 3604
"b" identifier 3605
" " whitespace 3606
"=>" rocket 3607
" " whitespace 3609
"{" braceLeft 3610
"\"e\"" string 3611
":" colon 3614
" " whitespace 3615
"a" identifier 3616
"," comma 3617
" " whitespace 3618
"\"d\"" string 3619
":" colon 3622
" " whitespace 3623
"*" * 3624
"[" bracketLeft 3625
"(" parenLeft 3626
"select" identifier 3627
"(" parenLeft 3633
"\"d\"" string 3634
" " whitespace 3637
"+" + 3638
" " whitespace 3639
"\"e\"" string 3640
" " whitespace 3643
"=>" rocket 3644
" " whitespace 3646
"(" parenLeft 3647
"c" identifier 3648
")" parenRight 3649
")" parenRight 3650
" " whitespace 3651
"<=" lte 3652
" " whitespace 3654
"false" bool 3655
" " whitespace 3660
"||" or 3661
" " whitespace 3663
"coalesce" identifier 3664
"(" parenLeft 3672
"*" * 3673
"[" bracketLeft 3674
"(" parenLeft 3675
"b" identifier 3676
"->" arrow 3677
"a" identifier 3679
")" parenRight 3680
"]" bracketRight 3681
"," comma 3682
" " whitespace 3683
"*" * 3684
")" parenRight 3685
" " whitespace 3686
"<" lt 3687
" " whitespace 3688
"false" bool 3689
")" parenRight 3694
"]" bracketRight 3695
"[" bracketLeft 3696
"(" parenLeft 3697
"3.141592653589793" float 3698
" " whitespace 3715
"<" lt 3716
" " whitespace 3717
"c" identifier 3718
")" parenRight 3719
"]" bracketRight 3720
"[" bracketLeft 3721
"100" integer 3722
"]" bracketRight 3725
"}" braceRight 3726
"}" braceRight 3727
"," comma 3728
" " whitespace 3729
"b" identifier 3730
"->" arrow 3731
" " whitespace 3733
"=>" rocket 3734
" " whitespace 3736
"{" braceLeft 3737
"null" null 3738
" " whitespace 3742
">" gt 3743
" " whitespace 3744
"b" identifier 3745
" " whitespace 3746
"=>" rocket 3747
" " whitespace 3749
"{" braceLeft 3750
"b" identifier 3751
"." dot 3752
"a" identifier 3753
" " whitespace 3754
"<" lt 3755
" " whitespace 3756
"100" integer 3757
" " whitespace 3760
"=>" rocket 3761
" " whitespace 3763
"{" braceLeft 3764
"b" identifier 3765
"." dot 3766
"a" identifier 3767
" " whitespace 3768
"=>" rocket 3769
" " whitespace 3771
"{" braceLeft 3772
"\"a\"" string 3773
":" colon 3776
" " whitespace 3777
"^" hat 3778
"." dot 3779
"c" identifier 3780
"," comma 3781
" " whitespace 3782
"!" not 3783
"c" identifier 3784
"->" arrow 3785
"a" identifier 3787
" " whitespace 3788
"=>" rocket 3789
" " whitespace 3791
"{" braceLeft 3792
"-" - 3793
"1.1" float 3794
" " whitespace 3797
"!=" neq 3798
" " whitespace 3800
"b" identifier 3801
" " whitespace 3802
"=>" rocket 3803
" " whitespace 3805
"{" braceLeft 3806
"..." dotDotDot 3807
"," comma 3810
" " whitespace 3811
"a" identifier 3812
"->" arrow 3813
"b" identifier 3815
" " whitespace 3816
"=>" rocket 3817
" " whitespace 3819
"{" braceLeft 3820
"1" integer 3821
" " whitespace 3822
"!=" neq 3823
" " whitespace 3825
"a" identifier 3826
" " whitespace 3827
"=>" rocket 3828
" " whitespace 3830
"{" braceLeft 3831
"b" identifier 3832
"[" bracketLeft 3833
"\"e\"" string 3834
"]" bracketRight 3837
" " whitespace 3838
"!=" neq 3839
" " whitespace 3841
"1.1" float 3842
" " whitespace 3845
"=>" rocket 3846
" " whitespace 3848
"{" braceLeft 3849
"c" identifier 3850
"[" bracketLeft 3851
"]" bracketRight 3852
"." dot 3853
"b" identifier 3854
" " whitespace 3855
"<=" lte 3856
" " whitespace 3858
"3.141592653589793" float 3859
" " whitespace 3876
"=>" rocket 3877
" " whitespace 3879
"{" braceLeft 3880
"..." dotDotDot 3881
"," comma 3884
" " whitespace 3885
"pt" identifier 3886
"::" doubleColon 3888
"text" identifier 3890
"(" parenLeft 3894
"b" identifier 3895
")" parenRight 3896
" " whitespace 3897
"<" lt 3898
" " whitespace 3899
"true" bool 3900
" " whitespace 3904
"=>" rocket 3905
" " whitespace 3907
"{" braceLeft 3908
"\"a\"" string 3909
":" colon 3912
" " whitespace 3913
"{" braceLeft 3914
"c" identifier 3915
"[" bracketLeft 3916
"]" bracketRight 3917
" " whitespace 3918
"=>" rocket 3919
" " whitespace 3921
"{" braceLeft 3922
"\"g\"" string 3923
":" colon 3926
" " whitespace 3927
"*" * 3928
"," comma 3929
" " whitespace 3930
"..." dotDotDot 3931
"," comma 3934
" " whitespace 3935
"\"d\"" string 3936
":" colon 3939
" " whitespace 3940
"[" bracketLeft 3941
"count" identifier 3942
"(" parenLeft 3947
"b" identifier 3948
"[" bracketLeft 3949
"]" bracketRight 3950
")" parenRight 3951
"," comma 3952
" " whitespace 3953
"..." dotDotDot 3954
"[" bracketLeft 3957
"@" at 3958
"," comma 3959
" " whitespace 3960
"-" - 3961
"1.1" float 3962
" " whitespace 3965
"-" - 3966
" " whitespace 3967
"-" - 3968
"1" integer 3969
"," comma 3970
" " whitespace 3971
"pt" identifier 3972
"::" doubleColon 3974
"text" identifier 3976
"(" parenLeft 3980
"c" identifier 3981
")" parenRight 3982
"]" bracketRight 3983
"]" bracketRight 3984
"[" bracketLeft 3985
"1" integer 3986
"]" bracketRight 3987
"}" braceRight 3988
"}" braceRight 3989
"," comma 3990
" " whitespace 3991
"count" identifier 3992
"(" parenLeft 3997
"@" at 3998
")" parenRight 3999
" " whitespace 4000
">" gt 4001
" " whitespace 4002
"1000000000000000" integer 4003
" " whitespace 4019
"=>" rocket 4020
" " whitespace 4022
"{" braceLeft 4023
"select" identifier 4024
"(" parenLeft 4030
"select" identifier 4031
"(" parenLeft 4037
"^" hat 4038
"." dot 4039
"c" identifier 4040
"->" arrow 4041
"b" identifier 4043
" " whitespace 4044
"=>" rocket 4045
" " whitespace 4047
"@" at 4048
"." dot 4049
"a" identifier 4050
")" parenRight 4051
" " whitespace 4052
"=>" rocket 4053
" " whitespace 4055
"@" at 4056
")" parenRight 4057
" " whitespace 4058
"<=" lte 4059
" " whitespace 4061
"null" null 4062
" " whitespace 4066
"=>" rocket 4067
" " whitespace 4069
"{" braceLeft 4070
"..." dotDotDot 4071
"," comma 4074
" " whitespace 4075
"\"d\"" string 4076
":" colon 4079
" " whitespace 4080
"[" bracketLeft 4081
"{" braceLeft 4082
"!" not 4083
"a" identifier 4084
"->" arrow 4085
"c" identifier 4087
" " whitespace 4088
"=>" rocket 4089
" " whitespace 4091
"{" braceLeft 4092
"select" identifier 4093
"(" parenLeft 4099
"!" not 4100
"(" parenLeft 4101
"c" identifier 4102
"[" bracketLeft 4103
"]" bracketRight 4104
")" parenRight 4105
" " whitespace 4106
"=>" rocket 4107
" " whitespace 4109
"^" hat 4110
"." dot 4111
"a" identifier 4112
")" parenRight 4113
" " whitespace 4114
">" gt 4115
" " whitespace 4116
"1" integer 4117
" " whitespace 4118
"=>" rocket 4119
" " whitespace 4121
"{" braceLeft 4122
"\"c\"" string 4123
":" colon 4126
" " whitespace 4127
"*" * 4128
"[" bracketLeft 4129
"(" parenLeft 4130
"count" identifier 4131
"(" parenLeft 4136
"*" * 4137
"[" bracketLeft 4138
"!" not 4139
"c" identifier 4140
"[" bracketLeft 4141
"]" bracketRight 4142
"]" bracketRight 4143
"[" bracketLeft 4144
"(" parenLeft 4145
"!" not 4146
"a" identifier 4147
"[" bracketLeft 4148
"]" bracketRight 4149
" " whitespace 4150
"||" or 4151
" " whitespace 4153
"!" not 4154
"a" identifier 4155
"." dot 4156
"b" identifier 4157
")" parenRight 4158
"]" bracketRight 4159
")" parenRight 4160
" " whitespace 4161
"==" equals 4162
" " whitespace 4164
"null" null 4165
")" parenRight 4169
"]" bracketRight 4170
"{" braceLeft 4171
"..." dotDotDot 4172
"," comma 4175
" " whitespace 4176
"!" not 4177
"c" identifier 4178
"[" bracketLeft 4179
"]" bracketRight 4180
" " whitespace 4181
"=>" rocket 4182
" " whitespace 4184
"{" braceLeft 4185
"pt" identifier 4186
"::" doubleColon 4188
"text" identifier 4190
"(" parenLeft 4194
"c" identifier 4195
")" parenRight 4196
" " whitespace 4197
"==" equals 4198
" " whitespace 4200
"null" null 4201
" " whitespace 4205
"=>" rocket 4206
" " whitespace 4208
"{" braceLeft 4209
"..." dotDotDot 4210
"," comma 4213
" " whitespace 4214
"\"e\"" string 4215
":" colon 4218
" " whitespace 4219
"@" at 4220
"." dot 4221
"c" identifier 4222
"}" braceRight 4223
"," comma 4224
" " whitespace 4225
"..." dotDotDot 4226
"}" braceRight 4229
"}" braceRight 4230
"}" braceRight 4231
"," comma 4232
" " whitespace 4233
"..." dotDotDot 4234
"}" braceRight 4237
"}" braceRight 4238
"," comma 4239
" " whitespace 4240
"..." dotDotDot 4241
"[" bracketLeft 4244
"*" * 4245
"[" bracketLeft 4246
"!" not 4247
"(" parenLeft 4248
"\"a\"" string 4249
" " whitespace 4252
"!=" neq 4253
" " whitespace 4255
"a" identifier 4256
")" parenRight 4257
"]" bracketRight 4258
"[" bracketLeft 4259
"(" parenLeft 4260
"3.141592653589793" float 4261
" " whitespace 4278
"!=" neq 4279
" " whitespace 4281
"c" identifier 4282
" " whitespace 4283
"||" or 4284
" " whitespace 4286
"count" identifier 4287
"(" parenLeft 4292
"[" bracketLeft 4293
"[" bracketLeft 4294
"2" integer 4295
" " whitespace 4296
"+" + 4297
" " whitespace 4298
"3.141592653589793" float 4299
"]" bracketRight 4316
"," comma 4317
" " whitespace 4318
"(" parenLeft 4319
"*" * 4320
"[" bracketLeft 4321
"(" parenLeft 4322
"a" identifier 4323
"->" arrow 4324
"b" identifier 4326
" " whitespace 4327
"||" or 4328
" " whitespace 4330
"b" identifier 4331
"[" bracketLeft 4332
"\"b\"" string 4333
"]" bracketRight 4336
" " whitespace 4337
"=>" rocket 4338
" " whitespace 4340
"\"b\"" string 4341
")" parenRight 4344
"]" bracketRight 4345
"[" bracketLeft 4346
"!" not 4347
"(" parenLeft 4348
"select" identifier 4349
"(" parenLeft 4355
"a" identifier 4356
" " whitespace 4357
"=>" rocket 4358
" " whitespace 4360
"(" parenLeft 4361
"count" identifier 4362
"(" parenLeft 4367
"a" identifier 4368
")" parenRight 4369
" " whitespace 4370
"=>" rocket 4371
" " whitespace 4373
"true" bool 4374
" " whitespace 4378
"&&" and 4379
" " whitespace 4381
"count" identifier 4382
"(" parenLeft 4387
"!" not 4388
"(" parenLeft 4389
"!" not 4390
"b" identifier 4391
"->" arrow 4392
"a" identifier 4394
")" parenRight 4395
")" parenRight 4396
" " whitespace 4397
"!=" neq 4398
" " whitespace 4400
"null" null 4401
")" parenRight 4405
")" parenRight 4406
" " whitespace 4407
"<=" lte 4408
" " whitespace 4410
"false" bool 4411
")" parenRight 4416
"]" bracketRight 4417
")" parenRight 4418
" " whitespace 4419
"|" pipe 4420
" " whitespace 4421
"order" identifier 4422
"(" parenLeft 4427
"b" identifier 4428
")" parenRight 4429
"," comma 4430
" " whitespace 4431
"\"f\"" string 4432
" " whitespace 4435
"+" + 4436
" " whitespace 4437
"\"e\"" string 4438
"]" bracketRight 4441
"{" braceLeft 4442
"\"b\"" string 4443
":" colon 4446
" " whitespace 4447
"$myParam" identifier 4448
"," comma 4456
" " whitespace 4457
"..." dotDotDot 4458
"," comma 4461
" " whitespace 4462
"\"e\"" string 4463
":" colon 4466
" " whitespace 4467
"{" braceLeft 4468
"..." dotDotDot 4469
"," comma 4472
" " whitespace 4473
"\"d\"" string 4474
":" colon 4477
" " whitespace 4478
"[" bracketLeft 4479
"a" identifier 4480
"," comma 4481
" " whitespace 4482
"..." dotDotDot 4483
"[" bracketLeft 4486
"$myParam" identifier 4487
"]" bracketRight 4495
"]" bracketRight 4496
"[" bracketLeft 4497
"-" - 4498
"100" integer 4499
"]" bracketRight 4502
"}" braceRight 4503
" " whitespace 4504
"|" pipe 4505
" " whitespace 4506
"order" identifier 4507
"(" parenLeft 4512
"c" identifier 4513
")" parenRight 4514
"}" braceRight 4515
")" parenRight 4516
" " whitespace 4517
"<=" lte 4518
" " whitespace 4520
"\"c\"" string 4521
")" parenRight 4524
"]" bracketRight 4525
"," comma 4526
" " whitespace 4527
"..." dotDotDot 4528
"[" bracketLeft 4531
"(" parenLeft 4532
"a" identifier 4533
")" parenRight 4534
"," comma 4535
" " whitespace 4536
"select" identifier 4537
"(" parenLeft 4543
"$myParam" identifier 4544
" " whitespace 4552
"=>" rocket 4553
" " whitespace 4555
"*" * 4556
"{" braceLeft 4557
"..." dotDotDot 4558
"," comma 4561
" " whitespace 4562
"\"b\"" string 4563
":" colon 4566
" " whitespace 4567
"[" bracketLeft 4568
"]" bracketRight 4569
"}" braceRight 4570
")" parenRight 4571
"," comma 4572
" " whitespace 4573
"(" parenLeft 4574
"a" identifier 4575
"->" arrow 4576
" " whitespace 4578
"==" equals 4579
" " whitespace 4581
"true" bool 4582
" " whitespace 4586
"&&" and 4587
" " whitespace 4589
"c" identifier 4590
"[" bracketLeft 4591
"]" bracketRight 4592
"." dot 4593
"c" identifier 4594
")" parenRight 4595
"]" bracketRight 4596
"]" bracketRight 4597
"]" bracketRight 4598
"[" bracketLeft 4599
"coalesce" identifier 4600
"(" parenLeft 4608
"$myParam" identifier 4609
"," comma 4617
" " whitespace 4618
"1" integer 4619
")" parenRight 4620
" " whitespace 4621
"!=" neq 4622
" " whitespace 4624
"\"c\"" string 4625
"]" bracketRight 4628
"}" braceRight 4629
"}" braceRight 4630
"}" braceRight 4631
"}" braceRight 4632
"," comma 4633
" " whitespace 4634
"\"g\"" string 4635
":" colon 4638
" " whitespace 4639
"*" * 4640
"[" bracketLeft 4641
"1" integer 4642
"..." dotDotDot 4643
"-" - 4646
"1" integer 4647
"]" bracketRight 4648
" " whitespace 4649
"|" pipe 4650
" " whitespace 4651
"order" identifier 4652
"(" parenLeft 4657
"a" identifier 4658
")" parenRight 4659
"}" braceRight 4660
"}" braceRight 4661
"," comma 4662
" " whitespace 4663
"..." dotDotDot 4664
"," comma 4667
" " whitespace 4668
"!" not 4669
"c" identifier 4670
"[" bracketLeft 4671
"\"g\"" string 4672
"]" bracketRight 4675
" " whitespace 4676
"=>" rocket 4677
" " whitespace 4679
"{" braceLeft 4680
"!" not 4681
"b" identifier 4682
"->" arrow 4683
" " whitespace 4685
"=>" rocket 4686
" " whitespace 4688
"{" braceLeft 4689
"..." dotDotDot 4690
"," comma 4693
" " whitespace 4694
"\"g\"" string 4695
":" colon 4698
" " whitespace 4699
"a" identifier 4700
"}" braceRight 4701
"," comma 4702
" " whitespace 4703
"..." dotDotDot 4704
"," comma 4707
" " whitespace 4708
"\"g\"" string 4709
":" colon 4712
" " whitespace 4713
"*" * 4714
"[" bracketLeft 4715
"-" - 4716
"100" integer 4717
"]" bracketRight 4720
"}" braceRight 4721
"}" braceRight 4722
"}" braceRight 4723
"}" braceRight 4724
"}" braceRight 4725
"," comma 4726
" " whitespace 4727
"..." dotDotDot 4728
"}" braceRight 4731
"," comma 4732
" " whitespace 4733
"..." dotDotDot 4734
"}" braceRight 4737
"}" braceRight 4738
"}" braceRight 4739
"}" braceRight 4740
"}" braceRight 4741
"}" braceRight 4742
"," comma 4743
" " whitespace 4744
"..." dotDotDot 4745
"}" braceRight 4748
"}" braceRight 4749
"," comma 4750
" " whitespace 4751
"\"a\"" string 4752
":" colon 4755
" " whitespace 4756
"*" * 4757
"[" bracketLeft 4758
"2" integer 4759
"]" bracketRight 4760
"}" braceRight 4761
"," comma 4762
" " whitespace 4763
"..." dotDotDot 4764
"," comma 4767
" " whitespace 4768
"-" - 4769
"3e12" float 4770
" " whitespace 4774
">" gt 4775
" " whitespace 4776
"a" identifier 4777
" " whitespace 4778
"=>" rocket 4779
" " whitespace 4781
"{" braceLeft 4782
"\"f\"" string 4783
":" colon 4786
" " whitespace 4787
"*" * 4788
"[" bracketLeft 4789
"(" parenLeft 4790
"b" identifier 4791
" " whitespace 4792
"==" equals 4793
" " whitespace 4795
"true" bool 4796
")" parenRight 4800
"]" bracketRight 4801
"[" bracketLeft 4802
"1000000000000000" integer 4803
"]" bracketRight 4819
"," comma 4820
" " whitespace 4821
"..." dotDotDot 4822
"}" braceRight 4825
"}" braceRight 4826
"}" braceRight 4827
"}" braceRight 4828
"}" braceRight 4829
"," comma 4830
" " whitespace 4831
"\"a\"" string 4832
":" colon 4835
" " whitespace 4836
"[" bracketLeft 4837
"\"g\"" string 4838
" " whitespace 4841
"+" + 4842
" " whitespace 4843
"\"d\"" string 4844
"]" bracketRight 4847
"}" braceRight 4848
"," comma 4849
" " whitespace 4850
"\"d\"" string 4851
":" colon 4854
" " whitespace 4855
"(" parenLeft 4856
"[" bracketLeft 4857
"*" * 4858
" " whitespace 4859
"|" pipe 4860
" " whitespace 4861
"{" braceLeft 4862
"c" identifier 4863
"->" arrow 4864
"." dot 4866
"c" identifier 4867
" " whitespace 4868
"<" lt 4869
" " whitespace 4870
"false" bool 4871
" " whitespace 4876
"=>" rocket 4877
" " whitespace 4879
"{" braceLeft 4880
"\"c\"" string 4881
":" colon 4884
" " whitespace 4885
"@" at 4886
"," comma 4887
" " whitespace 4888
"..." dotDotDot 4889
"," comma 4892
" " whitespace 4893
"c" identifier 4894
"[" bracketLeft 4895
"\"f\"" string 4896
"]" bracketRight 4899
" " whitespace 4900
"=>" rocket 4901
" " whitespace 4903
"{" braceLeft 4904
"!" not 4905
"c" identifier 4906
" " whitespace 4907
"=>" rocket 4908
" " whitespace 4910
"{" braceLeft 4911
"\"c\"" string 4912
":" colon 4915
" " whitespace 4916
"[" bracketLeft 4917
"-" - 4918
"100" integer 4919
" " whitespace 4922
"<=" lte 4923
" " whitespace 4925
"c" identifier 4926
"]" bracketRight 4927
"[" bracketLeft 4928
"-" - 4929
"100" integer 4930
"..." dotDotDot 4933
"1" integer 4936
"]" bracketRight 4937
"," comma 4938
" " whitespace 4939
"..." dotDotDot 4940
"," comma 4943
" " whitespace 4944
"!" not 4945
"c" identifier 4946
"->" arrow 4947
"a" identifier 4949
" " whitespace 4950
"=>" rocket 4951
" " whitespace 4953
"{" braceLeft 4954
"\"d\"" string 4955
":" colon 4958
" " whitespace 4959
"[" bracketLeft 4960
"$myParam" identifier 4961
"," comma 4969
" " whitespace 4970
"[" bracketLeft 4971
"@" at 4972
"." dot 4973
"c" identifier 4974
"," comma 4975
" " whitespace 4976
"[" bracketLeft 4977
"-" - 4978
"1" integer 4979
" " whitespace 4980
"%" % 4981
" " whitespace 4982
"1" integer 4983
"]" bracketRight 4984
"[" bracketLeft 4985
"(" parenLeft 4986
"b" identifier 4987
"->" arrow 4988
"a" identifier 4990
" " whitespace 4991
"||" or 4992
" " whitespace 4994
"true" bool 4995
" " whitespace 4999
"<" lt 5000
" " whitespace 5001
"c" identifier 5002
")" parenRight 5003
"]" bracketRight 5004
" " whitespace 5005
"|" pipe 5006
" " whitespace 5007
"order" identifier 5008
"(" parenLeft 5013
"c" identifier 5014
")" parenRight 5015
"," comma 5016
" " whitespace 5017
"c" identifier 5018
"]" bracketRight 5019
"[" bracketLeft 5020
"null" null 5021
" " whitespace 5025
"==" equals 5026
" " whitespace 5028
"a" identifier 5029
"]" bracketRight 5030
" " whitespace 5031
"|" pipe 5032
" " whitespace 5033
"{" braceLeft 5034
"\"d\"" string 5035
":" colon 5038
" " whitespace 5039
"[" bracketLeft 5040
"]" bracketRight 5041
"[" bracketLeft 5042
"1" integer 5043
"]" bracketRight 5044
"}" braceRight 5045
"]" bracketRight 5046
"}" braceRight 5047
"}" braceRight 5048
"," comma 5049
" " whitespace 5050
"..." dotDotDot 5051
"}" braceRight 5054
"}" braceRight 5055
"," comma 5056
" " whitespace 5057
"..." dotDotDot 5058
"}" braceRight 5061
"," comma 5062
" " whitespace 5063
"[" bracketLeft 5064
"(" parenLeft 5065
"[" bracketLeft 5066
"a" identifier 5067
"," comma 5068
" " whitespace 5069
"\"c\"" string 5070
" " whitespace 5073
"+" + 5074
" " whitespace 5075
"\"g\"" string 5076
"]" bracketRight 5079
"[" bracketLeft 5080
"!" not 5081
"(" parenLeft 5082
"a" identifier 5083
"[" bracketLeft 5084
"]" bracketRight 5085
")" parenRight 5086
"]" bracketRight 5087
"[" bracketLeft 5088
"(" parenLeft 5089
"c" identifier 5090
"[" bracketLeft 5091
"]" bracketRight 5092
"." dot 5093
"c" identifier 5094
" " whitespace 5095
"||" or 5096
" " whitespace 5098
"b" identifier 5099
"[" bracketLeft 5100
"]" bracketRight 5101
" " whitespace 5102
"<" lt 5103
" " whitespace 5104
"\"d\"" string 5105
")" parenRight 5108
"]" bracketRight 5109
")" parenRight 5110
"]" bracketRight 5111
"[" bracketLeft 5112
"(" parenLeft 5113
"select" identifier 5114
"(" parenLeft 5120
"!" not 5121
"(" parenLeft 5122
"b" identifier 5123
"->" arrow 5124
"." dot 5126
"b" identifier 5127
" " whitespace 5128
"==" equals 5129
" " whitespace 5131
"-" - 5132
"100" integer 5133
")" parenRight 5136
" " whitespace 5137
"=>" rocket 5138
" " whitespace 5140
"[" bracketLeft 5141
"*" * 5142
"[" bracketLeft 5143
"-" - 5144
"1" integer 5145
"]" bracketRight 5146
"," comma 5147
" " whitespace 5148
"..." dotDotDot 5149
"[" bracketLeft 5152
"]" bracketRight 5153
"]" bracketRight 5154
")" parenRight 5155
" " whitespace 5156
"=>" rocket 5157
" " whitespace 5159
"1" integer 5160
" " whitespace 5161
"&&" and 5162
" " whitespace 5164
"\"b\"" string 5165
" " whitespace 5168
"<" lt 5169
" " whitespace 5170
"c" identifier 5171
")" parenRight 5172
"]" bracketRight 5173
"]" bracketRight 5174
")" parenRight 5175
"}" braceRight 5176
"," comma 5177
" " whitespace 5178
"null" null 5179
" " whitespace 5183
"<=" lte 5184
" " whitespace 5186
"b" identifier 5187
")" parenRight 5188
"" eof 5189
