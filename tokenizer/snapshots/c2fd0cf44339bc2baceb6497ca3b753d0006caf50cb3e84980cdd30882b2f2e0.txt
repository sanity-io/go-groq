//groq:version=0.x.x
//groq:param:myParam="abc"

// The following query exercises all parser-related features for GROQ 2 plus experimental features.

coalesce({count($myParam) > "d" => {c["e"] => {..., null == c => {count([(!b-> || !c.c), ^.^.c->][(true > c && false <= c)][!(b->)][1000000000000000]) <= "g" => {..., b->a => {b.a => {"e": b, ...}, c-> => {"g": count(* | order(a)), "b": @}}}, !a => {..., "f": {!b->.a => {select(@.b => * | {..., "f": *[(!a[] || "f" == b)][(pt::text(c) => 2 && select([!(-1 != c)] => ([[[], 1 % -3e12, 2][!b[].b][-100..-100], (null != a || a.c != 100)][(a->c)] | order(b))) < 2)]}) != 100 => {"a": $myParam, b[] < 3e-12 => {coalesce([*{c["d"] < true => {false > c => {a => {..., "f": *[null <= a]}}, ..., b->b < "d" => {"d": -100 + 3e12 | order(b), "c": [b | order(a) | order(b)]}}, ...}, ...[(* | {"f": *[!(!b)][!a->a][c->c == 100], ..., "a": c}), @.b]][(-3e-12 > c && count([*{"b": ({pt::text(c) != 3e12 => {"a": [b, [][(!c->c || null < a)][(b[].b > true || b[].b)][1..1], -3e12 + -1][100], true == a => {!a => {..., "b": (b | order(a) | order(b))}, b[].c => {..., count(*[b->][a[].c <= false][!(select(@.a => $myParam) != -100)] | {c["g"] => {..., "d": [*[2]][(b-> || pt::text(a) < -1.1)][!(!a[].a)] | {..., "g": "d" + "c"}}, ...}) < 3e-12 => {"f": "f" + "f"}}}}, ...}), !c-> => {"f": [(1.1 == b && !c), 1.1 + -1, ^.^.a[].b][1000000000000000..100], ..., !a.c => {"a": *[!b[].a][(select([[*{"f": [(count(*[b[] < -1.1][(b-> => false && pt::text(c) > true)][(a[].c <= null || select("a" == c => b) < null)]) < "g" && coalesce(-3e-12 * 1.1, ^.^.^.c->b) == true), [][!(c <= "d")][!a->c][(-100 => b)][(coalesce((*[a][a]{a => {"a": a}, ..., a => {"a": a}}), (a->a && b.c)) < "g" && c->.b)][b <= 3e-12][(b->a && !c["b"])][-1], * | {-1.1 <= c => {"c": * | {..., pt::text(a) != 3e-12 => {null == a => {"a": a}}} | order(c), ...}, ..., "f": $myParam}][false < b][(!a.a || a->.a)][(!a.a)][1..1], ..., count(-100 / 1.1) > -3e12 => {"d": b, ..., c[].a == 3e-12 => {"g": coalesce(coalesce(b->, count(^.a->)), null), "f": 1.1 * 3e12}}}, 1000000000000000 - 3e-12][(select("a" + "a" => ^.^.^.b->) != 2 || !a->b)][(c->c || b < 3.141592653589793)] | {..., "c": ^.^.a->c}, ...[a, 3.141592653589793 / -1 | order(a), @.b]][(count(*[1...1]) <= -3e-12 || -1 > c)][!(b.c == 3e12)][(true > c || coalesce(*[1000000000000000], ^.^.^.c[]) != null)] => *{"f": (1 % -1.1)}) < 1000000000000000 && count("b" + "d") <= 2)], ..., "b": [*[c->.b], [[[*[1000000000000000]][(!c-> || !c.b)][(b > -3e12 && !c->)], ...[]]][!("a" <= a)][-100..100]][(!b->b && a->.b => null)]}}}, (coalesce($myParam, $myParam))][(!a["b"] && count(pt::text(b)) != -1)][null < c][(!b->b && null < a)][(b => 3.141592653589793 || c[])][(true <= b || "g" == b)][(count("a" + "c") > null)][-100] | order(b)) > 1)] | {"e": $myParam}, coalesce([[1000000000000000 % 1.1, ...[$myParam]], 1, (count(pt::text(a)))][100], @)) => 3e12 => {b[] > 3e12 => {..., "g": 3.141592653589793 + 3.141592653589793}, b-> => {..., count(*{a->.a <= -1 => {"d": (c["e"] == 3e12), ..., false == b => {"e": count(^.b->.c), ..., b[].c => {"f": -100 - -3e-12, a-> => {"f": "f" + "d", c[].c => {b["a"] <= null => {..., a.b => {c->b => {"e": select(^.^.^.c-> => (-1 / -3e12)), ..., pt::text(a) <= 3e-12 => {false == a => {!c[].b => {a["a"] < false => {b["b"] => {"b": [$myParam | order(c), ("a" + "e" | order(a))][-100...1]}, ...}, ...}, ..., c[].b => {"f": (*[1000000000000000]), ..., "b": *}}}}, ...}}}}}}}}) != true => {"f": select(*[100] => c | order(b)), ..., !c.a => {null => c => {!b.b => {"e": a, "d": *[(select("d" + "e" => (c)) <= false || coalesce(*[(b->a)], *) < false)][(3.141592653589793 < c)][100]}}, b-> => {null > b => {b.a < 100 => {b.a => {"a": ^.c, !c->a => {-1.1 != b => {..., a->b => {1 != a => {b["e"] != 1.1 => {c[].b <= 3.141592653589793 => {..., pt::text(b) < true => {"a": {c[] => {"g": *, ..., "d": [count(b[]), ...[@, -1.1 - -1, pt::text(c)]][1]}}, count(@) > 1000000000000000 => {select(select(^.c->b => @.a) => @) <= null => {..., "d": [{!a->c => {select(!(c[]) => ^.a) > 1 => {"c": *[(count(*[!c[]][(!a[] || !a.b)]) == null)]{..., !c[] => {pt::text(c) == null => {..., "e": @.c}, ...}}}, ...}}, ...[*[!("a" != a)][(3.141592653589793 != c || count([[2 + 3.141592653589793], (*[(a->b || b["b"] => "b")][!(select(a => (count(a) => true && count(!(!b->a)) != null)) <= false)]) | order(b), "f" + "e"]{"b": $myParam, ..., "e": {..., "d": [a, ...[$myParam]][-100]} | order(c)}) <= "c")], ...[(a), select($myParam => *{..., "b": []}), (a-> == true && c[].c)]]][coalesce($myParam, 1) != "c"]}}}}, "g": *[1...-1] | order(a)}}, ..., !c["g"] => {!b-> => {..., "g": a}, ..., "g": *[-100]}}}}}, ...}, ...}}}}}}, ...}}, "a": *[2]}, ..., -3e12 > a => {"f": *[(b == true)][1000000000000000], ...}}}}}, "a": ["g" + "d"]}, "d": ([* | {c->.c < false => {"c": @, ..., c["f"] => {!c => {"c": [-100 <= c][-100...1], ..., !c->a => {"d": [$myParam, [@.c, [-1 % 1][(b->a || true < c)] | order(c), c][null == a] | {"d": [][1]}]}}, ...}}, ...}, [([a, "c" + "g"][!(a[])][(c[].c || b[] < "d")])][(select(!(b->.b == -100) => [*[-1], ...[]]) => 1 && "b" < c)]])}, null <= b)
----
"\n" whitespace 48
"\n" whitespace 149
"coalesce" identifier 150
"(" parenLeft 158
"{" braceLeft 159
"count" identifier 160
"(" parenLeft 165
"$myParam" identifier 166
")" parenRight 174
" " whitespace 175
">" gt 176
" " whitespace 177
"\"d\"" string 178
" " whitespace 181
"=>" rocket 182
" " whitespace 184
"{" braceLeft 185
"c" identifier 186
"[" bracketLeft 187
"\"e\"" string 188
"]" bracketRight 191
" " whitespace 192
"=>" rocket 193
" " whitespace 195
"{" braceLeft 196
"..." dotDotDot 197
"," comma 200
" " whitespace 201
"null" null 202
" " whitespace 206
"==" equals 207
" " whitespace 209
"c" identifier 210
" " whitespace 211
"=>" rocket 212
" " whitespace 214
"{" braceLeft 215
"count" identifier 216
"(" parenLeft 221
"[" bracketLeft 222
"(" parenLeft 223
"!" not 224
"b" identifier 225
"->" arrow 226
" " whitespace 228
"||" or 229
" " whitespace 231
"!" not 232
"c" identifier 233
"." dot 234
"c" identifier 235
")" parenRight 236
"," comma 237
" " whitespace 238
"^" hat 239
"." dot 240
"^" hat 241
"." dot 242
"c" identifier 243
"->" arrow 244
"]" bracketRight 246
"[" bracketLeft 247
"(" parenLeft 248
"true" bool 249
" " whitespace 253
">" gt 254
" " whitespace 255
"c" identifier 256
" " whitespace 257
"&&" and 258
" " whitespace 260
"false" bool 261
" " whitespace 266
"<=" lte 267
" " whitespace 269
"c" identifier 270
")" parenRight 271
"]" bracketRight 272
"[" bracketLeft 273
"!" not 274
"(" parenLeft 275
"b" identifier 276
"->" arrow 277
")" parenRight 279
"]" bracketRight 280
"[" bracketLeft 281
"1000000000000000" integer 282
"]" bracketRight 298
")" parenRight 299
" " whitespace 300
"<=" lte 301
" " whitespace 303
"\"g\"" string 304
" " whitespace 307
"=>" rocket 308
" " whitespace 310
"{" braceLeft 311
"..." dotDotDot 312
"," comma 315
" " whitespace 316
"b" identifier 317
"->" arrow 318
"a" identifier 320
" " whitespace 321
"=>" rocket 322
" " whitespace 324
"{" braceLeft 325
"b" identifier 326
"." dot 327
"a" identifier 328
" " whitespace 329
"=>" rocket 330
" " whitespace 332
"{" braceLeft 333
"\"e\"" string 334
":" colon 337
" " whitespace 338
"b" identifier 339
"," comma 340
" " whitespace 341
"..." dotDotDot 342
"}" braceRight 345
"," comma 346
" " whitespace 347
"c" identifier 348
"->" arrow 349
" " whitespace 351
"=>" rocket 352
" " whitespace 354
"{" braceLeft 355
"\"g\"" string 356
":" colon 359
" " whitespace 360
"count" identifier 361
"(" parenLeft 366
"*" * 367
" " whitespace 368
"|" pipe 369
" " whitespace 370
"order" identifier 371
"(" parenLeft 376
"a" identifier 377
")" parenRight 378
")" parenRight 379
"," comma 380
" " whitespace 381
"\"b\"" string 382
":" colon 385
" " whitespace 386
"@" at 387
"}" braceRight 388
"}" braceRight 389
"}" braceRight 390
"," comma 391
" " whitespace 392
"!" not 393
"a" identifier 394
" " whitespace 395
"=>" rocket 396
" " whitespace 398
"{" braceLeft 399
"..." dotDotDot 400
"," comma 403
" " whitespace 404
"\"f\"" string 405
":" colon 408
" " whitespace 409
"{" braceLeft 410
"!" not 411
"b" identifier 412
"->" arrow 413
"." dot 415
"a" identifier 416
" " whitespace 417
"=>" rocket 418
" " whitespace 420
"{" braceLeft 421
"select" identifier 422
"(" parenLeft 428
"@" at 429
"." dot 430
"b" identifier 431
" " whitespace 432
"=>" rocket 433
" " whitespace 435
"*" * 436
" " whitespace 437
"|" pipe 438
" " whitespace 439
"{" braceLeft 440
"..." dotDotDot 441
"," comma 444
" " whitespace 445
"\"f\"" string 446
":" colon 449
" " whitespace 450
"*" * 451
"[" bracketLeft 452
"(" parenLeft 453
"!" not 454
"a" identifier 455
"[" bracketLeft 456
"]" bracketRight 457
" " whitespace 458
"||" or 459
" " whitespace 461
"\"f\"" string 462
" " whitespace 465
"==" equals 466
" " whitespace 468
"b" identifier 469
")" parenRight 470
"]" bracketRight 471
"[" bracketLeft 472
"(" parenLeft 473
"pt" identifier 474
"::" doubleColon 476
"text" identifier 478
"(" parenLeft 482
"c" identifier 483
")" parenRight 484
" " whitespace 485
"=>" rocket 486
" " whitespace 488
"2" integer 489
" " whitespace 490
"&&" and 491
" " whitespace 493
"select" identifier 494
"(" parenLeft 500
"[" bracketLeft 501
"!" not 502
"(" parenLeft 503
"-" - 504
"1" integer 505
" " whitespace 506
"!=" neq 507
" " whitespace 509
"c" identifier 510
")" parenRight 511
"]" bracketRight 512
" " whitespace 513
"=>" rocket 514
" " whitespace 516
"(" parenLeft 517
"[" bracketLeft 518
"[" bracketLeft 519
"[" bracketLeft 520
"]" bracketRight 521
"," comma 522
" " whitespace 523
"1" integer 524
" " whitespace 525
"%" % 526
" " whitespace 527
"-" - 528
"3e12" float 529
"," comma 533
" " whitespace 534
"2" integer 535
"]" bracketRight 536
"[" bracketLeft 537
"!" not 538
"b" identifier 539
"[" bracketLeft 540
"]" bracketRight 541
"." dot 542
"b" identifier 543
"]" bracketRight 544
"[" bracketLeft 545
"-" - 546
"100" integer 547
".." dotDot 550
"-" - 552
"100" integer 553
"]" bracketRight 556
"," comma 557
" " whitespace 558
"(" parenLeft 559
"null" null 560
" " whitespace 564
"!=" neq 565
" " whitespace 567
"a" identifier 568
" " whitespace 569
"||" or 570
" " whitespace 572
"a" identifier 573
"." dot 574
"c" identifier 575
" " whitespace 576
"!=" neq 577
" " whitespace 579
"100" integer 580
")" parenRight 583
"]" bracketRight 584
"[" bracketLeft 585
"(" parenLeft 586
"a" identifier 587
"->" arrow 588
"c" identifier 590
")" parenRight 591
"]" bracketRight 592
" " whitespace 593
"|" pipe 594
" " whitespace 595
"order" identifier 596
"(" parenLeft 601
"b" identifier 602
")" parenRight 603
")" parenRight 604
")" parenRight 605
" " whitespace 606
"<" lt 607
" " whitespace 608
"2" integer 609
")" parenRight 610
"]" bracketRight 611
"}" braceRight 612
")" parenRight 613
" " whitespace 614
"!=" neq 615
" " whitespace 617
"100" integer 618
" " whitespace 621
"=>" rocket 622
" " whitespace 624
"{" braceLeft 625
"\"a\"" string 626
":" colon 629
" " whitespace 630
"$myParam" identifier 631
"," comma 639
" " whitespace 640
"b" identifier 641
"[" bracketLeft 642
"]" bracketRight 643
" " whitespace 644
"<" lt 645
" " whitespace 646
"3e-12" float 647
" " whitespace 652
"=>" rocket 653
" " whitespace 655
"{" braceLeft 656
"coalesce" identifier 657
"(" parenLeft 665
"[" bracketLeft 666
"*" * 667
"{" braceLeft 668
"c" identifier 669
"[" bracketLeft 670
"\"d\"" string 671
"]" bracketRight 674
" " whitespace 675
"<" lt 676
" " whitespace 677
"true" bool 678
" " whitespace 682
"=>" rocket 683
" " whitespace 685
"{" braceLeft 686
"false" bool 687
" " whitespace 692
">" gt 693
" " whitespace 694
"c" identifier 695
" " whitespace 696
"=>" rocket 697
" " whitespace 699
"{" braceLeft 700
"a" identifier 701
" " whitespace 702
"=>" rocket 703
" " whitespace 705
"{" braceLeft 706
"..." dotDotDot 707
"," comma 710
" " whitespace 711
"\"f\"" string 712
":" colon 715
" " whitespace 716
"*" * 717
"[" bracketLeft 718
"null" null 719
" " whitespace 723
"<=" lte 724
" " whitespace 726
"a" identifier 727
"]" bracketRight 728
"}" braceRight 729
"}" braceRight 730
"," comma 731
" " whitespace 732
"..." dotDotDot 733
"," comma 736
" " whitespace 737
"b" identifier 738
"->" arrow 739
"b" identifier 741
" " whitespace 742
"<" lt 743
" " whitespace 744
"\"d\"" string 745
" " whitespace 748
"=>" rocket 749
" " whitespace 751
"{" braceLeft 752
"\"d\"" string 753
":" colon 756
" " whitespace 757
"-" - 758
"100" integer 759
" " whitespace 762
"+" + 763
" " whitespace 764
"3e12" float 765
" " whitespace 769
"|" pipe 770
" " whitespace 771
"order" identifier 772
"(" parenLeft 777
"b" identifier 778
")" parenRight 779
"," comma 780
" " whitespace 781
"\"c\"" string 782
":" colon 785
" " whitespace 786
"[" bracketLeft 787
"b" identifier 788
" " whitespace 789
"|" pipe 790
" " whitespace 791
"order" identifier 792
"(" parenLeft 797
"a" identifier 798
")" parenRight 799
" " whitespace 800
"|" pipe 801
" " whitespace 802
"order" identifier 803
"(" parenLeft 808
"b" identifier 809
")" parenRight 810
"]" bracketRight 811
"}" braceRight 812
"}" braceRight 813
"," comma 814
" " whitespace 815
"..." dotDotDot 816
"}" braceRight 819
"," comma 820
" " whitespace 821
"..." dotDotDot 822
"[" bracketLeft 825
"(" parenLeft 826
"*" * 827
" " whitespace 828
"|" pipe 829
" " whitespace 830
"{" braceLeft 831
"\"f\"" string 832
":" colon 835
" " whitespace 836
"*" * 837
"[" bracketLeft 838
"!" not 839
"(" parenLeft 840
"!" not 841
"b" identifier 842
")" parenRight 843
"]" bracketRight 844
"[" bracketLeft 845
"!" not 846
"a" identifier 847
"->" arrow 848
"a" identifier 850
"]" bracketRight 851
"[" bracketLeft 852
"c" identifier 853
"->" arrow 854
"c" identifier 856
" " whitespace 857
"==" equals 858
" " whitespace 860
"100" integer 861
"]" bracketRight 864
"," comma 865
" " whitespace 866
"..." dotDotDot 867
"," comma 870
" " whitespace 871
"\"a\"" string 872
":" colon 875
" " whitespace 876
"c" identifier 877
"}" braceRight 878
")" parenRight 879
"," comma 880
" " whitespace 881
"@" at 882
"." dot 883
"b" identifier 884
"]" bracketRight 885
"]" bracketRight 886
"[" bracketLeft 887
"(" parenLeft 888
"-" - 889
"3e-12" float 890
" " whitespace 895
">" gt 896
" " whitespace 897
"c" identifier 898
" " whitespace 899
"&&" and 900
" " whitespace 902
"count" identifier 903
"(" parenLeft 908
"[" bracketLeft 909
"*" * 910
"{" braceLeft 911
"\"b\"" string 912
":" colon 915
" " whitespace 916
"(" parenLeft 917
"{" braceLeft 918
"pt" identifier 919
"::" doubleColon 921
"text" identifier 923
"(" parenLeft 927
"c" identifier 928
")" parenRight 929
" " whitespace 930
"!=" neq 931
" " whitespace 933
"3e12" float 934
" " whitespace 938
"=>" rocket 939
" " whitespace 941
"{" braceLeft 942
"\"a\"" string 943
":" colon 946
" " whitespace 947
"[" bracketLeft 948
"b" identifier 949
"," comma 950
" " whitespace 951
"[" bracketLeft 952
"]" bracketRight 953
"[" bracketLeft 954
"(" parenLeft 955
"!" not 956
"c" identifier 957
"->" arrow 958
"c" identifier 960
" " whitespace 961
"||" or 962
" " whitespace 964
"null" null 965
" " whitespace 969
"<" lt 970
" " whitespace 971
"a" identifier 972
")" parenRight 973
"]" bracketRight 974
"[" bracketLeft 975
"(" parenLeft 976
"b" identifier 977
"[" bracketLeft 978
"]" bracketRight 979
"." dot 980
"b" identifier 981
" " whitespace 982
">" gt 983
" " whitespace 984
"true" bool 985
" " whitespace 989
"||" or 990
" " whitespace 992
"b" identifier 993
"[" bracketLeft 994
"]" bracketRight 995
"." dot 996
"b" identifier 997
")" parenRight 998
"]" bracketRight 999
"[" bracketLeft 1000
"1" integer 1001
".." dotDot 1002
"1" integer 1004
"]" bracketRight 1005
"," comma 1006
" " whitespace 1007
"-" - 1008
"3e12" float 1009
" " whitespace 1013
"+" + 1014
" " whitespace 1015
"-" - 1016
"1" integer 1017
"]" bracketRight 1018
"[" bracketLeft 1019
"100" integer 1020
"]" bracketRight 1023
"," comma 1024
" " whitespace 1025
"true" bool 1026
" " whitespace 1030
"==" equals 1031
" " whitespace 1033
"a" identifier 1034
" " whitespace 1035
"=>" rocket 1036
" " whitespace 1038
"{" braceLeft 1039
"!" not 1040
"a" identifier 1041
" " whitespace 1042
"=>" rocket 1043
" " whitespace 1045
"{" braceLeft 1046
"..." dotDotDot 1047
"," comma 1050
" " whitespace 1051
"\"b\"" string 1052
":" colon 1055
" " whitespace 1056
"(" parenLeft 1057
"b" identifier 1058
" " whitespace 1059
"|" pipe 1060
" " whitespace 1061
"order" identifier 1062
"(" parenLeft 1067
"a" identifier 1068
")" parenRight 1069
" " whitespace 1070
"|" pipe 1071
" " whitespace 1072
"order" identifier 1073
"(" parenLeft 1078
"b" identifier 1079
")" parenRight 1080
")" parenRight 1081
"}" braceRight 1082
"," comma 1083
" " whitespace 1084
"b" identifier 1085
"[" bracketLeft 1086
"]" bracketRight 1087
"." dot 1088
"c" identifier 1089
" " whitespace 1090
"=>" rocket 1091
" " whitespace 1093
"{" braceLeft 1094
"..." dotDotDot 1095
"," comma 1098
" " whitespace 1099
"count" identifier 1100
"(" parenLeft 1105
"*" * 1106
"[" bracketLeft 1107
"b" identifier 1108
"->" arrow 1109
"]" bracketRight 1111
"[" bracketLeft 1112
"a" identifier 1113
"[" bracketLeft 1114
"]" bracketRight 1115
"." dot 1116
"c" identifier 1117
" " whitespace 1118
"<=" lte 1119
" " whitespace 1121
"false" bool 1122
"]" bracketRight 1127
"[" bracketLeft 1128
"!" not 1129
"(" parenLeft 1130
"select" identifier 1131
"(" parenLeft 1137
"@" at 1138
"." dot 1139
"a" identifier 1140
" " whitespace 1141
"=>" rocket 1142
" " whitespace 1144
"$myParam" identifier 1145
")" parenRight 1153
" " whitespace 1154
"!=" neq 1155
" " whitespace 1157
"-" - 1158
"100" integer 1159
")" parenRight 1162
"]" bracketRight 1163
" " whitespace 1164
"|" pipe 1165
" " whitespace 1166
"{" braceLeft 1167
"c" identifier 1168
"[" bracketLeft 1169
"\"g\"" string 1170
"]" bracketRight 1173
" " whitespace 1174
"=>" rocket 1175
" " whitespace 1177
"{" braceLeft 1178
"..." dotDotDot 1179
"," comma 1182
" " whitespace 1183
"\"d\"" string 1184
":" colon 1187
" " whitespace 1188
"[" bracketLeft 1189
"*" * 1190
"[" bracketLeft 1191
"2" integer 1192
"]" bracketRight 1193
"]" bracketRight 1194
"[" bracketLeft 1195
"(" parenLeft 1196
"b" identifier 1197
"->" arrow 1198
" " whitespace 1200
"||" or 1201
" " whitespace 1203
"pt" identifier 1204
"::" doubleColon 1206
"text" identifier 1208
"(" parenLeft 1212
"a" identifier 1213
")" parenRight 1214
" " whitespace 1215
"<" lt 1216
" " whitespace 1217
"-" - 1218
"1.1" float 1219
")" parenRight 1222
"]" bracketRight 1223
"[" bracketLeft 1224
"!" not 1225
"(" parenLeft 1226
"!" not 1227
"a" identifier 1228
"[" bracketLeft 1229
"]" bracketRight 1230
"." dot 1231
"a" identifier 1232
")" parenRight 1233
"]" bracketRight 1234
" " whitespace 1235
"|" pipe 1236
" " whitespace 1237
"{" braceLeft 1238
"..." dotDotDot 1239
"," comma 1242
" " whitespace 1243
"\"g\"" string 1244
":" colon 1247
" " whitespace 1248
"\"d\"" string 1249
" " whitespace 1252
"+" + 1253
" " whitespace 1254
"\"c\"" string 1255
"}" braceRight 1258
"}" braceRight 1259
"," comma 1260
" " whitespace 1261
"..." dotDotDot 1262
"}" braceRight 1265
")" parenRight 1266
" " whitespace 1267
"<" lt 1268
" " whitespace 1269
"3e-12" float 1270
" " whitespace 1275
"=>" rocket 1276
" " whitespace 1278
"{" braceLeft 1279
"\"f\"" string 1280
":" colon 1283
" " whitespace 1284
"\"f\"" string 1285
" " whitespace 1288
"+" + 1289
" " whitespace 1290
"\"f\"" string 1291
"}" braceRight 1294
"}" braceRight 1295
"}" braceRight 1296
"}" braceRight 1297
"," comma 1298
" " whitespace 1299
"..." dotDotDot 1300
"}" braceRight 1303
")" parenRight 1304
"," comma 1305
" " whitespace 1306
"!" not 1307
"c" identifier 1308
"->" arrow 1309
" " whitespace 1311
"=>" rocket 1312
" " whitespace 1314
"{" braceLeft 1315
"\"f\"" string 1316
":" colon 1319
" " whitespace 1320
"[" bracketLeft 1321
"(" parenLeft 1322
"1.1" float 1323
" " whitespace 1326
"==" equals 1327
" " whitespace 1329
"b" identifier 1330
" " whitespace 1331
"&&" and 1332
" " whitespace 1334
"!" not 1335
"c" identifier 1336
")" parenRight 1337
"," comma 1338
" " whitespace 1339
"1.1" float 1340
" " whitespace 1343
"+" + 1344
" " whitespace 1345
"-" - 1346
"1" integer 1347
"," comma 1348
" " whitespace 1349
"^" hat 1350
"." dot 1351
"^" hat 1352
"." dot 1353
"a" identifier 1354
"[" bracketLeft 1355
"]" bracketRight 1356
"." dot 1357
"b" identifier 1358
"]" bracketRight 1359
"[" bracketLeft 1360
"1000000000000000" integer 1361
".." dotDot 1377
"100" integer 1379
"]" bracketRight 1382
"," comma 1383
" " whitespace 1384
"..." dotDotDot 1385
"," comma 1388
" " whitespace 1389
"!" not 1390
"a" identifier 1391
"." dot 1392
"c" identifier 1393
" " whitespace 1394
"=>" rocket 1395
" " whitespace 1397
"{" braceLeft 1398
"\"a\"" string 1399
":" colon 1402
" " whitespace 1403
"*" * 1404
"[" bracketLeft 1405
"!" not 1406
"b" identifier 1407
"[" bracketLeft 1408
"]" bracketRight 1409
"." dot 1410
"a" identifier 1411
"]" bracketRight 1412
"[" bracketLeft 1413
"(" parenLeft 1414
"select" identifier 1415
"(" parenLeft 1421
"[" bracketLeft 1422
"[" bracketLeft 1423
"*" * 1424
"{" braceLeft 1425
"\"f\"" string 1426
":" colon 1429
" " whitespace 1430
"[" bracketLeft 1431
"(" parenLeft 1432
"count" identifier 1433
"(" parenLeft 1438
"*" * 1439
"[" bracketLeft 1440
"b" identifier 1441
"[" bracketLeft 1442
"]" bracketRight 1443
" " whitespace 1444
"<" lt 1445
" " whitespace 1446
"-" - 1447
"1.1" float 1448
"]" bracketRight 1451
"[" bracketLeft 1452
"(" parenLeft 1453
"b" identifier 1454
"->" arrow 1455
" " whitespace 1457
"=>" rocket 1458
" " whitespace 1460
"false" bool 1461
" " whitespace 1466
"&&" and 1467
" " whitespace 1469
"pt" identifier 1470
"::" doubleColon 1472
"text" identifier 1474
"(" parenLeft 1478
"c" identifier 1479
")" parenRight 1480
" " whitespace 1481
">" gt 1482
" " whitespace 1483
"true" bool 1484
")" parenRight 1488
"]" bracketRight 1489
"[" bracketLeft 1490
"(" parenLeft 1491
"a" identifier 1492
"[" bracketLeft 1493
"]" bracketRight 1494
"." dot 1495
"c" identifier 1496
" " whitespace 1497
"<=" lte 1498
" " whitespace 1500
"null" null 1501
" " whitespace 1505
"||" or 1506
" " whitespace 1508
"select" identifier 1509
"(" parenLeft 1515
"\"a\"" string 1516
" " whitespace 1519
"==" equals 1520
" " whitespace 1522
"c" identifier 1523
" " whitespace 1524
"=>" rocket 1525
" " whitespace 1527
"b" identifier 1528
")" parenRight 1529
" " whitespace 1530
"<" lt 1531
" " whitespace 1532
"null" null 1533
")" parenRight 1537
"]" bracketRight 1538
")" parenRight 1539
" " whitespace 1540
"<" lt 1541
" " whitespace 1542
"\"g\"" string 1543
" " whitespace 1546
"&&" and 1547
" " whitespace 1549
"coalesce" identifier 1550
"(" parenLeft 1558
"-" - 1559
"3e-12" float 1560
" " whitespace 1565
"*" * 1566
" " whitespace 1567
"1.1" float 1568
"," comma 1571
" " whitespace 1572
"^" hat 1573
"." dot 1574
"^" hat 1575
"." dot 1576
"^" hat 1577
"." dot 1578
"c" identifier 1579
"->" arrow 1580
"b" identifier 1582
")" parenRight 1583
" " whitespace 1584
"==" equals 1585
" " whitespace 1587
"true" bool 1588
")" parenRight 1592
"," comma 1593
" " whitespace 1594
"[" bracketLeft 1595
"]" bracketRight 1596
"[" bracketLeft 1597
"!" not 1598
"(" parenLeft 1599
"c" identifier 1600
" " whitespace 1601
"<=" lte 1602
" " whitespace 1604
"\"d\"" string 1605
")" parenRight 1608
"]" bracketRight 1609
"[" bracketLeft 1610
"!" not 1611
"a" identifier 1612
"->" arrow 1613
"c" identifier 1615
"]" bracketRight 1616
"[" bracketLeft 1617
"(" parenLeft 1618
"-" - 1619
"100" integer 1620
" " whitespace 1623
"=>" rocket 1624
" " whitespace 1626
"b" identifier 1627
")" parenRight 1628
"]" bracketRight 1629
"[" bracketLeft 1630
"(" parenLeft 1631
"coalesce" identifier 1632
"(" parenLeft 1640
"(" parenLeft 1641
"*" * 1642
"[" bracketLeft 1643
"a" identifier 1644
"]" bracketRight 1645
"[" bracketLeft 1646
"a" identifier 1647
"]" bracketRight 1648
"{" braceLeft 1649
"a" identifier 1650
" " whitespace 1651
"=>" rocket 1652
" " whitespace 1654
"{" braceLeft 1655
"\"a\"" string 1656
":" colon 1659
" " whitespace 1660
"a" identifier 1661
"}" braceRight 1662
"," comma 1663
" " whitespace 1664
"..." dotDotDot 1665
"," comma 1668
" " whitespace 1669
"a" identifier 1670
" " whitespace 1671
"=>" rocket 1672
" " whitespace 1674
"{" braceLeft 1675
"\"a\"" string 1676
":" colon 1679
" " whitespace 1680
"a" identifier 1681
"}" braceRight 1682
"}" braceRight 1683
")" parenRight 1684
"," comma 1685
" " whitespace 1686
"(" parenLeft 1687
"a" identifier 1688
"->" arrow 1689
"a" identifier 1691
" " whitespace 1692
"&&" and 1693
" " whitespace 1695
"b" identifier 1696
"." dot 1697
"c" identifier 1698
")" parenRight 1699
")" parenRight 1700
" " whitespace 1701
"<" lt 1702
" " whitespace 1703
"\"g\"" string 1704
" " whitespace 1707
"&&" and 1708
" " whitespace 1710
"c" identifier 1711
"->" arrow 1712
"." dot 1714
"b" identifier 1715
")" parenRight 1716
"]" bracketRight 1717
"[" bracketLeft 1718
"b" identifier 1719
" " whitespace 1720
"<=" lte 1721
" " whitespace 1723
"3e-12" float 1724
"]" bracketRight 1729
"[" bracketLeft 1730
"(" parenLeft 1731
"b" identifier 1732
"->" arrow 1733
"a" identifier 1735
" " whitespace 1736
"&&" and 1737
" " whitespace 1739
"!" not 1740
"c" identifier 1741
"[" bracketLeft 1742
"\"b\"" string 1743
"]" bracketRight 1746
")" parenRight 1747
"]" bracketRight 1748
"[" bracketLeft 1749
"-" - 1750
"1" integer 1751
"]" bracketRight 1752
"," comma 1753
" " whitespace 1754
"*" * 1755
" " whitespace 1756
"|" pipe 1757
" " whitespace 1758
"{" braceLeft 1759
"-" - 1760
"1.1" float 1761
" " whitespace 1764
"<=" lte 1765
" " whitespace 1767
"c" identifier 1768
" " whitespace 1769
"=>" rocket 1770
" " whitespace 1772
"{" braceLeft 1773
"\"c\"" string 1774
":" colon 1777
" " whitespace 1778
"*" * 1779
" " whitespace 1780
"|" pipe 1781
" " whitespace 1782
"{" braceLeft 1783
"..." dotDotDot 1784
"," comma 1787
" " whitespace 1788
"pt" identifier 1789
"::" doubleColon 1791
"text" identifier 1793
"(" parenLeft 1797
"a" identifier 1798
")" parenRight 1799
" " whitespace 1800
"!=" neq 1801
" " whitespace 1803
"3e-12" float 1804
" " whitespace 1809
"=>" rocket 1810
" " whitespace 1812
"{" braceLeft 1813
"null" null 1814
" " whitespace 1818
"==" equals 1819
" " whitespace 1821
"a" identifier 1822
" " whitespace 1823
"=>" rocket 1824
" " whitespace 1826
"{" braceLeft 1827
"\"a\"" string 1828
":" colon 1831
" " whitespace 1832
"a" identifier 1833
"}" braceRight 1834
"}" braceRight 1835
"}" braceRight 1836
" " whitespace 1837
"|" pipe 1838
" " whitespace 1839
"order" identifier 1840
"(" parenLeft 1845
"c" identifier 1846
")" parenRight 1847
"," comma 1848
" " whitespace 1849
"..." dotDotDot 1850
"}" braceRight 1853
"," comma 1854
" " whitespace 1855
"..." dotDotDot 1856
"," comma 1859
" " whitespace 1860
"\"f\"" string 1861
":" colon 1864
" " whitespace 1865
"$myParam" identifier 1866
"}" braceRight 1874
"]" bracketRight 1875
"[" bracketLeft 1876
"false" bool 1877
" " whitespace 1882
"<" lt 1883
" " whitespace 1884
"b" identifier 1885
"]" bracketRight 1886
"[" bracketLeft 1887
"(" parenLeft 1888
"!" not 1889
"a" identifier 1890
"." dot 1891
"a" identifier 1892
" " whitespace 1893
"||" or 1894
" " whitespace 1896
"a" identifier 1897
"->" arrow 1898
"." dot 1900
"a" identifier 1901
")" parenRight 1902
"]" bracketRight 1903
"[" bracketLeft 1904
"(" parenLeft 1905
"!" not 1906
"a" identifier 1907
"." dot 1908
"a" identifier 1909
")" parenRight 1910
"]" bracketRight 1911
"[" bracketLeft 1912
"1" integer 1913
".." dotDot 1914
"1" integer 1916
"]" bracketRight 1917
"," comma 1918
" " whitespace 1919
"..." dotDotDot 1920
"," comma 1923
" " whitespace 1924
"count" identifier 1925
"(" parenLeft 1930
"-" - 1931
"100" integer 1932
" " whitespace 1935
"/" / 1936
" " whitespace 1937
"1.1" float 1938
")" parenRight 1941
" " whitespace 1942
">" gt 1943
" " whitespace 1944
"-" - 1945
"3e12" float 1946
" " whitespace 1950
"=>" rocket 1951
" " whitespace 1953
"{" braceLeft 1954
"\"d\"" string 1955
":" colon 1958
" " whitespace 1959
"b" identifier 1960
"," comma 1961
" " whitespace 1962
"..." dotDotDot 1963
"," comma 1966
" " whitespace 1967
"c" identifier 1968
"[" bracketLeft 1969
"]" bracketRight 1970
"." dot 1971
"a" identifier 1972
" " whitespace 1973
"==" equals 1974
" " whitespace 1976
"3e-12" float 1977
" " whitespace 1982
"=>" rocket 1983
" " whitespace 1985
"{" braceLeft 1986
"\"g\"" string 1987
":" colon 1990
" " whitespace 1991
"coalesce" identifier 1992
"(" parenLeft 2000
"coalesce" identifier 2001
"(" parenLeft 2009
"b" identifier 2010
"->" arrow 2011
"," comma 2013
" " whitespace 2014
"count" identifier 2015
"(" parenLeft 2020
"^" hat 2021
"." dot 2022
"a" identifier 2023
"->" arrow 2024
")" parenRight 2026
")" parenRight 2027
"," comma 2028
" " whitespace 2029
"null" null 2030
")" parenRight 2034
"," comma 2035
" " whitespace 2036
"\"f\"" string 2037
":" colon 2040
" " whitespace 2041
"1.1" float 2042
" " whitespace 2045
"*" * 2046
" " whitespace 2047
"3e12" float 2048
"}" braceRight 2052
"}" braceRight 2053
"}" braceRight 2054
"," comma 2055
" " whitespace 2056
"1000000000000000" integer 2057
" " whitespace 2073
"-" - 2074
" " whitespace 2075
"3e-12" float 2076
"]" bracketRight 2081
"[" bracketLeft 2082
"(" parenLeft 2083
"select" identifier 2084
"(" parenLeft 2090
"\"a\"" string 2091
" " whitespace 2094
"+" + 2095
" " whitespace 2096
"\"a\"" string 2097
" " whitespace 2100
"=>" rocket 2101
" " whitespace 2103
"^" hat 2104
"." dot 2105
"^" hat 2106
"." dot 2107
"^" hat 2108
"." dot 2109
"b" identifier 2110
"->" arrow 2111
")" parenRight 2113
" " whitespace 2114
"!=" neq 2115
" " whitespace 2117
"2" integer 2118
" " whitespace 2119
"||" or 2120
" " whitespace 2122
"!" not 2123
"a" identifier 2124
"->" arrow 2125
"b" identifier 2127
")" parenRight 2128
"]" bracketRight 2129
"[" bracketLeft 2130
"(" parenLeft 2131
"c" identifier 2132
"->" arrow 2133
"c" identifier 2135
" " whitespace 2136
"||" or 2137
" " whitespace 2139
"b" identifier 2140
" " whitespace 2141
"<" lt 2142
" " whitespace 2143
"3.141592653589793" float 2144
")" parenRight 2161
"]" bracketRight 2162
" " whitespace 2163
"|" pipe 2164
" " whitespace 2165
"{" braceLeft 2166
"..." dotDotDot 2167
"," comma 2170
" " whitespace 2171
"\"c\"" string 2172
":" colon 2175
" " whitespace 2176
"^" hat 2177
"." dot 2178
"^" hat 2179
"." dot 2180
"a" identifier 2181
"->" arrow 2182
"c" identifier 2184
"}" braceRight 2185
"," comma 2186
" " whitespace 2187
"..." dotDotDot 2188
"[" bracketLeft 2191
"a" identifier 2192
"," comma 2193
" " whitespace 2194
"3.141592653589793" float 2195
" " whitespace 2212
"/" / 2213
" " whitespace 2214
"-" - 2215
"1" integer 2216
" " whitespace 2217
"|" pipe 2218
" " whitespace 2219
"order" identifier 2220
"(" parenLeft 2225
"a" identifier 2226
")" parenRight 2227
"," comma 2228
" " whitespace 2229
"@" at 2230
"." dot 2231
"b" identifier 2232
"]" bracketRight 2233
"]" bracketRight 2234
"[" bracketLeft 2235
"(" parenLeft 2236
"count" identifier 2237
"(" parenLeft 2242
"*" * 2243
"[" bracketLeft 2244
"1" integer 2245
"..." dotDotDot 2246
"1" integer 2249
"]" bracketRight 2250
")" parenRight 2251
" " whitespace 2252
"<=" lte 2253
" " whitespace 2255
"-" - 2256
"3e-12" float 2257
" " whitespace 2262
"||" or 2263
" " whitespace 2265
"-" - 2266
"1" integer 2267
" " whitespace 2268
">" gt 2269
" " whitespace 2270
"c" identifier 2271
")" parenRight 2272
"]" bracketRight 2273
"[" bracketLeft 2274
"!" not 2275
"(" parenLeft 2276
"b" identifier 2277
"." dot 2278
"c" identifier 2279
" " whitespace 2280
"==" equals 2281
" " whitespace 2283
"3e12" float 2284
")" parenRight 2288
"]" bracketRight 2289
"[" bracketLeft 2290
"(" parenLeft 2291
"true" bool 2292
" " whitespace 2296
">" gt 2297
" " whitespace 2298
"c" identifier 2299
" " whitespace 2300
"||" or 2301
" " whitespace 2303
"coalesce" identifier 2304
"(" parenLeft 2312
"*" * 2313
"[" bracketLeft 2314
"1000000000000000" integer 2315
"]" bracketRight 2331
"," comma 2332
" " whitespace 2333
"^" hat 2334
"." dot 2335
"^" hat 2336
"." dot 2337
"^" hat 2338
"." dot 2339
"c" identifier 2340
"[" bracketLeft 2341
"]" bracketRight 2342
")" parenRight 2343
" " whitespace 2344
"!=" neq 2345
" " whitespace 2347
"null" null 2348
")" parenRight 2352
"]" bracketRight 2353
" " whitespace 2354
"=>" rocket 2355
" " whitespace 2357
"*" * 2358
"{" braceLeft 2359
"\"f\"" string 2360
":" colon 2363
" " whitespace 2364
"(" parenLeft 2365
"1" integer 2366
" " whitespace 2367
"%" % 2368
" " whitespace 2369
"-" - 2370
"1.1" float 2371
")" parenRight 2374
"}" braceRight 2375
")" parenRight 2376
" " whitespace 2377
"<" lt 2378
" " whitespace 2379
"1000000000000000" integer 2380
" " whitespace 2396
"&&" and 2397
" " whitespace 2399
"count" identifier 2400
"(" parenLeft 2405
"\"b\"" string 2406
" " whitespace 2409
"+" + 2410
" " whitespace 2411
"\"d\"" string 2412
")" parenRight 2415
" " whitespace 2416
"<=" lte 2417
" " whitespace 2419
"2" integer 2420
")" parenRight 2421
"]" bracketRight 2422
"," comma 2423
" " whitespace 2424
"..." dotDotDot 2425
"," comma 2428
" " whitespace 2429
"\"b\"" string 2430
":" colon 2433
" " whitespace 2434
"[" bracketLeft 2435
"*" * 2436
"[" bracketLeft 2437
"c" identifier 2438
"->" arrow 2439
"." dot 2441
"b" identifier 2442
"]" bracketRight 2443
"," comma 2444
" " whitespace 2445
"[" bracketLeft 2446
"[" bracketLeft 2447
"[" bracketLeft 2448
"*" * 2449
"[" bracketLeft 2450
"1000000000000000" integer 2451
"]" bracketRight 2467
"]" bracketRight 2468
"[" bracketLeft 2469
"(" parenLeft 2470
"!" not 2471
"c" identifier 2472
"->" arrow 2473
" " whitespace 2475
"||" or 2476
" " whitespace 2478
"!" not 2479
"c" identifier 2480
"." dot 2481
"b" identifier 2482
")" parenRight 2483
"]" bracketRight 2484
"[" bracketLeft 2485
"(" parenLeft 2486
"b" identifier 2487
" " whitespace 2488
">" gt 2489
" " whitespace 2490
"-" - 2491
"3e12" float 2492
" " whitespace 2496
"&&" and 2497
" " whitespace 2499
"!" not 2500
"c" identifier 2501
"->" arrow 2502
")" parenRight 2504
"]" bracketRight 2505
"," comma 2506
" " whitespace 2507
"..." dotDotDot 2508
"[" bracketLeft 2511
"]" bracketRight 2512
"]" bracketRight 2513
"]" bracketRight 2514
"[" bracketLeft 2515
"!" not 2516
"(" parenLeft 2517
"\"a\"" string 2518
" " whitespace 2521
"<=" lte 2522
" " whitespace 2524
"a" identifier 2525
")" parenRight 2526
"]" bracketRight 2527
"[" bracketLeft 2528
"-" - 2529
"100" integer 2530
".." dotDot 2533
"100" integer 2535
"]" bracketRight 2538
"]" bracketRight 2539
"[" bracketLeft 2540
"(" parenLeft 2541
"!" not 2542
"b" identifier 2543
"->" arrow 2544
"b" identifier 2546
" " whitespace 2547
"&&" and 2548
" " whitespace 2550
"a" identifier 2551
"->" arrow 2552
"." dot 2554
"b" identifier 2555
" " whitespace 2556
"=>" rocket 2557
" " whitespace 2559
"null" null 2560
")" parenRight 2564
"]" bracketRight 2565
"}" braceRight 2566
"}" braceRight 2567
"}" braceRight 2568
"," comma 2569
" " whitespace 2570
"(" parenLeft 2571
"coalesce" identifier 2572
"(" parenLeft 2580
"$myParam" identifier 2581
"," comma 2589
" " whitespace 2590
"$myParam" identifier 2591
")" parenRight 2599
")" parenRight 2600
"]" bracketRight 2601
"[" bracketLeft 2602
"(" parenLeft 2603
"!" not 2604
"a" identifier 2605
"[" bracketLeft 2606
"\"b\"" string 2607
"]" bracketRight 2610
" " whitespace 2611
"&&" and 2612
" " whitespace 2614
"count" identifier 2615
"(" parenLeft 2620
"pt" identifier 2621
"::" doubleColon 2623
"text" identifier 2625
"(" parenLeft 2629
"b" identifier 2630
")" parenRight 2631
")" parenRight 2632
" " whitespace 2633
"!=" neq 2634
" " whitespace 2636
"-" - 2637
"1" integer 2638
")" parenRight 2639
"]" bracketRight 2640
"[" bracketLeft 2641
"null" null 2642
" " whitespace 2646
"<" lt 2647
" " whitespace 2648
"c" identifier 2649
"]" bracketRight 2650
"[" bracketLeft 2651
"(" parenLeft 2652
"!" not 2653
"b" identifier 2654
"->" arrow 2655
"b" identifier 2657
" " whitespace 2658
"&&" and 2659
" " whitespace 2661
"null" null 2662
" " whitespace 2666
"<" lt 2667
" " whitespace 2668
"a" identifier 2669
")" parenRight 2670
"]" bracketRight 2671
"[" bracketLeft 2672
"(" parenLeft 2673
"b" identifier 2674
" " whitespace 2675
"=>" rocket 2676
" " whitespace 2678
"3.141592653589793" float 2679
" " whitespace 2696
"||" or 2697
" " whitespace 2699
"c" identifier 2700
"[" bracketLeft 2701
"]" bracketRight 2702
")" parenRight 2703
"]" bracketRight 2704
"[" bracketLeft 2705
"(" parenLeft 2706
"true" bool 2707
" " whitespace 2711
"<=" lte 2712
" " whitespace 2714
"b" identifier 2715
" " whitespace 2716
"||" or 2717
" " whitespace 2719
"\"g\"" string 2720
" " whitespace 2723
"==" equals 2724
" " whitespace 2726
"b" identifier 2727
")" parenRight 2728
"]" bracketRight 2729
"[" bracketLeft 2730
"(" parenLeft 2731
"count" identifier 2732
"(" parenLeft 2737
"\"a\"" string 2738
" " whitespace 2741
"+" + 2742
" " whitespace 2743
"\"c\"" string 2744
")" parenRight 2747
" " whitespace 2748
">" gt 2749
" " whitespace 2750
"null" null 2751
")" parenRight 2755
"]" bracketRight 2756
"[" bracketLeft 2757
"-" - 2758
"100" integer 2759
"]" bracketRight 2762
" " whitespace 2763
"|" pipe 2764
" " whitespace 2765
"order" identifier 2766
"(" parenLeft 2771
"b" identifier 2772
")" parenRight 2773
")" parenRight 2774
" " whitespace 2775
">" gt 2776
" " whitespace 2777
"1" integer 2778
")" parenRight 2779
"]" bracketRight 2780
" " whitespace 2781
"|" pipe 2782
" " whitespace 2783
"{" braceLeft 2784
"\"e\"" string 2785
":" colon 2788
" " whitespace 2789
"$myParam" identifier 2790
"}" braceRight 2798
"," comma 2799
" " whitespace 2800
"coalesce" identifier 2801
"(" parenLeft 2809
"[" bracketLeft 2810
"[" bracketLeft 2811
"1000000000000000" integer 2812
" " whitespace 2828
"%" % 2829
" " whitespace 2830
"1.1" float 2831
"," comma 2834
" " whitespace 2835
"..." dotDotDot 2836
"[" bracketLeft 2839
"$myParam" identifier 2840
"]" bracketRight 2848
"]" bracketRight 2849
"," comma 2850
" " whitespace 2851
"1" integer 2852
"," comma 2853
" " whitespace 2854
"(" parenLeft 2855
"count" identifier 2856
"(" parenLeft 2861
"pt" identifier 2862
"::" doubleColon 2864
"text" identifier 2866
"(" parenLeft 2870
"a" identifier 2871
")" parenRight 2872
")" parenRight 2873
")" parenRight 2874
"]" bracketRight 2875
"[" bracketLeft 2876
"100" integer 2877
"]" bracketRight 2880
"," comma 2881
" " whitespace 2882
"@" at 2883
")" parenRight 2884
")" parenRight 2885
" " whitespace 2886
"=>" rocket 2887
" " whitespace 2889
"3e12" float 2890
" " whitespace 2894
"=>" rocket 2895
" " whitespace 2897
"{" braceLeft 2898
"b" identifier 2899
"[" bracketLeft 2900
"]" bracketRight 2901
" " whitespace 2902
">" gt 2903
" " whitespace 2904
"3e12" float 2905
" " whitespace 2909
"=>" rocket 2910
" " whitespace 2912
"{" braceLeft 2913
"..." dotDotDot 2914
"," comma 2917
" " whitespace 2918
"\"g\"" string 2919
":" colon 2922
" " whitespace 2923
"3.141592653589793" float 2924
" " whitespace 2941
"+" + 2942
" " whitespace 2943
"3.141592653589793" float 2944
"}" braceRight 2961
"," comma 2962
" " whitespace 2963
"b" identifier 2964
"->" arrow 2965
" " whitespace 2967
"=>" rocket 2968
" " whitespace 2970
"{" braceLeft 2971
"..." dotDotDot 2972
"," comma 2975
" " whitespace 2976
"count" identifier 2977
"(" parenLeft 2982
"*" * 2983
"{" braceLeft 2984
"a" identifier 2985
"->" arrow 2986
"." dot 2988
"a" identifier 2989
" " whitespace 2990
"<=" lte 2991
" " whitespace 2993
"-" - 2994
"1" integer 2995
" " whitespace 2996
"=>" rocket 2997
" " whitespace 2999
"{" braceLeft 3000
"\"d\"" string 3001
":" colon 3004
" " whitespace 3005
"(" parenLeft 3006
"c" identifier 3007
"[" bracketLeft 3008
"\"e\"" string 3009
"]" bracketRight 3012
" " whitespace 3013
"==" equals 3014
" " whitespace 3016
"3e12" float 3017
")" parenRight 3021
"," comma 3022
" " whitespace 3023
"..." dotDotDot 3024
"," comma 3027
" " whitespace 3028
"false" bool 3029
" " whitespace 3034
"==" equals 3035
" " whitespace 3037
"b" identifier 3038
" " whitespace 3039
"=>" rocket 3040
" " whitespace 3042
"{" braceLeft 3043
"\"e\"" string 3044
":" colon 3047
" " whitespace 3048
"count" identifier 3049
"(" parenLeft 3054
"^" hat 3055
"." dot 3056
"b" identifier 3057
"->" arrow 3058
"." dot 3060
"c" identifier 3061
")" parenRight 3062
"," comma 3063
" " whitespace 3064
"..." dotDotDot 3065
"," comma 3068
" " whitespace 3069
"b" identifier 3070
"[" bracketLeft 3071
"]" bracketRight 3072
"." dot 3073
"c" identifier 3074
" " whitespace 3075
"=>" rocket 3076
" " whitespace 3078
"{" braceLeft 3079
"\"f\"" string 3080
":" colon 3083
" " whitespace 3084
"-" - 3085
"100" integer 3086
" " whitespace 3089
"-" - 3090
" " whitespace 3091
"-" - 3092
"3e-12" float 3093
"," comma 3098
" " whitespace 3099
"a" identifier 3100
"->" arrow 3101
" " whitespace 3103
"=>" rocket 3104
" " whitespace 3106
"{" braceLeft 3107
"\"f\"" string 3108
":" colon 3111
" " whitespace 3112
"\"f\"" string 3113
" " whitespace 3116
"+" + 3117
" " whitespace 3118
"\"d\"" string 3119
"," comma 3122
" " whitespace 3123
"c" identifier 3124
"[" bracketLeft 3125
"]" bracketRight 3126
"." dot 3127
"c" identifier 3128
" " whitespace 3129
"=>" rocket 3130
" " whitespace 3132
"{" braceLeft 3133
"b" identifier 3134
"[" bracketLeft 3135
"\"a\"" string 3136
"]" bracketRight 3139
" " whitespace 3140
"<=" lte 3141
" " whitespace 3143
"null" null 3144
" " whitespace 3148
"=>" rocket 3149
" " whitespace 3151
"{" braceLeft 3152
"..." dotDotDot 3153
"," comma 3156
" " whitespace 3157
"a" identifier 3158
"." dot 3159
"b" identifier 3160
" " whitespace 3161
"=>" rocket 3162
" " whitespace 3164
"{" braceLeft 3165
"c" identifier 3166
"->" arrow 3167
"b" identifier 3169
" " whitespace 3170
"=>" rocket 3171
" " whitespace 3173
"{" braceLeft 3174
"\"e\"" string 3175
":" colon 3178
" " whitespace 3179
"select" identifier 3180
"(" parenLeft 3186
"^" hat 3187
"." dot 3188
"^" hat 3189
"." dot 3190
"^" hat 3191
"." dot 3192
"c" identifier 3193
"->" arrow 3194
" " whitespace 3196
"=>" rocket 3197
" " whitespace 3199
"(" parenLeft 3200
"-" - 3201
"1" integer 3202
" " whitespace 3203
"/" / 3204
" " whitespace 3205
"-" - 3206
"3e12" float 3207
")" parenRight 3211
")" parenRight 3212
"," comma 3213
" " whitespace 3214
"..." dotDotDot 3215
"," comma 3218
" " whitespace 3219
"pt" identifier 3220
"::" doubleColon 3222
"text" identifier 3224
"(" parenLeft 3228
"a" identifier 3229
")" parenRight 3230
" " whitespace 3231
"<=" lte 3232
" " whitespace 3234
"3e-12" float 3235
" " whitespace 3240
"=>" rocket 3241
" " whitespace 3243
"{" braceLeft 3244
"false" bool 3245
" " whitespace 3250
"==" equals 3251
" " whitespace 3253
"a" identifier 3254
" " whitespace 3255
"=>" rocket 3256
" " whitespace 3258
"{" braceLeft 3259
"!" not 3260
"c" identifier 3261
"[" bracketLeft 3262
"]" bracketRight 3263
"." dot 3264
"b" identifier 3265
" " whitespace 3266
"=>" rocket 3267
" " whitespace 3269
"{" braceLeft 3270
"a" identifier 3271
"[" bracketLeft 3272
"\"a\"" string 3273
"]" bracketRight 3276
" " whitespace 3277
"<" lt 3278
" " whitespace 3279
"false" bool 3280
" " whitespace 3285
"=>" rocket 3286
" " whitespace 3288
"{" braceLeft 3289
"b" identifier 3290
"[" bracketLeft 3291
"\"b\"" string 3292
"]" bracketRight 3295
" " whitespace 3296
"=>" rocket 3297
" " whitespace 3299
"{" braceLeft 3300
"\"b\"" string 3301
":" colon 3304
" " whitespace 3305
"[" bracketLeft 3306
"$myParam" identifier 3307
" " whitespace 3315
"|" pipe 3316
" " whitespace 3317
"order" identifier 3318
"(" parenLeft 3323
"c" identifier 3324
")" parenRight 3325
"," comma 3326
" " whitespace 3327
"(" parenLeft 3328
"\"a\"" string 3329
" " whitespace 3332
"+" + 3333
" " whitespace 3334
"\"e\"" string 3335
" " whitespace 3338
"|" pipe 3339
" " whitespace 3340
"order" identifier 3341
"(" parenLeft 3346
"a" identifier 3347
")" parenRight 3348
")" parenRight 3349
"]" bracketRight 3350
"[" bracketLeft 3351
"-" - 3352
"100" integer 3353
"..." dotDotDot 3356
"1" integer 3359
"]" bracketRight 3360
"}" braceRight 3361
"," comma 3362
" " whitespace 3363
"..." dotDotDot 3364
"}" braceRight 3367
"," comma 3368
" " whitespace 3369
"..." dotDotDot 3370
"}" braceRight 3373
"," comma 3374
" " whitespace 3375
"..." dotDotDot 3376
"," comma 3379
" " whitespace 3380
"c" identifier 3381
"[" bracketLeft 3382
"]" bracketRight 3383
"." dot 3384
"b" identifier 3385
" " whitespace 3386
"=>" rocket 3387
" " whitespace 3389
"{" braceLeft 3390
"\"f\"" string 3391
":" colon 3394
" " whitespace 3395
"(" parenLeft 3396
"*" * 3397
"[" bracketLeft 3398
"1000000000000000" integer 3399
"]" bracketRight 3415
")" parenRight 3416
"," comma 3417
" " whitespace 3418
"..." dotDotDot 3419
"," comma 3422
" " whitespace 3423
"\"b\"" string 3424
":" colon 3427
" " whitespace 3428
"*" * 3429
"}" braceRight 3430
"}" braceRight 3431
"}" braceRight 3432
"}" braceRight 3433
"," comma 3434
" " whitespace 3435
"..." dotDotDot 3436
"}" braceRight 3439
"}" braceRight 3440
"}" braceRight 3441
"}" braceRight 3442
"}" braceRight 3443
"}" braceRight 3444
"}" braceRight 3445
"}" braceRight 3446
")" parenRight 3447
" " whitespace 3448
"!=" neq 3449
" " whitespace 3451
"true" bool 3452
" " whitespace 3456
"=>" rocket 3457
" " whitespace 3459
"{" braceLeft 3460
"\"f\"" string 3461
":" colon 3464
" " whitespace 3465
"select" identifier 3466
"(" parenLeft 3472
"*" * 3473
"[" bracketLeft 3474
"100" integer 3475
"]" bracketRight 3478
" " whitespace 3479
"=>" rocket 3480
" " whitespace 3482
"c" identifier 3483
" " whitespace 3484
"|" pipe 3485
" " whitespace 3486
"order" identifier 3487
"(" parenLeft 3492
"b" identifier 3493
")" parenRight 3494
")" parenRight 3495
"," comma 3496
" " whitespace 3497
"..." dotDotDot 3498
"," comma 3501
" " whitespace 3502
"!" not 3503
"c" identifier 3504
"." dot 3505
"a" identifier 3506
" " whitespace 3507
"=>" rocket 3508
" " whitespace 3510
"{" braceLeft 3511
"null" null 3512
" " whitespace 3516
"=>" rocket 3517
" " whitespace 3519
"c" identifier 3520
" " whitespace 3521
"=>" rocket 3522
" " whitespace 3524
"{" braceLeft 3525
"!" not 3526
"b" identifier 3527
"." dot 3528
"b" identifier 3529
" " whitespace 3530
"=>" rocket 3531
" " whitespace 3533
"{" braceLeft 3534
"\"e\"" string 3535
":" colon 3538
" " whitespace 3539
"a" identifier 3540
"," comma 3541
" " whitespace 3542
"\"d\"" string 3543
":" colon 3546
" " whitespace 3547
"*" * 3548
"[" bracketLeft 3549
"(" parenLeft 3550
"select" identifier 3551
"(" parenLeft 3557
"\"d\"" string 3558
" " whitespace 3561
"+" + 3562
" " whitespace 3563
"\"e\"" string 3564
" " whitespace 3567
"=>" rocket 3568
" " whitespace 3570
"(" parenLeft 3571
"c" identifier 3572
")" parenRight 3573
")" parenRight 3574
" " whitespace 3575
"<=" lte 3576
" " whitespace 3578
"false" bool 3579
" " whitespace 3584
"||" or 3585
" " whitespace 3587
"coalesce" identifier 3588
"(" parenLeft 3596
"*" * 3597
"[" bracketLeft 3598
"(" parenLeft 3599
"b" identifier 3600
"->" arrow 3601
"a" identifier 3603
")" parenRight 3604
"]" bracketRight 3605
"," comma 3606
" " whitespace 3607
"*" * 3608
")" parenRight 3609
" " whitespace 3610
"<" lt 3611
" " whitespace 3612
"false" bool 3613
")" parenRight 3618
"]" bracketRight 3619
"[" bracketLeft 3620
"(" parenLeft 3621
"3.141592653589793" float 3622
" " whitespace 3639
"<" lt 3640
" " whitespace 3641
"c" identifier 3642
")" parenRight 3643
"]" bracketRight 3644
"[" bracketLeft 3645
"100" integer 3646
"]" bracketRight 3649
"}" braceRight 3650
"}" braceRight 3651
"," comma 3652
" " whitespace 3653
"b" identifier 3654
"->" arrow 3655
" " whitespace 3657
"=>" rocket 3658
" " whitespace 3660
"{" braceLeft 3661
"null" null 3662
" " whitespace 3666
">" gt 3667
" " whitespace 3668
"b" identifier 3669
" " whitespace 3670
"=>" rocket 3671
" " whitespace 3673
"{" braceLeft 3674
"b" identifier 3675
"." dot 3676
"a" identifier 3677
" " whitespace 3678
"<" lt 3679
" " whitespace 3680
"100" integer 3681
" " whitespace 3684
"=>" rocket 3685
" " whitespace 3687
"{" braceLeft 3688
"b" identifier 3689
"." dot 3690
"a" identifier 3691
" " whitespace 3692
"=>" rocket 3693
" " whitespace 3695
"{" braceLeft 3696
"\"a\"" string 3697
":" colon 3700
" " whitespace 3701
"^" hat 3702
"." dot 3703
"c" identifier 3704
"," comma 3705
" " whitespace 3706
"!" not 3707
"c" identifier 3708
"->" arrow 3709
"a" identifier 3711
" " whitespace 3712
"=>" rocket 3713
" " whitespace 3715
"{" braceLeft 3716
"-" - 3717
"1.1" float 3718
" " whitespace 3721
"!=" neq 3722
" " whitespace 3724
"b" identifier 3725
" " whitespace 3726
"=>" rocket 3727
" " whitespace 3729
"{" braceLeft 3730
"..." dotDotDot 3731
"," comma 3734
" " whitespace 3735
"a" identifier 3736
"->" arrow 3737
"b" identifier 3739
" " whitespace 3740
"=>" rocket 3741
" " whitespace 3743
"{" braceLeft 3744
"1" integer 3745
" " whitespace 3746
"!=" neq 3747
" " whitespace 3749
"a" identifier 3750
" " whitespace 3751
"=>" rocket 3752
" " whitespace 3754
"{" braceLeft 3755
"b" identifier 3756
"[" bracketLeft 3757
"\"e\"" string 3758
"]" bracketRight 3761
" " whitespace 3762
"!=" neq 3763
" " whitespace 3765
"1.1" float 3766
" " whitespace 3769
"=>" rocket 3770
" " whitespace 3772
"{" braceLeft 3773
"c" identifier 3774
"[" bracketLeft 3775
"]" bracketRight 3776
"." dot 3777
"b" identifier 3778
" " whitespace 3779
"<=" lte 3780
" " whitespace 3782
"3.141592653589793" float 3783
" " whitespace 3800
"=>" rocket 3801
" " whitespace 3803
"{" braceLeft 3804
"..." dotDotDot 3805
"," comma 3808
" " whitespace 3809
"pt" identifier 3810
"::" doubleColon 3812
"text" identifier 3814
"(" parenLeft 3818
"b" identifier 3819
")" parenRight 3820
" " whitespace 3821
"<" lt 3822
" " whitespace 3823
"true" bool 3824
" " whitespace 3828
"=>" rocket 3829
" " whitespace 3831
"{" braceLeft 3832
"\"a\"" string 3833
":" colon 3836
" " whitespace 3837
"{" braceLeft 3838
"c" identifier 3839
"[" bracketLeft 3840
"]" bracketRight 3841
" " whitespace 3842
"=>" rocket 3843
" " whitespace 3845
"{" braceLeft 3846
"\"g\"" string 3847
":" colon 3850
" " whitespace 3851
"*" * 3852
"," comma 3853
" " whitespace 3854
"..." dotDotDot 3855
"," comma 3858
" " whitespace 3859
"\"d\"" string 3860
":" colon 3863
" " whitespace 3864
"[" bracketLeft 3865
"count" identifier 3866
"(" parenLeft 3871
"b" identifier 3872
"[" bracketLeft 3873
"]" bracketRight 3874
")" parenRight 3875
"," comma 3876
" " whitespace 3877
"..." dotDotDot 3878
"[" bracketLeft 3881
"@" at 3882
"," comma 3883
" " whitespace 3884
"-" - 3885
"1.1" float 3886
" " whitespace 3889
"-" - 3890
" " whitespace 3891
"-" - 3892
"1" integer 3893
"," comma 3894
" " whitespace 3895
"pt" identifier 3896
"::" doubleColon 3898
"text" identifier 3900
"(" parenLeft 3904
"c" identifier 3905
")" parenRight 3906
"]" bracketRight 3907
"]" bracketRight 3908
"[" bracketLeft 3909
"1" integer 3910
"]" bracketRight 3911
"}" braceRight 3912
"}" braceRight 3913
"," comma 3914
" " whitespace 3915
"count" identifier 3916
"(" parenLeft 3921
"@" at 3922
")" parenRight 3923
" " whitespace 3924
">" gt 3925
" " whitespace 3926
"1000000000000000" integer 3927
" " whitespace 3943
"=>" rocket 3944
" " whitespace 3946
"{" braceLeft 3947
"select" identifier 3948
"(" parenLeft 3954
"select" identifier 3955
"(" parenLeft 3961
"^" hat 3962
"." dot 3963
"c" identifier 3964
"->" arrow 3965
"b" identifier 3967
" " whitespace 3968
"=>" rocket 3969
" " whitespace 3971
"@" at 3972
"." dot 3973
"a" identifier 3974
")" parenRight 3975
" " whitespace 3976
"=>" rocket 3977
" " whitespace 3979
"@" at 3980
")" parenRight 3981
" " whitespace 3982
"<=" lte 3983
" " whitespace 3985
"null" null 3986
" " whitespace 3990
"=>" rocket 3991
" " whitespace 3993
"{" braceLeft 3994
"..." dotDotDot 3995
"," comma 3998
" " whitespace 3999
"\"d\"" string 4000
":" colon 4003
" " whitespace 4004
"[" bracketLeft 4005
"{" braceLeft 4006
"!" not 4007
"a" identifier 4008
"->" arrow 4009
"c" identifier 4011
" " whitespace 4012
"=>" rocket 4013
" " whitespace 4015
"{" braceLeft 4016
"select" identifier 4017
"(" parenLeft 4023
"!" not 4024
"(" parenLeft 4025
"c" identifier 4026
"[" bracketLeft 4027
"]" bracketRight 4028
")" parenRight 4029
" " whitespace 4030
"=>" rocket 4031
" " whitespace 4033
"^" hat 4034
"." dot 4035
"a" identifier 4036
")" parenRight 4037
" " whitespace 4038
">" gt 4039
" " whitespace 4040
"1" integer 4041
" " whitespace 4042
"=>" rocket 4043
" " whitespace 4045
"{" braceLeft 4046
"\"c\"" string 4047
":" colon 4050
" " whitespace 4051
"*" * 4052
"[" bracketLeft 4053
"(" parenLeft 4054
"count" identifier 4055
"(" parenLeft 4060
"*" * 4061
"[" bracketLeft 4062
"!" not 4063
"c" identifier 4064
"[" bracketLeft 4065
"]" bracketRight 4066
"]" bracketRight 4067
"[" bracketLeft 4068
"(" parenLeft 4069
"!" not 4070
"a" identifier 4071
"[" bracketLeft 4072
"]" bracketRight 4073
" " whitespace 4074
"||" or 4075
" " whitespace 4077
"!" not 4078
"a" identifier 4079
"." dot 4080
"b" identifier 4081
")" parenRight 4082
"]" bracketRight 4083
")" parenRight 4084
" " whitespace 4085
"==" equals 4086
" " whitespace 4088
"null" null 4089
")" parenRight 4093
"]" bracketRight 4094
"{" braceLeft 4095
"..." dotDotDot 4096
"," comma 4099
" " whitespace 4100
"!" not 4101
"c" identifier 4102
"[" bracketLeft 4103
"]" bracketRight 4104
" " whitespace 4105
"=>" rocket 4106
" " whitespace 4108
"{" braceLeft 4109
"pt" identifier 4110
"::" doubleColon 4112
"text" identifier 4114
"(" parenLeft 4118
"c" identifier 4119
")" parenRight 4120
" " whitespace 4121
"==" equals 4122
" " whitespace 4124
"null" null 4125
" " whitespace 4129
"=>" rocket 4130
" " whitespace 4132
"{" braceLeft 4133
"..." dotDotDot 4134
"," comma 4137
" " whitespace 4138
"\"e\"" string 4139
":" colon 4142
" " whitespace 4143
"@" at 4144
"." dot 4145
"c" identifier 4146
"}" braceRight 4147
"," comma 4148
" " whitespace 4149
"..." dotDotDot 4150
"}" braceRight 4153
"}" braceRight 4154
"}" braceRight 4155
"," comma 4156
" " whitespace 4157
"..." dotDotDot 4158
"}" braceRight 4161
"}" braceRight 4162
"," comma 4163
" " whitespace 4164
"..." dotDotDot 4165
"[" bracketLeft 4168
"*" * 4169
"[" bracketLeft 4170
"!" not 4171
"(" parenLeft 4172
"\"a\"" string 4173
" " whitespace 4176
"!=" neq 4177
" " whitespace 4179
"a" identifier 4180
")" parenRight 4181
"]" bracketRight 4182
"[" bracketLeft 4183
"(" parenLeft 4184
"3.141592653589793" float 4185
" " whitespace 4202
"!=" neq 4203
" " whitespace 4205
"c" identifier 4206
" " whitespace 4207
"||" or 4208
" " whitespace 4210
"count" identifier 4211
"(" parenLeft 4216
"[" bracketLeft 4217
"[" bracketLeft 4218
"2" integer 4219
" " whitespace 4220
"+" + 4221
" " whitespace 4222
"3.141592653589793" float 4223
"]" bracketRight 4240
"," comma 4241
" " whitespace 4242
"(" parenLeft 4243
"*" * 4244
"[" bracketLeft 4245
"(" parenLeft 4246
"a" identifier 4247
"->" arrow 4248
"b" identifier 4250
" " whitespace 4251
"||" or 4252
" " whitespace 4254
"b" identifier 4255
"[" bracketLeft 4256
"\"b\"" string 4257
"]" bracketRight 4260
" " whitespace 4261
"=>" rocket 4262
" " whitespace 4264
"\"b\"" string 4265
")" parenRight 4268
"]" bracketRight 4269
"[" bracketLeft 4270
"!" not 4271
"(" parenLeft 4272
"select" identifier 4273
"(" parenLeft 4279
"a" identifier 4280
" " whitespace 4281
"=>" rocket 4282
" " whitespace 4284
"(" parenLeft 4285
"count" identifier 4286
"(" parenLeft 4291
"a" identifier 4292
")" parenRight 4293
" " whitespace 4294
"=>" rocket 4295
" " whitespace 4297
"true" bool 4298
" " whitespace 4302
"&&" and 4303
" " whitespace 4305
"count" identifier 4306
"(" parenLeft 4311
"!" not 4312
"(" parenLeft 4313
"!" not 4314
"b" identifier 4315
"->" arrow 4316
"a" identifier 4318
")" parenRight 4319
")" parenRight 4320
" " whitespace 4321
"!=" neq 4322
" " whitespace 4324
"null" null 4325
")" parenRight 4329
")" parenRight 4330
" " whitespace 4331
"<=" lte 4332
" " whitespace 4334
"false" bool 4335
")" parenRight 4340
"]" bracketRight 4341
")" parenRight 4342
" " whitespace 4343
"|" pipe 4344
" " whitespace 4345
"order" identifier 4346
"(" parenLeft 4351
"b" identifier 4352
")" parenRight 4353
"," comma 4354
" " whitespace 4355
"\"f\"" string 4356
" " whitespace 4359
"+" + 4360
" " whitespace 4361
"\"e\"" string 4362
"]" bracketRight 4365
"{" braceLeft 4366
"\"b\"" string 4367
":" colon 4370
" " whitespace 4371
"$myParam" identifier 4372
"," comma 4380
" " whitespace 4381
"..." dotDotDot 4382
"," comma 4385
" " whitespace 4386
"\"e\"" string 4387
":" colon 4390
" " whitespace 4391
"{" braceLeft 4392
"..." dotDotDot 4393
"," comma 4396
" " whitespace 4397
"\"d\"" string 4398
":" colon 4401
" " whitespace 4402
"[" bracketLeft 4403
"a" identifier 4404
"," comma 4405
" " whitespace 4406
"..." dotDotDot 4407
"[" bracketLeft 4410
"$myParam" identifier 4411
"]" bracketRight 4419
"]" bracketRight 4420
"[" bracketLeft 4421
"-" - 4422
"100" integer 4423
"]" bracketRight 4426
"}" braceRight 4427
" " whitespace 4428
"|" pipe 4429
" " whitespace 4430
"order" identifier 4431
"(" parenLeft 4436
"c" identifier 4437
")" parenRight 4438
"}" braceRight 4439
")" parenRight 4440
" " whitespace 4441
"<=" lte 4442
" " whitespace 4444
"\"c\"" string 4445
")" parenRight 4448
"]" bracketRight 4449
"," comma 4450
" " whitespace 4451
"..." dotDotDot 4452
"[" bracketLeft 4455
"(" parenLeft 4456
"a" identifier 4457
")" parenRight 4458
"," comma 4459
" " whitespace 4460
"select" identifier 4461
"(" parenLeft 4467
"$myParam" identifier 4468
" " whitespace 4476
"=>" rocket 4477
" " whitespace 4479
"*" * 4480
"{" braceLeft 4481
"..." dotDotDot 4482
"," comma 4485
" " whitespace 4486
"\"b\"" string 4487
":" colon 4490
" " whitespace 4491
"[" bracketLeft 4492
"]" bracketRight 4493
"}" braceRight 4494
")" parenRight 4495
"," comma 4496
" " whitespace 4497
"(" parenLeft 4498
"a" identifier 4499
"->" arrow 4500
" " whitespace 4502
"==" equals 4503
" " whitespace 4505
"true" bool 4506
" " whitespace 4510
"&&" and 4511
" " whitespace 4513
"c" identifier 4514
"[" bracketLeft 4515
"]" bracketRight 4516
"." dot 4517
"c" identifier 4518
")" parenRight 4519
"]" bracketRight 4520
"]" bracketRight 4521
"]" bracketRight 4522
"[" bracketLeft 4523
"coalesce" identifier 4524
"(" parenLeft 4532
"$myParam" identifier 4533
"," comma 4541
" " whitespace 4542
"1" integer 4543
")" parenRight 4544
" " whitespace 4545
"!=" neq 4546
" " whitespace 4548
"\"c\"" string 4549
"]" bracketRight 4552
"}" braceRight 4553
"}" braceRight 4554
"}" braceRight 4555
"}" braceRight 4556
"," comma 4557
" " whitespace 4558
"\"g\"" string 4559
":" colon 4562
" " whitespace 4563
"*" * 4564
"[" bracketLeft 4565
"1" integer 4566
"..." dotDotDot 4567
"-" - 4570
"1" integer 4571
"]" bracketRight 4572
" " whitespace 4573
"|" pipe 4574
" " whitespace 4575
"order" identifier 4576
"(" parenLeft 4581
"a" identifier 4582
")" parenRight 4583
"}" braceRight 4584
"}" braceRight 4585
"," comma 4586
" " whitespace 4587
"..." dotDotDot 4588
"," comma 4591
" " whitespace 4592
"!" not 4593
"c" identifier 4594
"[" bracketLeft 4595
"\"g\"" string 4596
"]" bracketRight 4599
" " whitespace 4600
"=>" rocket 4601
" " whitespace 4603
"{" braceLeft 4604
"!" not 4605
"b" identifier 4606
"->" arrow 4607
" " whitespace 4609
"=>" rocket 4610
" " whitespace 4612
"{" braceLeft 4613
"..." dotDotDot 4614
"," comma 4617
" " whitespace 4618
"\"g\"" string 4619
":" colon 4622
" " whitespace 4623
"a" identifier 4624
"}" braceRight 4625
"," comma 4626
" " whitespace 4627
"..." dotDotDot 4628
"," comma 4631
" " whitespace 4632
"\"g\"" string 4633
":" colon 4636
" " whitespace 4637
"*" * 4638
"[" bracketLeft 4639
"-" - 4640
"100" integer 4641
"]" bracketRight 4644
"}" braceRight 4645
"}" braceRight 4646
"}" braceRight 4647
"}" braceRight 4648
"}" braceRight 4649
"," comma 4650
" " whitespace 4651
"..." dotDotDot 4652
"}" braceRight 4655
"," comma 4656
" " whitespace 4657
"..." dotDotDot 4658
"}" braceRight 4661
"}" braceRight 4662
"}" braceRight 4663
"}" braceRight 4664
"}" braceRight 4665
"}" braceRight 4666
"," comma 4667
" " whitespace 4668
"..." dotDotDot 4669
"}" braceRight 4672
"}" braceRight 4673
"," comma 4674
" " whitespace 4675
"\"a\"" string 4676
":" colon 4679
" " whitespace 4680
"*" * 4681
"[" bracketLeft 4682
"2" integer 4683
"]" bracketRight 4684
"}" braceRight 4685
"," comma 4686
" " whitespace 4687
"..." dotDotDot 4688
"," comma 4691
" " whitespace 4692
"-" - 4693
"3e12" float 4694
" " whitespace 4698
">" gt 4699
" " whitespace 4700
"a" identifier 4701
" " whitespace 4702
"=>" rocket 4703
" " whitespace 4705
"{" braceLeft 4706
"\"f\"" string 4707
":" colon 4710
" " whitespace 4711
"*" * 4712
"[" bracketLeft 4713
"(" parenLeft 4714
"b" identifier 4715
" " whitespace 4716
"==" equals 4717
" " whitespace 4719
"true" bool 4720
")" parenRight 4724
"]" bracketRight 4725
"[" bracketLeft 4726
"1000000000000000" integer 4727
"]" bracketRight 4743
"," comma 4744
" " whitespace 4745
"..." dotDotDot 4746
"}" braceRight 4749
"}" braceRight 4750
"}" braceRight 4751
"}" braceRight 4752
"}" braceRight 4753
"," comma 4754
" " whitespace 4755
"\"a\"" string 4756
":" colon 4759
" " whitespace 4760
"[" bracketLeft 4761
"\"g\"" string 4762
" " whitespace 4765
"+" + 4766
" " whitespace 4767
"\"d\"" string 4768
"]" bracketRight 4771
"}" braceRight 4772
"," comma 4773
" " whitespace 4774
"\"d\"" string 4775
":" colon 4778
" " whitespace 4779
"(" parenLeft 4780
"[" bracketLeft 4781
"*" * 4782
" " whitespace 4783
"|" pipe 4784
" " whitespace 4785
"{" braceLeft 4786
"c" identifier 4787
"->" arrow 4788
"." dot 4790
"c" identifier 4791
" " whitespace 4792
"<" lt 4793
" " whitespace 4794
"false" bool 4795
" " whitespace 4800
"=>" rocket 4801
" " whitespace 4803
"{" braceLeft 4804
"\"c\"" string 4805
":" colon 4808
" " whitespace 4809
"@" at 4810
"," comma 4811
" " whitespace 4812
"..." dotDotDot 4813
"," comma 4816
" " whitespace 4817
"c" identifier 4818
"[" bracketLeft 4819
"\"f\"" string 4820
"]" bracketRight 4823
" " whitespace 4824
"=>" rocket 4825
" " whitespace 4827
"{" braceLeft 4828
"!" not 4829
"c" identifier 4830
" " whitespace 4831
"=>" rocket 4832
" " whitespace 4834
"{" braceLeft 4835
"\"c\"" string 4836
":" colon 4839
" " whitespace 4840
"[" bracketLeft 4841
"-" - 4842
"100" integer 4843
" " whitespace 4846
"<=" lte 4847
" " whitespace 4849
"c" identifier 4850
"]" bracketRight 4851
"[" bracketLeft 4852
"-" - 4853
"100" integer 4854
"..." dotDotDot 4857
"1" integer 4860
"]" bracketRight 4861
"," comma 4862
" " whitespace 4863
"..." dotDotDot 4864
"," comma 4867
" " whitespace 4868
"!" not 4869
"c" identifier 4870
"->" arrow 4871
"a" identifier 4873
" " whitespace 4874
"=>" rocket 4875
" " whitespace 4877
"{" braceLeft 4878
"\"d\"" string 4879
":" colon 4882
" " whitespace 4883
"[" bracketLeft 4884
"$myParam" identifier 4885
"," comma 4893
" " whitespace 4894
"[" bracketLeft 4895
"@" at 4896
"." dot 4897
"c" identifier 4898
"," comma 4899
" " whitespace 4900
"[" bracketLeft 4901
"-" - 4902
"1" integer 4903
" " whitespace 4904
"%" % 4905
" " whitespace 4906
"1" integer 4907
"]" bracketRight 4908
"[" bracketLeft 4909
"(" parenLeft 4910
"b" identifier 4911
"->" arrow 4912
"a" identifier 4914
" " whitespace 4915
"||" or 4916
" " whitespace 4918
"true" bool 4919
" " whitespace 4923
"<" lt 4924
" " whitespace 4925
"c" identifier 4926
")" parenRight 4927
"]" bracketRight 4928
" " whitespace 4929
"|" pipe 4930
" " whitespace 4931
"order" identifier 4932
"(" parenLeft 4937
"c" identifier 4938
")" parenRight 4939
"," comma 4940
" " whitespace 4941
"c" identifier 4942
"]" bracketRight 4943
"[" bracketLeft 4944
"null" null 4945
" " whitespace 4949
"==" equals 4950
" " whitespace 4952
"a" identifier 4953
"]" bracketRight 4954
" " whitespace 4955
"|" pipe 4956
" " whitespace 4957
"{" braceLeft 4958
"\"d\"" string 4959
":" colon 4962
" " whitespace 4963
"[" bracketLeft 4964
"]" bracketRight 4965
"[" bracketLeft 4966
"1" integer 4967
"]" bracketRight 4968
"}" braceRight 4969
"]" bracketRight 4970
"}" braceRight 4971
"}" braceRight 4972
"," comma 4973
" " whitespace 4974
"..." dotDotDot 4975
"}" braceRight 4978
"}" braceRight 4979
"," comma 4980
" " whitespace 4981
"..." dotDotDot 4982
"}" braceRight 4985
"," comma 4986
" " whitespace 4987
"[" bracketLeft 4988
"(" parenLeft 4989
"[" bracketLeft 4990
"a" identifier 4991
"," comma 4992
" " whitespace 4993
"\"c\"" string 4994
" " whitespace 4997
"+" + 4998
" " whitespace 4999
"\"g\"" string 5000
"]" bracketRight 5003
"[" bracketLeft 5004
"!" not 5005
"(" parenLeft 5006
"a" identifier 5007
"[" bracketLeft 5008
"]" bracketRight 5009
")" parenRight 5010
"]" bracketRight 5011
"[" bracketLeft 5012
"(" parenLeft 5013
"c" identifier 5014
"[" bracketLeft 5015
"]" bracketRight 5016
"." dot 5017
"c" identifier 5018
" " whitespace 5019
"||" or 5020
" " whitespace 5022
"b" identifier 5023
"[" bracketLeft 5024
"]" bracketRight 5025
" " whitespace 5026
"<" lt 5027
" " whitespace 5028
"\"d\"" string 5029
")" parenRight 5032
"]" bracketRight 5033
")" parenRight 5034
"]" bracketRight 5035
"[" bracketLeft 5036
"(" parenLeft 5037
"select" identifier 5038
"(" parenLeft 5044
"!" not 5045
"(" parenLeft 5046
"b" identifier 5047
"->" arrow 5048
"." dot 5050
"b" identifier 5051
" " whitespace 5052
"==" equals 5053
" " whitespace 5055
"-" - 5056
"100" integer 5057
")" parenRight 5060
" " whitespace 5061
"=>" rocket 5062
" " whitespace 5064
"[" bracketLeft 5065
"*" * 5066
"[" bracketLeft 5067
"-" - 5068
"1" integer 5069
"]" bracketRight 5070
"," comma 5071
" " whitespace 5072
"..." dotDotDot 5073
"[" bracketLeft 5076
"]" bracketRight 5077
"]" bracketRight 5078
")" parenRight 5079
" " whitespace 5080
"=>" rocket 5081
" " whitespace 5083
"1" integer 5084
" " whitespace 5085
"&&" and 5086
" " whitespace 5088
"\"b\"" string 5089
" " whitespace 5092
"<" lt 5093
" " whitespace 5094
"c" identifier 5095
")" parenRight 5096
"]" bracketRight 5097
"]" bracketRight 5098
")" parenRight 5099
"}" braceRight 5100
"," comma 5101
" " whitespace 5102
"null" null 5103
" " whitespace 5107
"<=" lte 5108
" " whitespace 5110
"b" identifier 5111
")" parenRight 5112
"" eof 5113
