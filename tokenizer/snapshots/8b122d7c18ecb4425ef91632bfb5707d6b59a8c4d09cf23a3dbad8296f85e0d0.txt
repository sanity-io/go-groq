//groq:version=0.x.x
//groq:param:myParam="abc"
//groq:param:baz="music"

// The following query exercises all parser-related features for GROQ 2 plus experimental features.

def foo::bar($baz) = $baz{a, b} def foo::lala($baz) = $baz->{a,b} def foo::nana($baz) = $baz[]{a,b} def foo::doodoo($baz) = $baz[]->{a,b} coalesce({count($myParam) > "d" => {c["e"] => {..., null == c => {count([(!b-> || !c.c), ^.^.c->][(true > c && false <= c)][!(b->)][1000000000000000]) <= "g" => {..., b->a => {b.a => {"e": b, ...}, c-> => {"g": count(* | order(a)), "b": @}}}, !a => {..., "f": {!b->.a => {select(@.b => * | {..., "f": *[(!a[] || "f" == b)][(pt::text(c) => 2 && select([!(-1 != c)] => ([[[], 1 % -3e12, 2][!b[].b][-100..-100], (null != a || a.c != 100)][(a->c)] | order(b))) < 2)]}) != 100 => {"a": $myParam, b[] < 3e-12 => {coalesce([*{c["d"] < true => {false > c => {a => {..., "f": *[null <= a]}}, ..., b->b < "d" => {"d": -100 + 3e12 | order(b), "c": [b | order(a) | order(b)]}}, ...}, ...[(* | {"f": *[!(!b)][!a->a][c->c == 100], ..., "a": c}), @.b]][(-3e-12 > c && count([*{"b": ({pt::text(c) != 3e12 => {"a": [b, [][(!c->c || null < a)][(b[].b > true || b[].b)][1..1], -3e12 + -1][100], true == a => {!a => {..., "b": (b | order(a) | order(b))}, b[].c => {..., count(*[b->][a[].c <= false][!(select(@.a => $myParam) != -100)] | {c["g"] => {..., "d": [*[2]][(b-> || pt::text(a) < -1.1)][!(!a[].a)] | {..., "g": "d" + "c"}}, ...}) < 3e-12 => {"f": "f" + "f"}}}}, ...}), !c-> => {"f": [(1.1 == b && !c), 1.1 + -1, ^.^.a[].b][1000000000000000..100], ..., !a.c => {"a": *[!b[].a][(select([[*{"f": [(count(*[b[] < -1.1][(b-> => false && pt::text(c) > true)][(a[].c <= null || select("a" == c => b) < null)]) < "g" && coalesce(-3e-12 * 1.1, ^.^.^.c->b) == true), [][!(c <= "d")][!a->c][(-100 => b)][(coalesce((*[a][a]{a => {"a": a}, ..., a => {"a": a}}), (a->a && b.c)) < "g" && c->.b)][b <= 3e-12][(b->a && !c["b"])][-1], * | {-1.1 <= c => {"c": * | {..., pt::text(a) != 3e-12 => {null == a => {"a": a}}} | order(c), ...}, ..., "f": $myParam}][false < b][(!a.a || a->.a)][(!a.a)][1..1], ..., count(-100 / 1.1) > -3e12 => {"d": b, ..., c[].a == 3e-12 => {"g": coalesce(coalesce(b->, count(^.a->)), null), "f": 1.1 * 3e12}}}, 1000000000000000 - 3e-12][(select("a" + "a" => ^.^.^.b->) != 2 || !a->b)][(c->c || b < 3.141592653589793)] | {..., "c": ^.^.a->c}, ...[a, 3.141592653589793 / -1 | order(a), @.b]][(count(*[1...1]) <= -3e-12 || -1 > c)][!(b.c == 3e12)][(true > c || coalesce(*[1000000000000000], ^.^.^.c[]) != null)] => *{"f": (1 % -1.1)}) < 1000000000000000 && count("b" + "d") <= 2)], ..., "b": [*[c->.b], [[[*[1000000000000000]][(!c-> || !c.b)][(b > -3e12 && !c->)], ...[]]][!("a" <= a)][-100..100]][(!b->b && a->.b => null)]}}}, (coalesce($myParam, $myParam))][(!a["b"] && count(pt::text(b)) != -1)][null < c][(!b->b && null < a)][(b => 3.141592653589793 || c[])][(true <= b || "g" == b)][(count("a" + "c") > null)][-100] | order(b)) > 1)] | {"e": $myParam}, coalesce([[1000000000000000 % 1.1, ...[$myParam]], 1, (count(pt::text(a)))][100], @)) => 3e12 => {b[] > 3e12 => {..., "g": 3.141592653589793 + 3.141592653589793}, b-> => {..., count(*{a->.a <= -1 => {"d": (c["e"] == 3e12), ..., false == b => {"e": count(^.b->.c), ..., b[].c => {"f": -100 - -3e-12, a-> => {"f": "f" + "d", c[].c => {b["a"] <= null => {..., a.b => {c->b => {"e": select(^.^.^.c-> => (-1 / -3e12)), ..., pt::text(a) <= 3e-12 => {false == a => {!c[].b => {a["a"] < false => {b["b"] => {"b": [$myParam | order(c), ("a" + "e" | order(a))][-100...1]}, ...}, ...}, ..., c[].b => {"f": (*[1000000000000000]), ..., "b": *}}}}, ...}}}}}}}}) != true => {"f": select(*[100] => c | order(b)), ..., !c.a => {null => c => {!b.b => {"e": a, "d": *[(select("d" + "e" => (c)) <= false || coalesce(*[(b->a)], *) < false)][(3.141592653589793 < c)][100]}}, b-> => {null > b => {b.a < 100 => {b.a => {"a": ^.c, !c->a => {-1.1 != b => {..., a->b => {1 != a => {b["e"] != 1.1 => {c[].b <= 3.141592653589793 => {..., pt::text(b) < true => {"a": {c[] => {"g": *, ..., "d": [count(b[]), ...[@, -1.1 - -1, pt::text(c)]][1]}}, count(@) > 1000000000000000 => {select(select(^.c->b => @.a) => @) <= null => {..., "d": [{!a->c => {select(!(c[]) => ^.a) > 1 => {"c": *[(count(*[!c[]][(!a[] || !a.b)]) == null)]{..., !c[] => {pt::text(c) == null => {..., "e": @.c}, ...}}}, ...}}, ...[*[!("a" != a)][(3.141592653589793 != c || count([[2 + 3.141592653589793], (*[(a->b || b["b"] => "b")][!(select(a => (count(a) => true && count(!(!b->a)) != null)) <= false)]) | order(b), "f" + "e"]{"b": $myParam, ..., "e": {..., "d": [a, ...[$myParam]][-100]} | order(c)}) <= "c")], ...[(a), select($myParam => *{..., "b": []}), (a-> == true && c[].c)]]][coalesce($myParam, 1) != "c"]}}}}, "g": *[1...-1] | order(a)}}, ..., !c["g"] => {!b-> => {..., "g": a}, ..., "g": *[-100]}}}}}, ...}, ...}}}}}}, ...}}, "a": *[2]}, ..., -3e12 > a => {"f": *[(b == true)][1000000000000000], ...}}}}}, "a": ["g" + "d"]}, "d": ([* | {c->.c < false => {"c": @, ..., c["f"] => {!c => {"c": [-100 <= c][-100...1], ..., !c->a => {"d": [$myParam, [@.c, [-1 % 1][(b->a || true < c)] | order(c), c][null == a] | {"d": [][1]}]}}, ...}}, ...}, [([a, "c" + "g"][!(a[])][(c[].c || b[] < "d")])][(select(!(b->.b == -100) => [*[-1], ...[]]) => 1 && "b" < c)]])}, null <= b)
----
"\n" whitespace 73
"\n" whitespace 174
"def" identifier 175
" " whitespace 178
"foo" identifier 179
"::" doubleColon 182
"bar" identifier 184
"(" parenLeft 187
"$baz" identifier 188
")" parenRight 192
" " whitespace 193
"=" equalSign 194
" " whitespace 195
"$baz" identifier 196
"{" braceLeft 200
"a" identifier 201
"," comma 202
" " whitespace 203
"b" identifier 204
"}" braceRight 205
" " whitespace 206
"def" identifier 207
" " whitespace 210
"foo" identifier 211
"::" doubleColon 214
"lala" identifier 216
"(" parenLeft 220
"$baz" identifier 221
")" parenRight 225
" " whitespace 226
"=" equalSign 227
" " whitespace 228
"$baz" identifier 229
"->" arrow 233
"{" braceLeft 235
"a" identifier 236
"," comma 237
"b" identifier 238
"}" braceRight 239
" " whitespace 240
"def" identifier 241
" " whitespace 244
"foo" identifier 245
"::" doubleColon 248
"nana" identifier 250
"(" parenLeft 254
"$baz" identifier 255
")" parenRight 259
" " whitespace 260
"=" equalSign 261
" " whitespace 262
"$baz" identifier 263
"[" bracketLeft 267
"]" bracketRight 268
"{" braceLeft 269
"a" identifier 270
"," comma 271
"b" identifier 272
"}" braceRight 273
" " whitespace 274
"def" identifier 275
" " whitespace 278
"foo" identifier 279
"::" doubleColon 282
"doodoo" identifier 284
"(" parenLeft 290
"$baz" identifier 291
")" parenRight 295
" " whitespace 296
"=" equalSign 297
" " whitespace 298
"$baz" identifier 299
"[" bracketLeft 303
"]" bracketRight 304
"->" arrow 305
"{" braceLeft 307
"a" identifier 308
"," comma 309
"b" identifier 310
"}" braceRight 311
" " whitespace 312
"coalesce" identifier 313
"(" parenLeft 321
"{" braceLeft 322
"count" identifier 323
"(" parenLeft 328
"$myParam" identifier 329
")" parenRight 337
" " whitespace 338
">" gt 339
" " whitespace 340
"\"d\"" string 341
" " whitespace 344
"=>" rocket 345
" " whitespace 347
"{" braceLeft 348
"c" identifier 349
"[" bracketLeft 350
"\"e\"" string 351
"]" bracketRight 354
" " whitespace 355
"=>" rocket 356
" " whitespace 358
"{" braceLeft 359
"..." dotDotDot 360
"," comma 363
" " whitespace 364
"null" null 365
" " whitespace 369
"==" equals 370
" " whitespace 372
"c" identifier 373
" " whitespace 374
"=>" rocket 375
" " whitespace 377
"{" braceLeft 378
"count" identifier 379
"(" parenLeft 384
"[" bracketLeft 385
"(" parenLeft 386
"!" not 387
"b" identifier 388
"->" arrow 389
" " whitespace 391
"||" or 392
" " whitespace 394
"!" not 395
"c" identifier 396
"." dot 397
"c" identifier 398
")" parenRight 399
"," comma 400
" " whitespace 401
"^" hat 402
"." dot 403
"^" hat 404
"." dot 405
"c" identifier 406
"->" arrow 407
"]" bracketRight 409
"[" bracketLeft 410
"(" parenLeft 411
"true" bool 412
" " whitespace 416
">" gt 417
" " whitespace 418
"c" identifier 419
" " whitespace 420
"&&" and 421
" " whitespace 423
"false" bool 424
" " whitespace 429
"<=" lte 430
" " whitespace 432
"c" identifier 433
")" parenRight 434
"]" bracketRight 435
"[" bracketLeft 436
"!" not 437
"(" parenLeft 438
"b" identifier 439
"->" arrow 440
")" parenRight 442
"]" bracketRight 443
"[" bracketLeft 444
"1000000000000000" integer 445
"]" bracketRight 461
")" parenRight 462
" " whitespace 463
"<=" lte 464
" " whitespace 466
"\"g\"" string 467
" " whitespace 470
"=>" rocket 471
" " whitespace 473
"{" braceLeft 474
"..." dotDotDot 475
"," comma 478
" " whitespace 479
"b" identifier 480
"->" arrow 481
"a" identifier 483
" " whitespace 484
"=>" rocket 485
" " whitespace 487
"{" braceLeft 488
"b" identifier 489
"." dot 490
"a" identifier 491
" " whitespace 492
"=>" rocket 493
" " whitespace 495
"{" braceLeft 496
"\"e\"" string 497
":" colon 500
" " whitespace 501
"b" identifier 502
"," comma 503
" " whitespace 504
"..." dotDotDot 505
"}" braceRight 508
"," comma 509
" " whitespace 510
"c" identifier 511
"->" arrow 512
" " whitespace 514
"=>" rocket 515
" " whitespace 517
"{" braceLeft 518
"\"g\"" string 519
":" colon 522
" " whitespace 523
"count" identifier 524
"(" parenLeft 529
"*" * 530
" " whitespace 531
"|" pipe 532
" " whitespace 533
"order" identifier 534
"(" parenLeft 539
"a" identifier 540
")" parenRight 541
")" parenRight 542
"," comma 543
" " whitespace 544
"\"b\"" string 545
":" colon 548
" " whitespace 549
"@" at 550
"}" braceRight 551
"}" braceRight 552
"}" braceRight 553
"," comma 554
" " whitespace 555
"!" not 556
"a" identifier 557
" " whitespace 558
"=>" rocket 559
" " whitespace 561
"{" braceLeft 562
"..." dotDotDot 563
"," comma 566
" " whitespace 567
"\"f\"" string 568
":" colon 571
" " whitespace 572
"{" braceLeft 573
"!" not 574
"b" identifier 575
"->" arrow 576
"." dot 578
"a" identifier 579
" " whitespace 580
"=>" rocket 581
" " whitespace 583
"{" braceLeft 584
"select" identifier 585
"(" parenLeft 591
"@" at 592
"." dot 593
"b" identifier 594
" " whitespace 595
"=>" rocket 596
" " whitespace 598
"*" * 599
" " whitespace 600
"|" pipe 601
" " whitespace 602
"{" braceLeft 603
"..." dotDotDot 604
"," comma 607
" " whitespace 608
"\"f\"" string 609
":" colon 612
" " whitespace 613
"*" * 614
"[" bracketLeft 615
"(" parenLeft 616
"!" not 617
"a" identifier 618
"[" bracketLeft 619
"]" bracketRight 620
" " whitespace 621
"||" or 622
" " whitespace 624
"\"f\"" string 625
" " whitespace 628
"==" equals 629
" " whitespace 631
"b" identifier 632
")" parenRight 633
"]" bracketRight 634
"[" bracketLeft 635
"(" parenLeft 636
"pt" identifier 637
"::" doubleColon 639
"text" identifier 641
"(" parenLeft 645
"c" identifier 646
")" parenRight 647
" " whitespace 648
"=>" rocket 649
" " whitespace 651
"2" integer 652
" " whitespace 653
"&&" and 654
" " whitespace 656
"select" identifier 657
"(" parenLeft 663
"[" bracketLeft 664
"!" not 665
"(" parenLeft 666
"-" - 667
"1" integer 668
" " whitespace 669
"!=" neq 670
" " whitespace 672
"c" identifier 673
")" parenRight 674
"]" bracketRight 675
" " whitespace 676
"=>" rocket 677
" " whitespace 679
"(" parenLeft 680
"[" bracketLeft 681
"[" bracketLeft 682
"[" bracketLeft 683
"]" bracketRight 684
"," comma 685
" " whitespace 686
"1" integer 687
" " whitespace 688
"%" % 689
" " whitespace 690
"-" - 691
"3e12" float 692
"," comma 696
" " whitespace 697
"2" integer 698
"]" bracketRight 699
"[" bracketLeft 700
"!" not 701
"b" identifier 702
"[" bracketLeft 703
"]" bracketRight 704
"." dot 705
"b" identifier 706
"]" bracketRight 707
"[" bracketLeft 708
"-" - 709
"100" integer 710
".." dotDot 713
"-" - 715
"100" integer 716
"]" bracketRight 719
"," comma 720
" " whitespace 721
"(" parenLeft 722
"null" null 723
" " whitespace 727
"!=" neq 728
" " whitespace 730
"a" identifier 731
" " whitespace 732
"||" or 733
" " whitespace 735
"a" identifier 736
"." dot 737
"c" identifier 738
" " whitespace 739
"!=" neq 740
" " whitespace 742
"100" integer 743
")" parenRight 746
"]" bracketRight 747
"[" bracketLeft 748
"(" parenLeft 749
"a" identifier 750
"->" arrow 751
"c" identifier 753
")" parenRight 754
"]" bracketRight 755
" " whitespace 756
"|" pipe 757
" " whitespace 758
"order" identifier 759
"(" parenLeft 764
"b" identifier 765
")" parenRight 766
")" parenRight 767
")" parenRight 768
" " whitespace 769
"<" lt 770
" " whitespace 771
"2" integer 772
")" parenRight 773
"]" bracketRight 774
"}" braceRight 775
")" parenRight 776
" " whitespace 777
"!=" neq 778
" " whitespace 780
"100" integer 781
" " whitespace 784
"=>" rocket 785
" " whitespace 787
"{" braceLeft 788
"\"a\"" string 789
":" colon 792
" " whitespace 793
"$myParam" identifier 794
"," comma 802
" " whitespace 803
"b" identifier 804
"[" bracketLeft 805
"]" bracketRight 806
" " whitespace 807
"<" lt 808
" " whitespace 809
"3e-12" float 810
" " whitespace 815
"=>" rocket 816
" " whitespace 818
"{" braceLeft 819
"coalesce" identifier 820
"(" parenLeft 828
"[" bracketLeft 829
"*" * 830
"{" braceLeft 831
"c" identifier 832
"[" bracketLeft 833
"\"d\"" string 834
"]" bracketRight 837
" " whitespace 838
"<" lt 839
" " whitespace 840
"true" bool 841
" " whitespace 845
"=>" rocket 846
" " whitespace 848
"{" braceLeft 849
"false" bool 850
" " whitespace 855
">" gt 856
" " whitespace 857
"c" identifier 858
" " whitespace 859
"=>" rocket 860
" " whitespace 862
"{" braceLeft 863
"a" identifier 864
" " whitespace 865
"=>" rocket 866
" " whitespace 868
"{" braceLeft 869
"..." dotDotDot 870
"," comma 873
" " whitespace 874
"\"f\"" string 875
":" colon 878
" " whitespace 879
"*" * 880
"[" bracketLeft 881
"null" null 882
" " whitespace 886
"<=" lte 887
" " whitespace 889
"a" identifier 890
"]" bracketRight 891
"}" braceRight 892
"}" braceRight 893
"," comma 894
" " whitespace 895
"..." dotDotDot 896
"," comma 899
" " whitespace 900
"b" identifier 901
"->" arrow 902
"b" identifier 904
" " whitespace 905
"<" lt 906
" " whitespace 907
"\"d\"" string 908
" " whitespace 911
"=>" rocket 912
" " whitespace 914
"{" braceLeft 915
"\"d\"" string 916
":" colon 919
" " whitespace 920
"-" - 921
"100" integer 922
" " whitespace 925
"+" + 926
" " whitespace 927
"3e12" float 928
" " whitespace 932
"|" pipe 933
" " whitespace 934
"order" identifier 935
"(" parenLeft 940
"b" identifier 941
")" parenRight 942
"," comma 943
" " whitespace 944
"\"c\"" string 945
":" colon 948
" " whitespace 949
"[" bracketLeft 950
"b" identifier 951
" " whitespace 952
"|" pipe 953
" " whitespace 954
"order" identifier 955
"(" parenLeft 960
"a" identifier 961
")" parenRight 962
" " whitespace 963
"|" pipe 964
" " whitespace 965
"order" identifier 966
"(" parenLeft 971
"b" identifier 972
")" parenRight 973
"]" bracketRight 974
"}" braceRight 975
"}" braceRight 976
"," comma 977
" " whitespace 978
"..." dotDotDot 979
"}" braceRight 982
"," comma 983
" " whitespace 984
"..." dotDotDot 985
"[" bracketLeft 988
"(" parenLeft 989
"*" * 990
" " whitespace 991
"|" pipe 992
" " whitespace 993
"{" braceLeft 994
"\"f\"" string 995
":" colon 998
" " whitespace 999
"*" * 1000
"[" bracketLeft 1001
"!" not 1002
"(" parenLeft 1003
"!" not 1004
"b" identifier 1005
")" parenRight 1006
"]" bracketRight 1007
"[" bracketLeft 1008
"!" not 1009
"a" identifier 1010
"->" arrow 1011
"a" identifier 1013
"]" bracketRight 1014
"[" bracketLeft 1015
"c" identifier 1016
"->" arrow 1017
"c" identifier 1019
" " whitespace 1020
"==" equals 1021
" " whitespace 1023
"100" integer 1024
"]" bracketRight 1027
"," comma 1028
" " whitespace 1029
"..." dotDotDot 1030
"," comma 1033
" " whitespace 1034
"\"a\"" string 1035
":" colon 1038
" " whitespace 1039
"c" identifier 1040
"}" braceRight 1041
")" parenRight 1042
"," comma 1043
" " whitespace 1044
"@" at 1045
"." dot 1046
"b" identifier 1047
"]" bracketRight 1048
"]" bracketRight 1049
"[" bracketLeft 1050
"(" parenLeft 1051
"-" - 1052
"3e-12" float 1053
" " whitespace 1058
">" gt 1059
" " whitespace 1060
"c" identifier 1061
" " whitespace 1062
"&&" and 1063
" " whitespace 1065
"count" identifier 1066
"(" parenLeft 1071
"[" bracketLeft 1072
"*" * 1073
"{" braceLeft 1074
"\"b\"" string 1075
":" colon 1078
" " whitespace 1079
"(" parenLeft 1080
"{" braceLeft 1081
"pt" identifier 1082
"::" doubleColon 1084
"text" identifier 1086
"(" parenLeft 1090
"c" identifier 1091
")" parenRight 1092
" " whitespace 1093
"!=" neq 1094
" " whitespace 1096
"3e12" float 1097
" " whitespace 1101
"=>" rocket 1102
" " whitespace 1104
"{" braceLeft 1105
"\"a\"" string 1106
":" colon 1109
" " whitespace 1110
"[" bracketLeft 1111
"b" identifier 1112
"," comma 1113
" " whitespace 1114
"[" bracketLeft 1115
"]" bracketRight 1116
"[" bracketLeft 1117
"(" parenLeft 1118
"!" not 1119
"c" identifier 1120
"->" arrow 1121
"c" identifier 1123
" " whitespace 1124
"||" or 1125
" " whitespace 1127
"null" null 1128
" " whitespace 1132
"<" lt 1133
" " whitespace 1134
"a" identifier 1135
")" parenRight 1136
"]" bracketRight 1137
"[" bracketLeft 1138
"(" parenLeft 1139
"b" identifier 1140
"[" bracketLeft 1141
"]" bracketRight 1142
"." dot 1143
"b" identifier 1144
" " whitespace 1145
">" gt 1146
" " whitespace 1147
"true" bool 1148
" " whitespace 1152
"||" or 1153
" " whitespace 1155
"b" identifier 1156
"[" bracketLeft 1157
"]" bracketRight 1158
"." dot 1159
"b" identifier 1160
")" parenRight 1161
"]" bracketRight 1162
"[" bracketLeft 1163
"1" integer 1164
".." dotDot 1165
"1" integer 1167
"]" bracketRight 1168
"," comma 1169
" " whitespace 1170
"-" - 1171
"3e12" float 1172
" " whitespace 1176
"+" + 1177
" " whitespace 1178
"-" - 1179
"1" integer 1180
"]" bracketRight 1181
"[" bracketLeft 1182
"100" integer 1183
"]" bracketRight 1186
"," comma 1187
" " whitespace 1188
"true" bool 1189
" " whitespace 1193
"==" equals 1194
" " whitespace 1196
"a" identifier 1197
" " whitespace 1198
"=>" rocket 1199
" " whitespace 1201
"{" braceLeft 1202
"!" not 1203
"a" identifier 1204
" " whitespace 1205
"=>" rocket 1206
" " whitespace 1208
"{" braceLeft 1209
"..." dotDotDot 1210
"," comma 1213
" " whitespace 1214
"\"b\"" string 1215
":" colon 1218
" " whitespace 1219
"(" parenLeft 1220
"b" identifier 1221
" " whitespace 1222
"|" pipe 1223
" " whitespace 1224
"order" identifier 1225
"(" parenLeft 1230
"a" identifier 1231
")" parenRight 1232
" " whitespace 1233
"|" pipe 1234
" " whitespace 1235
"order" identifier 1236
"(" parenLeft 1241
"b" identifier 1242
")" parenRight 1243
")" parenRight 1244
"}" braceRight 1245
"," comma 1246
" " whitespace 1247
"b" identifier 1248
"[" bracketLeft 1249
"]" bracketRight 1250
"." dot 1251
"c" identifier 1252
" " whitespace 1253
"=>" rocket 1254
" " whitespace 1256
"{" braceLeft 1257
"..." dotDotDot 1258
"," comma 1261
" " whitespace 1262
"count" identifier 1263
"(" parenLeft 1268
"*" * 1269
"[" bracketLeft 1270
"b" identifier 1271
"->" arrow 1272
"]" bracketRight 1274
"[" bracketLeft 1275
"a" identifier 1276
"[" bracketLeft 1277
"]" bracketRight 1278
"." dot 1279
"c" identifier 1280
" " whitespace 1281
"<=" lte 1282
" " whitespace 1284
"false" bool 1285
"]" bracketRight 1290
"[" bracketLeft 1291
"!" not 1292
"(" parenLeft 1293
"select" identifier 1294
"(" parenLeft 1300
"@" at 1301
"." dot 1302
"a" identifier 1303
" " whitespace 1304
"=>" rocket 1305
" " whitespace 1307
"$myParam" identifier 1308
")" parenRight 1316
" " whitespace 1317
"!=" neq 1318
" " whitespace 1320
"-" - 1321
"100" integer 1322
")" parenRight 1325
"]" bracketRight 1326
" " whitespace 1327
"|" pipe 1328
" " whitespace 1329
"{" braceLeft 1330
"c" identifier 1331
"[" bracketLeft 1332
"\"g\"" string 1333
"]" bracketRight 1336
" " whitespace 1337
"=>" rocket 1338
" " whitespace 1340
"{" braceLeft 1341
"..." dotDotDot 1342
"," comma 1345
" " whitespace 1346
"\"d\"" string 1347
":" colon 1350
" " whitespace 1351
"[" bracketLeft 1352
"*" * 1353
"[" bracketLeft 1354
"2" integer 1355
"]" bracketRight 1356
"]" bracketRight 1357
"[" bracketLeft 1358
"(" parenLeft 1359
"b" identifier 1360
"->" arrow 1361
" " whitespace 1363
"||" or 1364
" " whitespace 1366
"pt" identifier 1367
"::" doubleColon 1369
"text" identifier 1371
"(" parenLeft 1375
"a" identifier 1376
")" parenRight 1377
" " whitespace 1378
"<" lt 1379
" " whitespace 1380
"-" - 1381
"1.1" float 1382
")" parenRight 1385
"]" bracketRight 1386
"[" bracketLeft 1387
"!" not 1388
"(" parenLeft 1389
"!" not 1390
"a" identifier 1391
"[" bracketLeft 1392
"]" bracketRight 1393
"." dot 1394
"a" identifier 1395
")" parenRight 1396
"]" bracketRight 1397
" " whitespace 1398
"|" pipe 1399
" " whitespace 1400
"{" braceLeft 1401
"..." dotDotDot 1402
"," comma 1405
" " whitespace 1406
"\"g\"" string 1407
":" colon 1410
" " whitespace 1411
"\"d\"" string 1412
" " whitespace 1415
"+" + 1416
" " whitespace 1417
"\"c\"" string 1418
"}" braceRight 1421
"}" braceRight 1422
"," comma 1423
" " whitespace 1424
"..." dotDotDot 1425
"}" braceRight 1428
")" parenRight 1429
" " whitespace 1430
"<" lt 1431
" " whitespace 1432
"3e-12" float 1433
" " whitespace 1438
"=>" rocket 1439
" " whitespace 1441
"{" braceLeft 1442
"\"f\"" string 1443
":" colon 1446
" " whitespace 1447
"\"f\"" string 1448
" " whitespace 1451
"+" + 1452
" " whitespace 1453
"\"f\"" string 1454
"}" braceRight 1457
"}" braceRight 1458
"}" braceRight 1459
"}" braceRight 1460
"," comma 1461
" " whitespace 1462
"..." dotDotDot 1463
"}" braceRight 1466
")" parenRight 1467
"," comma 1468
" " whitespace 1469
"!" not 1470
"c" identifier 1471
"->" arrow 1472
" " whitespace 1474
"=>" rocket 1475
" " whitespace 1477
"{" braceLeft 1478
"\"f\"" string 1479
":" colon 1482
" " whitespace 1483
"[" bracketLeft 1484
"(" parenLeft 1485
"1.1" float 1486
" " whitespace 1489
"==" equals 1490
" " whitespace 1492
"b" identifier 1493
" " whitespace 1494
"&&" and 1495
" " whitespace 1497
"!" not 1498
"c" identifier 1499
")" parenRight 1500
"," comma 1501
" " whitespace 1502
"1.1" float 1503
" " whitespace 1506
"+" + 1507
" " whitespace 1508
"-" - 1509
"1" integer 1510
"," comma 1511
" " whitespace 1512
"^" hat 1513
"." dot 1514
"^" hat 1515
"." dot 1516
"a" identifier 1517
"[" bracketLeft 1518
"]" bracketRight 1519
"." dot 1520
"b" identifier 1521
"]" bracketRight 1522
"[" bracketLeft 1523
"1000000000000000" integer 1524
".." dotDot 1540
"100" integer 1542
"]" bracketRight 1545
"," comma 1546
" " whitespace 1547
"..." dotDotDot 1548
"," comma 1551
" " whitespace 1552
"!" not 1553
"a" identifier 1554
"." dot 1555
"c" identifier 1556
" " whitespace 1557
"=>" rocket 1558
" " whitespace 1560
"{" braceLeft 1561
"\"a\"" string 1562
":" colon 1565
" " whitespace 1566
"*" * 1567
"[" bracketLeft 1568
"!" not 1569
"b" identifier 1570
"[" bracketLeft 1571
"]" bracketRight 1572
"." dot 1573
"a" identifier 1574
"]" bracketRight 1575
"[" bracketLeft 1576
"(" parenLeft 1577
"select" identifier 1578
"(" parenLeft 1584
"[" bracketLeft 1585
"[" bracketLeft 1586
"*" * 1587
"{" braceLeft 1588
"\"f\"" string 1589
":" colon 1592
" " whitespace 1593
"[" bracketLeft 1594
"(" parenLeft 1595
"count" identifier 1596
"(" parenLeft 1601
"*" * 1602
"[" bracketLeft 1603
"b" identifier 1604
"[" bracketLeft 1605
"]" bracketRight 1606
" " whitespace 1607
"<" lt 1608
" " whitespace 1609
"-" - 1610
"1.1" float 1611
"]" bracketRight 1614
"[" bracketLeft 1615
"(" parenLeft 1616
"b" identifier 1617
"->" arrow 1618
" " whitespace 1620
"=>" rocket 1621
" " whitespace 1623
"false" bool 1624
" " whitespace 1629
"&&" and 1630
" " whitespace 1632
"pt" identifier 1633
"::" doubleColon 1635
"text" identifier 1637
"(" parenLeft 1641
"c" identifier 1642
")" parenRight 1643
" " whitespace 1644
">" gt 1645
" " whitespace 1646
"true" bool 1647
")" parenRight 1651
"]" bracketRight 1652
"[" bracketLeft 1653
"(" parenLeft 1654
"a" identifier 1655
"[" bracketLeft 1656
"]" bracketRight 1657
"." dot 1658
"c" identifier 1659
" " whitespace 1660
"<=" lte 1661
" " whitespace 1663
"null" null 1664
" " whitespace 1668
"||" or 1669
" " whitespace 1671
"select" identifier 1672
"(" parenLeft 1678
"\"a\"" string 1679
" " whitespace 1682
"==" equals 1683
" " whitespace 1685
"c" identifier 1686
" " whitespace 1687
"=>" rocket 1688
" " whitespace 1690
"b" identifier 1691
")" parenRight 1692
" " whitespace 1693
"<" lt 1694
" " whitespace 1695
"null" null 1696
")" parenRight 1700
"]" bracketRight 1701
")" parenRight 1702
" " whitespace 1703
"<" lt 1704
" " whitespace 1705
"\"g\"" string 1706
" " whitespace 1709
"&&" and 1710
" " whitespace 1712
"coalesce" identifier 1713
"(" parenLeft 1721
"-" - 1722
"3e-12" float 1723
" " whitespace 1728
"*" * 1729
" " whitespace 1730
"1.1" float 1731
"," comma 1734
" " whitespace 1735
"^" hat 1736
"." dot 1737
"^" hat 1738
"." dot 1739
"^" hat 1740
"." dot 1741
"c" identifier 1742
"->" arrow 1743
"b" identifier 1745
")" parenRight 1746
" " whitespace 1747
"==" equals 1748
" " whitespace 1750
"true" bool 1751
")" parenRight 1755
"," comma 1756
" " whitespace 1757
"[" bracketLeft 1758
"]" bracketRight 1759
"[" bracketLeft 1760
"!" not 1761
"(" parenLeft 1762
"c" identifier 1763
" " whitespace 1764
"<=" lte 1765
" " whitespace 1767
"\"d\"" string 1768
")" parenRight 1771
"]" bracketRight 1772
"[" bracketLeft 1773
"!" not 1774
"a" identifier 1775
"->" arrow 1776
"c" identifier 1778
"]" bracketRight 1779
"[" bracketLeft 1780
"(" parenLeft 1781
"-" - 1782
"100" integer 1783
" " whitespace 1786
"=>" rocket 1787
" " whitespace 1789
"b" identifier 1790
")" parenRight 1791
"]" bracketRight 1792
"[" bracketLeft 1793
"(" parenLeft 1794
"coalesce" identifier 1795
"(" parenLeft 1803
"(" parenLeft 1804
"*" * 1805
"[" bracketLeft 1806
"a" identifier 1807
"]" bracketRight 1808
"[" bracketLeft 1809
"a" identifier 1810
"]" bracketRight 1811
"{" braceLeft 1812
"a" identifier 1813
" " whitespace 1814
"=>" rocket 1815
" " whitespace 1817
"{" braceLeft 1818
"\"a\"" string 1819
":" colon 1822
" " whitespace 1823
"a" identifier 1824
"}" braceRight 1825
"," comma 1826
" " whitespace 1827
"..." dotDotDot 1828
"," comma 1831
" " whitespace 1832
"a" identifier 1833
" " whitespace 1834
"=>" rocket 1835
" " whitespace 1837
"{" braceLeft 1838
"\"a\"" string 1839
":" colon 1842
" " whitespace 1843
"a" identifier 1844
"}" braceRight 1845
"}" braceRight 1846
")" parenRight 1847
"," comma 1848
" " whitespace 1849
"(" parenLeft 1850
"a" identifier 1851
"->" arrow 1852
"a" identifier 1854
" " whitespace 1855
"&&" and 1856
" " whitespace 1858
"b" identifier 1859
"." dot 1860
"c" identifier 1861
")" parenRight 1862
")" parenRight 1863
" " whitespace 1864
"<" lt 1865
" " whitespace 1866
"\"g\"" string 1867
" " whitespace 1870
"&&" and 1871
" " whitespace 1873
"c" identifier 1874
"->" arrow 1875
"." dot 1877
"b" identifier 1878
")" parenRight 1879
"]" bracketRight 1880
"[" bracketLeft 1881
"b" identifier 1882
" " whitespace 1883
"<=" lte 1884
" " whitespace 1886
"3e-12" float 1887
"]" bracketRight 1892
"[" bracketLeft 1893
"(" parenLeft 1894
"b" identifier 1895
"->" arrow 1896
"a" identifier 1898
" " whitespace 1899
"&&" and 1900
" " whitespace 1902
"!" not 1903
"c" identifier 1904
"[" bracketLeft 1905
"\"b\"" string 1906
"]" bracketRight 1909
")" parenRight 1910
"]" bracketRight 1911
"[" bracketLeft 1912
"-" - 1913
"1" integer 1914
"]" bracketRight 1915
"," comma 1916
" " whitespace 1917
"*" * 1918
" " whitespace 1919
"|" pipe 1920
" " whitespace 1921
"{" braceLeft 1922
"-" - 1923
"1.1" float 1924
" " whitespace 1927
"<=" lte 1928
" " whitespace 1930
"c" identifier 1931
" " whitespace 1932
"=>" rocket 1933
" " whitespace 1935
"{" braceLeft 1936
"\"c\"" string 1937
":" colon 1940
" " whitespace 1941
"*" * 1942
" " whitespace 1943
"|" pipe 1944
" " whitespace 1945
"{" braceLeft 1946
"..." dotDotDot 1947
"," comma 1950
" " whitespace 1951
"pt" identifier 1952
"::" doubleColon 1954
"text" identifier 1956
"(" parenLeft 1960
"a" identifier 1961
")" parenRight 1962
" " whitespace 1963
"!=" neq 1964
" " whitespace 1966
"3e-12" float 1967
" " whitespace 1972
"=>" rocket 1973
" " whitespace 1975
"{" braceLeft 1976
"null" null 1977
" " whitespace 1981
"==" equals 1982
" " whitespace 1984
"a" identifier 1985
" " whitespace 1986
"=>" rocket 1987
" " whitespace 1989
"{" braceLeft 1990
"\"a\"" string 1991
":" colon 1994
" " whitespace 1995
"a" identifier 1996
"}" braceRight 1997
"}" braceRight 1998
"}" braceRight 1999
" " whitespace 2000
"|" pipe 2001
" " whitespace 2002
"order" identifier 2003
"(" parenLeft 2008
"c" identifier 2009
")" parenRight 2010
"," comma 2011
" " whitespace 2012
"..." dotDotDot 2013
"}" braceRight 2016
"," comma 2017
" " whitespace 2018
"..." dotDotDot 2019
"," comma 2022
" " whitespace 2023
"\"f\"" string 2024
":" colon 2027
" " whitespace 2028
"$myParam" identifier 2029
"}" braceRight 2037
"]" bracketRight 2038
"[" bracketLeft 2039
"false" bool 2040
" " whitespace 2045
"<" lt 2046
" " whitespace 2047
"b" identifier 2048
"]" bracketRight 2049
"[" bracketLeft 2050
"(" parenLeft 2051
"!" not 2052
"a" identifier 2053
"." dot 2054
"a" identifier 2055
" " whitespace 2056
"||" or 2057
" " whitespace 2059
"a" identifier 2060
"->" arrow 2061
"." dot 2063
"a" identifier 2064
")" parenRight 2065
"]" bracketRight 2066
"[" bracketLeft 2067
"(" parenLeft 2068
"!" not 2069
"a" identifier 2070
"." dot 2071
"a" identifier 2072
")" parenRight 2073
"]" bracketRight 2074
"[" bracketLeft 2075
"1" integer 2076
".." dotDot 2077
"1" integer 2079
"]" bracketRight 2080
"," comma 2081
" " whitespace 2082
"..." dotDotDot 2083
"," comma 2086
" " whitespace 2087
"count" identifier 2088
"(" parenLeft 2093
"-" - 2094
"100" integer 2095
" " whitespace 2098
"/" / 2099
" " whitespace 2100
"1.1" float 2101
")" parenRight 2104
" " whitespace 2105
">" gt 2106
" " whitespace 2107
"-" - 2108
"3e12" float 2109
" " whitespace 2113
"=>" rocket 2114
" " whitespace 2116
"{" braceLeft 2117
"\"d\"" string 2118
":" colon 2121
" " whitespace 2122
"b" identifier 2123
"," comma 2124
" " whitespace 2125
"..." dotDotDot 2126
"," comma 2129
" " whitespace 2130
"c" identifier 2131
"[" bracketLeft 2132
"]" bracketRight 2133
"." dot 2134
"a" identifier 2135
" " whitespace 2136
"==" equals 2137
" " whitespace 2139
"3e-12" float 2140
" " whitespace 2145
"=>" rocket 2146
" " whitespace 2148
"{" braceLeft 2149
"\"g\"" string 2150
":" colon 2153
" " whitespace 2154
"coalesce" identifier 2155
"(" parenLeft 2163
"coalesce" identifier 2164
"(" parenLeft 2172
"b" identifier 2173
"->" arrow 2174
"," comma 2176
" " whitespace 2177
"count" identifier 2178
"(" parenLeft 2183
"^" hat 2184
"." dot 2185
"a" identifier 2186
"->" arrow 2187
")" parenRight 2189
")" parenRight 2190
"," comma 2191
" " whitespace 2192
"null" null 2193
")" parenRight 2197
"," comma 2198
" " whitespace 2199
"\"f\"" string 2200
":" colon 2203
" " whitespace 2204
"1.1" float 2205
" " whitespace 2208
"*" * 2209
" " whitespace 2210
"3e12" float 2211
"}" braceRight 2215
"}" braceRight 2216
"}" braceRight 2217
"," comma 2218
" " whitespace 2219
"1000000000000000" integer 2220
" " whitespace 2236
"-" - 2237
" " whitespace 2238
"3e-12" float 2239
"]" bracketRight 2244
"[" bracketLeft 2245
"(" parenLeft 2246
"select" identifier 2247
"(" parenLeft 2253
"\"a\"" string 2254
" " whitespace 2257
"+" + 2258
" " whitespace 2259
"\"a\"" string 2260
" " whitespace 2263
"=>" rocket 2264
" " whitespace 2266
"^" hat 2267
"." dot 2268
"^" hat 2269
"." dot 2270
"^" hat 2271
"." dot 2272
"b" identifier 2273
"->" arrow 2274
")" parenRight 2276
" " whitespace 2277
"!=" neq 2278
" " whitespace 2280
"2" integer 2281
" " whitespace 2282
"||" or 2283
" " whitespace 2285
"!" not 2286
"a" identifier 2287
"->" arrow 2288
"b" identifier 2290
")" parenRight 2291
"]" bracketRight 2292
"[" bracketLeft 2293
"(" parenLeft 2294
"c" identifier 2295
"->" arrow 2296
"c" identifier 2298
" " whitespace 2299
"||" or 2300
" " whitespace 2302
"b" identifier 2303
" " whitespace 2304
"<" lt 2305
" " whitespace 2306
"3.141592653589793" float 2307
")" parenRight 2324
"]" bracketRight 2325
" " whitespace 2326
"|" pipe 2327
" " whitespace 2328
"{" braceLeft 2329
"..." dotDotDot 2330
"," comma 2333
" " whitespace 2334
"\"c\"" string 2335
":" colon 2338
" " whitespace 2339
"^" hat 2340
"." dot 2341
"^" hat 2342
"." dot 2343
"a" identifier 2344
"->" arrow 2345
"c" identifier 2347
"}" braceRight 2348
"," comma 2349
" " whitespace 2350
"..." dotDotDot 2351
"[" bracketLeft 2354
"a" identifier 2355
"," comma 2356
" " whitespace 2357
"3.141592653589793" float 2358
" " whitespace 2375
"/" / 2376
" " whitespace 2377
"-" - 2378
"1" integer 2379
" " whitespace 2380
"|" pipe 2381
" " whitespace 2382
"order" identifier 2383
"(" parenLeft 2388
"a" identifier 2389
")" parenRight 2390
"," comma 2391
" " whitespace 2392
"@" at 2393
"." dot 2394
"b" identifier 2395
"]" bracketRight 2396
"]" bracketRight 2397
"[" bracketLeft 2398
"(" parenLeft 2399
"count" identifier 2400
"(" parenLeft 2405
"*" * 2406
"[" bracketLeft 2407
"1" integer 2408
"..." dotDotDot 2409
"1" integer 2412
"]" bracketRight 2413
")" parenRight 2414
" " whitespace 2415
"<=" lte 2416
" " whitespace 2418
"-" - 2419
"3e-12" float 2420
" " whitespace 2425
"||" or 2426
" " whitespace 2428
"-" - 2429
"1" integer 2430
" " whitespace 2431
">" gt 2432
" " whitespace 2433
"c" identifier 2434
")" parenRight 2435
"]" bracketRight 2436
"[" bracketLeft 2437
"!" not 2438
"(" parenLeft 2439
"b" identifier 2440
"." dot 2441
"c" identifier 2442
" " whitespace 2443
"==" equals 2444
" " whitespace 2446
"3e12" float 2447
")" parenRight 2451
"]" bracketRight 2452
"[" bracketLeft 2453
"(" parenLeft 2454
"true" bool 2455
" " whitespace 2459
">" gt 2460
" " whitespace 2461
"c" identifier 2462
" " whitespace 2463
"||" or 2464
" " whitespace 2466
"coalesce" identifier 2467
"(" parenLeft 2475
"*" * 2476
"[" bracketLeft 2477
"1000000000000000" integer 2478
"]" bracketRight 2494
"," comma 2495
" " whitespace 2496
"^" hat 2497
"." dot 2498
"^" hat 2499
"." dot 2500
"^" hat 2501
"." dot 2502
"c" identifier 2503
"[" bracketLeft 2504
"]" bracketRight 2505
")" parenRight 2506
" " whitespace 2507
"!=" neq 2508
" " whitespace 2510
"null" null 2511
")" parenRight 2515
"]" bracketRight 2516
" " whitespace 2517
"=>" rocket 2518
" " whitespace 2520
"*" * 2521
"{" braceLeft 2522
"\"f\"" string 2523
":" colon 2526
" " whitespace 2527
"(" parenLeft 2528
"1" integer 2529
" " whitespace 2530
"%" % 2531
" " whitespace 2532
"-" - 2533
"1.1" float 2534
")" parenRight 2537
"}" braceRight 2538
")" parenRight 2539
" " whitespace 2540
"<" lt 2541
" " whitespace 2542
"1000000000000000" integer 2543
" " whitespace 2559
"&&" and 2560
" " whitespace 2562
"count" identifier 2563
"(" parenLeft 2568
"\"b\"" string 2569
" " whitespace 2572
"+" + 2573
" " whitespace 2574
"\"d\"" string 2575
")" parenRight 2578
" " whitespace 2579
"<=" lte 2580
" " whitespace 2582
"2" integer 2583
")" parenRight 2584
"]" bracketRight 2585
"," comma 2586
" " whitespace 2587
"..." dotDotDot 2588
"," comma 2591
" " whitespace 2592
"\"b\"" string 2593
":" colon 2596
" " whitespace 2597
"[" bracketLeft 2598
"*" * 2599
"[" bracketLeft 2600
"c" identifier 2601
"->" arrow 2602
"." dot 2604
"b" identifier 2605
"]" bracketRight 2606
"," comma 2607
" " whitespace 2608
"[" bracketLeft 2609
"[" bracketLeft 2610
"[" bracketLeft 2611
"*" * 2612
"[" bracketLeft 2613
"1000000000000000" integer 2614
"]" bracketRight 2630
"]" bracketRight 2631
"[" bracketLeft 2632
"(" parenLeft 2633
"!" not 2634
"c" identifier 2635
"->" arrow 2636
" " whitespace 2638
"||" or 2639
" " whitespace 2641
"!" not 2642
"c" identifier 2643
"." dot 2644
"b" identifier 2645
")" parenRight 2646
"]" bracketRight 2647
"[" bracketLeft 2648
"(" parenLeft 2649
"b" identifier 2650
" " whitespace 2651
">" gt 2652
" " whitespace 2653
"-" - 2654
"3e12" float 2655
" " whitespace 2659
"&&" and 2660
" " whitespace 2662
"!" not 2663
"c" identifier 2664
"->" arrow 2665
")" parenRight 2667
"]" bracketRight 2668
"," comma 2669
" " whitespace 2670
"..." dotDotDot 2671
"[" bracketLeft 2674
"]" bracketRight 2675
"]" bracketRight 2676
"]" bracketRight 2677
"[" bracketLeft 2678
"!" not 2679
"(" parenLeft 2680
"\"a\"" string 2681
" " whitespace 2684
"<=" lte 2685
" " whitespace 2687
"a" identifier 2688
")" parenRight 2689
"]" bracketRight 2690
"[" bracketLeft 2691
"-" - 2692
"100" integer 2693
".." dotDot 2696
"100" integer 2698
"]" bracketRight 2701
"]" bracketRight 2702
"[" bracketLeft 2703
"(" parenLeft 2704
"!" not 2705
"b" identifier 2706
"->" arrow 2707
"b" identifier 2709
" " whitespace 2710
"&&" and 2711
" " whitespace 2713
"a" identifier 2714
"->" arrow 2715
"." dot 2717
"b" identifier 2718
" " whitespace 2719
"=>" rocket 2720
" " whitespace 2722
"null" null 2723
")" parenRight 2727
"]" bracketRight 2728
"}" braceRight 2729
"}" braceRight 2730
"}" braceRight 2731
"," comma 2732
" " whitespace 2733
"(" parenLeft 2734
"coalesce" identifier 2735
"(" parenLeft 2743
"$myParam" identifier 2744
"," comma 2752
" " whitespace 2753
"$myParam" identifier 2754
")" parenRight 2762
")" parenRight 2763
"]" bracketRight 2764
"[" bracketLeft 2765
"(" parenLeft 2766
"!" not 2767
"a" identifier 2768
"[" bracketLeft 2769
"\"b\"" string 2770
"]" bracketRight 2773
" " whitespace 2774
"&&" and 2775
" " whitespace 2777
"count" identifier 2778
"(" parenLeft 2783
"pt" identifier 2784
"::" doubleColon 2786
"text" identifier 2788
"(" parenLeft 2792
"b" identifier 2793
")" parenRight 2794
")" parenRight 2795
" " whitespace 2796
"!=" neq 2797
" " whitespace 2799
"-" - 2800
"1" integer 2801
")" parenRight 2802
"]" bracketRight 2803
"[" bracketLeft 2804
"null" null 2805
" " whitespace 2809
"<" lt 2810
" " whitespace 2811
"c" identifier 2812
"]" bracketRight 2813
"[" bracketLeft 2814
"(" parenLeft 2815
"!" not 2816
"b" identifier 2817
"->" arrow 2818
"b" identifier 2820
" " whitespace 2821
"&&" and 2822
" " whitespace 2824
"null" null 2825
" " whitespace 2829
"<" lt 2830
" " whitespace 2831
"a" identifier 2832
")" parenRight 2833
"]" bracketRight 2834
"[" bracketLeft 2835
"(" parenLeft 2836
"b" identifier 2837
" " whitespace 2838
"=>" rocket 2839
" " whitespace 2841
"3.141592653589793" float 2842
" " whitespace 2859
"||" or 2860
" " whitespace 2862
"c" identifier 2863
"[" bracketLeft 2864
"]" bracketRight 2865
")" parenRight 2866
"]" bracketRight 2867
"[" bracketLeft 2868
"(" parenLeft 2869
"true" bool 2870
" " whitespace 2874
"<=" lte 2875
" " whitespace 2877
"b" identifier 2878
" " whitespace 2879
"||" or 2880
" " whitespace 2882
"\"g\"" string 2883
" " whitespace 2886
"==" equals 2887
" " whitespace 2889
"b" identifier 2890
")" parenRight 2891
"]" bracketRight 2892
"[" bracketLeft 2893
"(" parenLeft 2894
"count" identifier 2895
"(" parenLeft 2900
"\"a\"" string 2901
" " whitespace 2904
"+" + 2905
" " whitespace 2906
"\"c\"" string 2907
")" parenRight 2910
" " whitespace 2911
">" gt 2912
" " whitespace 2913
"null" null 2914
")" parenRight 2918
"]" bracketRight 2919
"[" bracketLeft 2920
"-" - 2921
"100" integer 2922
"]" bracketRight 2925
" " whitespace 2926
"|" pipe 2927
" " whitespace 2928
"order" identifier 2929
"(" parenLeft 2934
"b" identifier 2935
")" parenRight 2936
")" parenRight 2937
" " whitespace 2938
">" gt 2939
" " whitespace 2940
"1" integer 2941
")" parenRight 2942
"]" bracketRight 2943
" " whitespace 2944
"|" pipe 2945
" " whitespace 2946
"{" braceLeft 2947
"\"e\"" string 2948
":" colon 2951
" " whitespace 2952
"$myParam" identifier 2953
"}" braceRight 2961
"," comma 2962
" " whitespace 2963
"coalesce" identifier 2964
"(" parenLeft 2972
"[" bracketLeft 2973
"[" bracketLeft 2974
"1000000000000000" integer 2975
" " whitespace 2991
"%" % 2992
" " whitespace 2993
"1.1" float 2994
"," comma 2997
" " whitespace 2998
"..." dotDotDot 2999
"[" bracketLeft 3002
"$myParam" identifier 3003
"]" bracketRight 3011
"]" bracketRight 3012
"," comma 3013
" " whitespace 3014
"1" integer 3015
"," comma 3016
" " whitespace 3017
"(" parenLeft 3018
"count" identifier 3019
"(" parenLeft 3024
"pt" identifier 3025
"::" doubleColon 3027
"text" identifier 3029
"(" parenLeft 3033
"a" identifier 3034
")" parenRight 3035
")" parenRight 3036
")" parenRight 3037
"]" bracketRight 3038
"[" bracketLeft 3039
"100" integer 3040
"]" bracketRight 3043
"," comma 3044
" " whitespace 3045
"@" at 3046
")" parenRight 3047
")" parenRight 3048
" " whitespace 3049
"=>" rocket 3050
" " whitespace 3052
"3e12" float 3053
" " whitespace 3057
"=>" rocket 3058
" " whitespace 3060
"{" braceLeft 3061
"b" identifier 3062
"[" bracketLeft 3063
"]" bracketRight 3064
" " whitespace 3065
">" gt 3066
" " whitespace 3067
"3e12" float 3068
" " whitespace 3072
"=>" rocket 3073
" " whitespace 3075
"{" braceLeft 3076
"..." dotDotDot 3077
"," comma 3080
" " whitespace 3081
"\"g\"" string 3082
":" colon 3085
" " whitespace 3086
"3.141592653589793" float 3087
" " whitespace 3104
"+" + 3105
" " whitespace 3106
"3.141592653589793" float 3107
"}" braceRight 3124
"," comma 3125
" " whitespace 3126
"b" identifier 3127
"->" arrow 3128
" " whitespace 3130
"=>" rocket 3131
" " whitespace 3133
"{" braceLeft 3134
"..." dotDotDot 3135
"," comma 3138
" " whitespace 3139
"count" identifier 3140
"(" parenLeft 3145
"*" * 3146
"{" braceLeft 3147
"a" identifier 3148
"->" arrow 3149
"." dot 3151
"a" identifier 3152
" " whitespace 3153
"<=" lte 3154
" " whitespace 3156
"-" - 3157
"1" integer 3158
" " whitespace 3159
"=>" rocket 3160
" " whitespace 3162
"{" braceLeft 3163
"\"d\"" string 3164
":" colon 3167
" " whitespace 3168
"(" parenLeft 3169
"c" identifier 3170
"[" bracketLeft 3171
"\"e\"" string 3172
"]" bracketRight 3175
" " whitespace 3176
"==" equals 3177
" " whitespace 3179
"3e12" float 3180
")" parenRight 3184
"," comma 3185
" " whitespace 3186
"..." dotDotDot 3187
"," comma 3190
" " whitespace 3191
"false" bool 3192
" " whitespace 3197
"==" equals 3198
" " whitespace 3200
"b" identifier 3201
" " whitespace 3202
"=>" rocket 3203
" " whitespace 3205
"{" braceLeft 3206
"\"e\"" string 3207
":" colon 3210
" " whitespace 3211
"count" identifier 3212
"(" parenLeft 3217
"^" hat 3218
"." dot 3219
"b" identifier 3220
"->" arrow 3221
"." dot 3223
"c" identifier 3224
")" parenRight 3225
"," comma 3226
" " whitespace 3227
"..." dotDotDot 3228
"," comma 3231
" " whitespace 3232
"b" identifier 3233
"[" bracketLeft 3234
"]" bracketRight 3235
"." dot 3236
"c" identifier 3237
" " whitespace 3238
"=>" rocket 3239
" " whitespace 3241
"{" braceLeft 3242
"\"f\"" string 3243
":" colon 3246
" " whitespace 3247
"-" - 3248
"100" integer 3249
" " whitespace 3252
"-" - 3253
" " whitespace 3254
"-" - 3255
"3e-12" float 3256
"," comma 3261
" " whitespace 3262
"a" identifier 3263
"->" arrow 3264
" " whitespace 3266
"=>" rocket 3267
" " whitespace 3269
"{" braceLeft 3270
"\"f\"" string 3271
":" colon 3274
" " whitespace 3275
"\"f\"" string 3276
" " whitespace 3279
"+" + 3280
" " whitespace 3281
"\"d\"" string 3282
"," comma 3285
" " whitespace 3286
"c" identifier 3287
"[" bracketLeft 3288
"]" bracketRight 3289
"." dot 3290
"c" identifier 3291
" " whitespace 3292
"=>" rocket 3293
" " whitespace 3295
"{" braceLeft 3296
"b" identifier 3297
"[" bracketLeft 3298
"\"a\"" string 3299
"]" bracketRight 3302
" " whitespace 3303
"<=" lte 3304
" " whitespace 3306
"null" null 3307
" " whitespace 3311
"=>" rocket 3312
" " whitespace 3314
"{" braceLeft 3315
"..." dotDotDot 3316
"," comma 3319
" " whitespace 3320
"a" identifier 3321
"." dot 3322
"b" identifier 3323
" " whitespace 3324
"=>" rocket 3325
" " whitespace 3327
"{" braceLeft 3328
"c" identifier 3329
"->" arrow 3330
"b" identifier 3332
" " whitespace 3333
"=>" rocket 3334
" " whitespace 3336
"{" braceLeft 3337
"\"e\"" string 3338
":" colon 3341
" " whitespace 3342
"select" identifier 3343
"(" parenLeft 3349
"^" hat 3350
"." dot 3351
"^" hat 3352
"." dot 3353
"^" hat 3354
"." dot 3355
"c" identifier 3356
"->" arrow 3357
" " whitespace 3359
"=>" rocket 3360
" " whitespace 3362
"(" parenLeft 3363
"-" - 3364
"1" integer 3365
" " whitespace 3366
"/" / 3367
" " whitespace 3368
"-" - 3369
"3e12" float 3370
")" parenRight 3374
")" parenRight 3375
"," comma 3376
" " whitespace 3377
"..." dotDotDot 3378
"," comma 3381
" " whitespace 3382
"pt" identifier 3383
"::" doubleColon 3385
"text" identifier 3387
"(" parenLeft 3391
"a" identifier 3392
")" parenRight 3393
" " whitespace 3394
"<=" lte 3395
" " whitespace 3397
"3e-12" float 3398
" " whitespace 3403
"=>" rocket 3404
" " whitespace 3406
"{" braceLeft 3407
"false" bool 3408
" " whitespace 3413
"==" equals 3414
" " whitespace 3416
"a" identifier 3417
" " whitespace 3418
"=>" rocket 3419
" " whitespace 3421
"{" braceLeft 3422
"!" not 3423
"c" identifier 3424
"[" bracketLeft 3425
"]" bracketRight 3426
"." dot 3427
"b" identifier 3428
" " whitespace 3429
"=>" rocket 3430
" " whitespace 3432
"{" braceLeft 3433
"a" identifier 3434
"[" bracketLeft 3435
"\"a\"" string 3436
"]" bracketRight 3439
" " whitespace 3440
"<" lt 3441
" " whitespace 3442
"false" bool 3443
" " whitespace 3448
"=>" rocket 3449
" " whitespace 3451
"{" braceLeft 3452
"b" identifier 3453
"[" bracketLeft 3454
"\"b\"" string 3455
"]" bracketRight 3458
" " whitespace 3459
"=>" rocket 3460
" " whitespace 3462
"{" braceLeft 3463
"\"b\"" string 3464
":" colon 3467
" " whitespace 3468
"[" bracketLeft 3469
"$myParam" identifier 3470
" " whitespace 3478
"|" pipe 3479
" " whitespace 3480
"order" identifier 3481
"(" parenLeft 3486
"c" identifier 3487
")" parenRight 3488
"," comma 3489
" " whitespace 3490
"(" parenLeft 3491
"\"a\"" string 3492
" " whitespace 3495
"+" + 3496
" " whitespace 3497
"\"e\"" string 3498
" " whitespace 3501
"|" pipe 3502
" " whitespace 3503
"order" identifier 3504
"(" parenLeft 3509
"a" identifier 3510
")" parenRight 3511
")" parenRight 3512
"]" bracketRight 3513
"[" bracketLeft 3514
"-" - 3515
"100" integer 3516
"..." dotDotDot 3519
"1" integer 3522
"]" bracketRight 3523
"}" braceRight 3524
"," comma 3525
" " whitespace 3526
"..." dotDotDot 3527
"}" braceRight 3530
"," comma 3531
" " whitespace 3532
"..." dotDotDot 3533
"}" braceRight 3536
"," comma 3537
" " whitespace 3538
"..." dotDotDot 3539
"," comma 3542
" " whitespace 3543
"c" identifier 3544
"[" bracketLeft 3545
"]" bracketRight 3546
"." dot 3547
"b" identifier 3548
" " whitespace 3549
"=>" rocket 3550
" " whitespace 3552
"{" braceLeft 3553
"\"f\"" string 3554
":" colon 3557
" " whitespace 3558
"(" parenLeft 3559
"*" * 3560
"[" bracketLeft 3561
"1000000000000000" integer 3562
"]" bracketRight 3578
")" parenRight 3579
"," comma 3580
" " whitespace 3581
"..." dotDotDot 3582
"," comma 3585
" " whitespace 3586
"\"b\"" string 3587
":" colon 3590
" " whitespace 3591
"*" * 3592
"}" braceRight 3593
"}" braceRight 3594
"}" braceRight 3595
"}" braceRight 3596
"," comma 3597
" " whitespace 3598
"..." dotDotDot 3599
"}" braceRight 3602
"}" braceRight 3603
"}" braceRight 3604
"}" braceRight 3605
"}" braceRight 3606
"}" braceRight 3607
"}" braceRight 3608
"}" braceRight 3609
")" parenRight 3610
" " whitespace 3611
"!=" neq 3612
" " whitespace 3614
"true" bool 3615
" " whitespace 3619
"=>" rocket 3620
" " whitespace 3622
"{" braceLeft 3623
"\"f\"" string 3624
":" colon 3627
" " whitespace 3628
"select" identifier 3629
"(" parenLeft 3635
"*" * 3636
"[" bracketLeft 3637
"100" integer 3638
"]" bracketRight 3641
" " whitespace 3642
"=>" rocket 3643
" " whitespace 3645
"c" identifier 3646
" " whitespace 3647
"|" pipe 3648
" " whitespace 3649
"order" identifier 3650
"(" parenLeft 3655
"b" identifier 3656
")" parenRight 3657
")" parenRight 3658
"," comma 3659
" " whitespace 3660
"..." dotDotDot 3661
"," comma 3664
" " whitespace 3665
"!" not 3666
"c" identifier 3667
"." dot 3668
"a" identifier 3669
" " whitespace 3670
"=>" rocket 3671
" " whitespace 3673
"{" braceLeft 3674
"null" null 3675
" " whitespace 3679
"=>" rocket 3680
" " whitespace 3682
"c" identifier 3683
" " whitespace 3684
"=>" rocket 3685
" " whitespace 3687
"{" braceLeft 3688
"!" not 3689
"b" identifier 3690
"." dot 3691
"b" identifier 3692
" " whitespace 3693
"=>" rocket 3694
" " whitespace 3696
"{" braceLeft 3697
"\"e\"" string 3698
":" colon 3701
" " whitespace 3702
"a" identifier 3703
"," comma 3704
" " whitespace 3705
"\"d\"" string 3706
":" colon 3709
" " whitespace 3710
"*" * 3711
"[" bracketLeft 3712
"(" parenLeft 3713
"select" identifier 3714
"(" parenLeft 3720
"\"d\"" string 3721
" " whitespace 3724
"+" + 3725
" " whitespace 3726
"\"e\"" string 3727
" " whitespace 3730
"=>" rocket 3731
" " whitespace 3733
"(" parenLeft 3734
"c" identifier 3735
")" parenRight 3736
")" parenRight 3737
" " whitespace 3738
"<=" lte 3739
" " whitespace 3741
"false" bool 3742
" " whitespace 3747
"||" or 3748
" " whitespace 3750
"coalesce" identifier 3751
"(" parenLeft 3759
"*" * 3760
"[" bracketLeft 3761
"(" parenLeft 3762
"b" identifier 3763
"->" arrow 3764
"a" identifier 3766
")" parenRight 3767
"]" bracketRight 3768
"," comma 3769
" " whitespace 3770
"*" * 3771
")" parenRight 3772
" " whitespace 3773
"<" lt 3774
" " whitespace 3775
"false" bool 3776
")" parenRight 3781
"]" bracketRight 3782
"[" bracketLeft 3783
"(" parenLeft 3784
"3.141592653589793" float 3785
" " whitespace 3802
"<" lt 3803
" " whitespace 3804
"c" identifier 3805
")" parenRight 3806
"]" bracketRight 3807
"[" bracketLeft 3808
"100" integer 3809
"]" bracketRight 3812
"}" braceRight 3813
"}" braceRight 3814
"," comma 3815
" " whitespace 3816
"b" identifier 3817
"->" arrow 3818
" " whitespace 3820
"=>" rocket 3821
" " whitespace 3823
"{" braceLeft 3824
"null" null 3825
" " whitespace 3829
">" gt 3830
" " whitespace 3831
"b" identifier 3832
" " whitespace 3833
"=>" rocket 3834
" " whitespace 3836
"{" braceLeft 3837
"b" identifier 3838
"." dot 3839
"a" identifier 3840
" " whitespace 3841
"<" lt 3842
" " whitespace 3843
"100" integer 3844
" " whitespace 3847
"=>" rocket 3848
" " whitespace 3850
"{" braceLeft 3851
"b" identifier 3852
"." dot 3853
"a" identifier 3854
" " whitespace 3855
"=>" rocket 3856
" " whitespace 3858
"{" braceLeft 3859
"\"a\"" string 3860
":" colon 3863
" " whitespace 3864
"^" hat 3865
"." dot 3866
"c" identifier 3867
"," comma 3868
" " whitespace 3869
"!" not 3870
"c" identifier 3871
"->" arrow 3872
"a" identifier 3874
" " whitespace 3875
"=>" rocket 3876
" " whitespace 3878
"{" braceLeft 3879
"-" - 3880
"1.1" float 3881
" " whitespace 3884
"!=" neq 3885
" " whitespace 3887
"b" identifier 3888
" " whitespace 3889
"=>" rocket 3890
" " whitespace 3892
"{" braceLeft 3893
"..." dotDotDot 3894
"," comma 3897
" " whitespace 3898
"a" identifier 3899
"->" arrow 3900
"b" identifier 3902
" " whitespace 3903
"=>" rocket 3904
" " whitespace 3906
"{" braceLeft 3907
"1" integer 3908
" " whitespace 3909
"!=" neq 3910
" " whitespace 3912
"a" identifier 3913
" " whitespace 3914
"=>" rocket 3915
" " whitespace 3917
"{" braceLeft 3918
"b" identifier 3919
"[" bracketLeft 3920
"\"e\"" string 3921
"]" bracketRight 3924
" " whitespace 3925
"!=" neq 3926
" " whitespace 3928
"1.1" float 3929
" " whitespace 3932
"=>" rocket 3933
" " whitespace 3935
"{" braceLeft 3936
"c" identifier 3937
"[" bracketLeft 3938
"]" bracketRight 3939
"." dot 3940
"b" identifier 3941
" " whitespace 3942
"<=" lte 3943
" " whitespace 3945
"3.141592653589793" float 3946
" " whitespace 3963
"=>" rocket 3964
" " whitespace 3966
"{" braceLeft 3967
"..." dotDotDot 3968
"," comma 3971
" " whitespace 3972
"pt" identifier 3973
"::" doubleColon 3975
"text" identifier 3977
"(" parenLeft 3981
"b" identifier 3982
")" parenRight 3983
" " whitespace 3984
"<" lt 3985
" " whitespace 3986
"true" bool 3987
" " whitespace 3991
"=>" rocket 3992
" " whitespace 3994
"{" braceLeft 3995
"\"a\"" string 3996
":" colon 3999
" " whitespace 4000
"{" braceLeft 4001
"c" identifier 4002
"[" bracketLeft 4003
"]" bracketRight 4004
" " whitespace 4005
"=>" rocket 4006
" " whitespace 4008
"{" braceLeft 4009
"\"g\"" string 4010
":" colon 4013
" " whitespace 4014
"*" * 4015
"," comma 4016
" " whitespace 4017
"..." dotDotDot 4018
"," comma 4021
" " whitespace 4022
"\"d\"" string 4023
":" colon 4026
" " whitespace 4027
"[" bracketLeft 4028
"count" identifier 4029
"(" parenLeft 4034
"b" identifier 4035
"[" bracketLeft 4036
"]" bracketRight 4037
")" parenRight 4038
"," comma 4039
" " whitespace 4040
"..." dotDotDot 4041
"[" bracketLeft 4044
"@" at 4045
"," comma 4046
" " whitespace 4047
"-" - 4048
"1.1" float 4049
" " whitespace 4052
"-" - 4053
" " whitespace 4054
"-" - 4055
"1" integer 4056
"," comma 4057
" " whitespace 4058
"pt" identifier 4059
"::" doubleColon 4061
"text" identifier 4063
"(" parenLeft 4067
"c" identifier 4068
")" parenRight 4069
"]" bracketRight 4070
"]" bracketRight 4071
"[" bracketLeft 4072
"1" integer 4073
"]" bracketRight 4074
"}" braceRight 4075
"}" braceRight 4076
"," comma 4077
" " whitespace 4078
"count" identifier 4079
"(" parenLeft 4084
"@" at 4085
")" parenRight 4086
" " whitespace 4087
">" gt 4088
" " whitespace 4089
"1000000000000000" integer 4090
" " whitespace 4106
"=>" rocket 4107
" " whitespace 4109
"{" braceLeft 4110
"select" identifier 4111
"(" parenLeft 4117
"select" identifier 4118
"(" parenLeft 4124
"^" hat 4125
"." dot 4126
"c" identifier 4127
"->" arrow 4128
"b" identifier 4130
" " whitespace 4131
"=>" rocket 4132
" " whitespace 4134
"@" at 4135
"." dot 4136
"a" identifier 4137
")" parenRight 4138
" " whitespace 4139
"=>" rocket 4140
" " whitespace 4142
"@" at 4143
")" parenRight 4144
" " whitespace 4145
"<=" lte 4146
" " whitespace 4148
"null" null 4149
" " whitespace 4153
"=>" rocket 4154
" " whitespace 4156
"{" braceLeft 4157
"..." dotDotDot 4158
"," comma 4161
" " whitespace 4162
"\"d\"" string 4163
":" colon 4166
" " whitespace 4167
"[" bracketLeft 4168
"{" braceLeft 4169
"!" not 4170
"a" identifier 4171
"->" arrow 4172
"c" identifier 4174
" " whitespace 4175
"=>" rocket 4176
" " whitespace 4178
"{" braceLeft 4179
"select" identifier 4180
"(" parenLeft 4186
"!" not 4187
"(" parenLeft 4188
"c" identifier 4189
"[" bracketLeft 4190
"]" bracketRight 4191
")" parenRight 4192
" " whitespace 4193
"=>" rocket 4194
" " whitespace 4196
"^" hat 4197
"." dot 4198
"a" identifier 4199
")" parenRight 4200
" " whitespace 4201
">" gt 4202
" " whitespace 4203
"1" integer 4204
" " whitespace 4205
"=>" rocket 4206
" " whitespace 4208
"{" braceLeft 4209
"\"c\"" string 4210
":" colon 4213
" " whitespace 4214
"*" * 4215
"[" bracketLeft 4216
"(" parenLeft 4217
"count" identifier 4218
"(" parenLeft 4223
"*" * 4224
"[" bracketLeft 4225
"!" not 4226
"c" identifier 4227
"[" bracketLeft 4228
"]" bracketRight 4229
"]" bracketRight 4230
"[" bracketLeft 4231
"(" parenLeft 4232
"!" not 4233
"a" identifier 4234
"[" bracketLeft 4235
"]" bracketRight 4236
" " whitespace 4237
"||" or 4238
" " whitespace 4240
"!" not 4241
"a" identifier 4242
"." dot 4243
"b" identifier 4244
")" parenRight 4245
"]" bracketRight 4246
")" parenRight 4247
" " whitespace 4248
"==" equals 4249
" " whitespace 4251
"null" null 4252
")" parenRight 4256
"]" bracketRight 4257
"{" braceLeft 4258
"..." dotDotDot 4259
"," comma 4262
" " whitespace 4263
"!" not 4264
"c" identifier 4265
"[" bracketLeft 4266
"]" bracketRight 4267
" " whitespace 4268
"=>" rocket 4269
" " whitespace 4271
"{" braceLeft 4272
"pt" identifier 4273
"::" doubleColon 4275
"text" identifier 4277
"(" parenLeft 4281
"c" identifier 4282
")" parenRight 4283
" " whitespace 4284
"==" equals 4285
" " whitespace 4287
"null" null 4288
" " whitespace 4292
"=>" rocket 4293
" " whitespace 4295
"{" braceLeft 4296
"..." dotDotDot 4297
"," comma 4300
" " whitespace 4301
"\"e\"" string 4302
":" colon 4305
" " whitespace 4306
"@" at 4307
"." dot 4308
"c" identifier 4309
"}" braceRight 4310
"," comma 4311
" " whitespace 4312
"..." dotDotDot 4313
"}" braceRight 4316
"}" braceRight 4317
"}" braceRight 4318
"," comma 4319
" " whitespace 4320
"..." dotDotDot 4321
"}" braceRight 4324
"}" braceRight 4325
"," comma 4326
" " whitespace 4327
"..." dotDotDot 4328
"[" bracketLeft 4331
"*" * 4332
"[" bracketLeft 4333
"!" not 4334
"(" parenLeft 4335
"\"a\"" string 4336
" " whitespace 4339
"!=" neq 4340
" " whitespace 4342
"a" identifier 4343
")" parenRight 4344
"]" bracketRight 4345
"[" bracketLeft 4346
"(" parenLeft 4347
"3.141592653589793" float 4348
" " whitespace 4365
"!=" neq 4366
" " whitespace 4368
"c" identifier 4369
" " whitespace 4370
"||" or 4371
" " whitespace 4373
"count" identifier 4374
"(" parenLeft 4379
"[" bracketLeft 4380
"[" bracketLeft 4381
"2" integer 4382
" " whitespace 4383
"+" + 4384
" " whitespace 4385
"3.141592653589793" float 4386
"]" bracketRight 4403
"," comma 4404
" " whitespace 4405
"(" parenLeft 4406
"*" * 4407
"[" bracketLeft 4408
"(" parenLeft 4409
"a" identifier 4410
"->" arrow 4411
"b" identifier 4413
" " whitespace 4414
"||" or 4415
" " whitespace 4417
"b" identifier 4418
"[" bracketLeft 4419
"\"b\"" string 4420
"]" bracketRight 4423
" " whitespace 4424
"=>" rocket 4425
" " whitespace 4427
"\"b\"" string 4428
")" parenRight 4431
"]" bracketRight 4432
"[" bracketLeft 4433
"!" not 4434
"(" parenLeft 4435
"select" identifier 4436
"(" parenLeft 4442
"a" identifier 4443
" " whitespace 4444
"=>" rocket 4445
" " whitespace 4447
"(" parenLeft 4448
"count" identifier 4449
"(" parenLeft 4454
"a" identifier 4455
")" parenRight 4456
" " whitespace 4457
"=>" rocket 4458
" " whitespace 4460
"true" bool 4461
" " whitespace 4465
"&&" and 4466
" " whitespace 4468
"count" identifier 4469
"(" parenLeft 4474
"!" not 4475
"(" parenLeft 4476
"!" not 4477
"b" identifier 4478
"->" arrow 4479
"a" identifier 4481
")" parenRight 4482
")" parenRight 4483
" " whitespace 4484
"!=" neq 4485
" " whitespace 4487
"null" null 4488
")" parenRight 4492
")" parenRight 4493
" " whitespace 4494
"<=" lte 4495
" " whitespace 4497
"false" bool 4498
")" parenRight 4503
"]" bracketRight 4504
")" parenRight 4505
" " whitespace 4506
"|" pipe 4507
" " whitespace 4508
"order" identifier 4509
"(" parenLeft 4514
"b" identifier 4515
")" parenRight 4516
"," comma 4517
" " whitespace 4518
"\"f\"" string 4519
" " whitespace 4522
"+" + 4523
" " whitespace 4524
"\"e\"" string 4525
"]" bracketRight 4528
"{" braceLeft 4529
"\"b\"" string 4530
":" colon 4533
" " whitespace 4534
"$myParam" identifier 4535
"," comma 4543
" " whitespace 4544
"..." dotDotDot 4545
"," comma 4548
" " whitespace 4549
"\"e\"" string 4550
":" colon 4553
" " whitespace 4554
"{" braceLeft 4555
"..." dotDotDot 4556
"," comma 4559
" " whitespace 4560
"\"d\"" string 4561
":" colon 4564
" " whitespace 4565
"[" bracketLeft 4566
"a" identifier 4567
"," comma 4568
" " whitespace 4569
"..." dotDotDot 4570
"[" bracketLeft 4573
"$myParam" identifier 4574
"]" bracketRight 4582
"]" bracketRight 4583
"[" bracketLeft 4584
"-" - 4585
"100" integer 4586
"]" bracketRight 4589
"}" braceRight 4590
" " whitespace 4591
"|" pipe 4592
" " whitespace 4593
"order" identifier 4594
"(" parenLeft 4599
"c" identifier 4600
")" parenRight 4601
"}" braceRight 4602
")" parenRight 4603
" " whitespace 4604
"<=" lte 4605
" " whitespace 4607
"\"c\"" string 4608
")" parenRight 4611
"]" bracketRight 4612
"," comma 4613
" " whitespace 4614
"..." dotDotDot 4615
"[" bracketLeft 4618
"(" parenLeft 4619
"a" identifier 4620
")" parenRight 4621
"," comma 4622
" " whitespace 4623
"select" identifier 4624
"(" parenLeft 4630
"$myParam" identifier 4631
" " whitespace 4639
"=>" rocket 4640
" " whitespace 4642
"*" * 4643
"{" braceLeft 4644
"..." dotDotDot 4645
"," comma 4648
" " whitespace 4649
"\"b\"" string 4650
":" colon 4653
" " whitespace 4654
"[" bracketLeft 4655
"]" bracketRight 4656
"}" braceRight 4657
")" parenRight 4658
"," comma 4659
" " whitespace 4660
"(" parenLeft 4661
"a" identifier 4662
"->" arrow 4663
" " whitespace 4665
"==" equals 4666
" " whitespace 4668
"true" bool 4669
" " whitespace 4673
"&&" and 4674
" " whitespace 4676
"c" identifier 4677
"[" bracketLeft 4678
"]" bracketRight 4679
"." dot 4680
"c" identifier 4681
")" parenRight 4682
"]" bracketRight 4683
"]" bracketRight 4684
"]" bracketRight 4685
"[" bracketLeft 4686
"coalesce" identifier 4687
"(" parenLeft 4695
"$myParam" identifier 4696
"," comma 4704
" " whitespace 4705
"1" integer 4706
")" parenRight 4707
" " whitespace 4708
"!=" neq 4709
" " whitespace 4711
"\"c\"" string 4712
"]" bracketRight 4715
"}" braceRight 4716
"}" braceRight 4717
"}" braceRight 4718
"}" braceRight 4719
"," comma 4720
" " whitespace 4721
"\"g\"" string 4722
":" colon 4725
" " whitespace 4726
"*" * 4727
"[" bracketLeft 4728
"1" integer 4729
"..." dotDotDot 4730
"-" - 4733
"1" integer 4734
"]" bracketRight 4735
" " whitespace 4736
"|" pipe 4737
" " whitespace 4738
"order" identifier 4739
"(" parenLeft 4744
"a" identifier 4745
")" parenRight 4746
"}" braceRight 4747
"}" braceRight 4748
"," comma 4749
" " whitespace 4750
"..." dotDotDot 4751
"," comma 4754
" " whitespace 4755
"!" not 4756
"c" identifier 4757
"[" bracketLeft 4758
"\"g\"" string 4759
"]" bracketRight 4762
" " whitespace 4763
"=>" rocket 4764
" " whitespace 4766
"{" braceLeft 4767
"!" not 4768
"b" identifier 4769
"->" arrow 4770
" " whitespace 4772
"=>" rocket 4773
" " whitespace 4775
"{" braceLeft 4776
"..." dotDotDot 4777
"," comma 4780
" " whitespace 4781
"\"g\"" string 4782
":" colon 4785
" " whitespace 4786
"a" identifier 4787
"}" braceRight 4788
"," comma 4789
" " whitespace 4790
"..." dotDotDot 4791
"," comma 4794
" " whitespace 4795
"\"g\"" string 4796
":" colon 4799
" " whitespace 4800
"*" * 4801
"[" bracketLeft 4802
"-" - 4803
"100" integer 4804
"]" bracketRight 4807
"}" braceRight 4808
"}" braceRight 4809
"}" braceRight 4810
"}" braceRight 4811
"}" braceRight 4812
"," comma 4813
" " whitespace 4814
"..." dotDotDot 4815
"}" braceRight 4818
"," comma 4819
" " whitespace 4820
"..." dotDotDot 4821
"}" braceRight 4824
"}" braceRight 4825
"}" braceRight 4826
"}" braceRight 4827
"}" braceRight 4828
"}" braceRight 4829
"," comma 4830
" " whitespace 4831
"..." dotDotDot 4832
"}" braceRight 4835
"}" braceRight 4836
"," comma 4837
" " whitespace 4838
"\"a\"" string 4839
":" colon 4842
" " whitespace 4843
"*" * 4844
"[" bracketLeft 4845
"2" integer 4846
"]" bracketRight 4847
"}" braceRight 4848
"," comma 4849
" " whitespace 4850
"..." dotDotDot 4851
"," comma 4854
" " whitespace 4855
"-" - 4856
"3e12" float 4857
" " whitespace 4861
">" gt 4862
" " whitespace 4863
"a" identifier 4864
" " whitespace 4865
"=>" rocket 4866
" " whitespace 4868
"{" braceLeft 4869
"\"f\"" string 4870
":" colon 4873
" " whitespace 4874
"*" * 4875
"[" bracketLeft 4876
"(" parenLeft 4877
"b" identifier 4878
" " whitespace 4879
"==" equals 4880
" " whitespace 4882
"true" bool 4883
")" parenRight 4887
"]" bracketRight 4888
"[" bracketLeft 4889
"1000000000000000" integer 4890
"]" bracketRight 4906
"," comma 4907
" " whitespace 4908
"..." dotDotDot 4909
"}" braceRight 4912
"}" braceRight 4913
"}" braceRight 4914
"}" braceRight 4915
"}" braceRight 4916
"," comma 4917
" " whitespace 4918
"\"a\"" string 4919
":" colon 4922
" " whitespace 4923
"[" bracketLeft 4924
"\"g\"" string 4925
" " whitespace 4928
"+" + 4929
" " whitespace 4930
"\"d\"" string 4931
"]" bracketRight 4934
"}" braceRight 4935
"," comma 4936
" " whitespace 4937
"\"d\"" string 4938
":" colon 4941
" " whitespace 4942
"(" parenLeft 4943
"[" bracketLeft 4944
"*" * 4945
" " whitespace 4946
"|" pipe 4947
" " whitespace 4948
"{" braceLeft 4949
"c" identifier 4950
"->" arrow 4951
"." dot 4953
"c" identifier 4954
" " whitespace 4955
"<" lt 4956
" " whitespace 4957
"false" bool 4958
" " whitespace 4963
"=>" rocket 4964
" " whitespace 4966
"{" braceLeft 4967
"\"c\"" string 4968
":" colon 4971
" " whitespace 4972
"@" at 4973
"," comma 4974
" " whitespace 4975
"..." dotDotDot 4976
"," comma 4979
" " whitespace 4980
"c" identifier 4981
"[" bracketLeft 4982
"\"f\"" string 4983
"]" bracketRight 4986
" " whitespace 4987
"=>" rocket 4988
" " whitespace 4990
"{" braceLeft 4991
"!" not 4992
"c" identifier 4993
" " whitespace 4994
"=>" rocket 4995
" " whitespace 4997
"{" braceLeft 4998
"\"c\"" string 4999
":" colon 5002
" " whitespace 5003
"[" bracketLeft 5004
"-" - 5005
"100" integer 5006
" " whitespace 5009
"<=" lte 5010
" " whitespace 5012
"c" identifier 5013
"]" bracketRight 5014
"[" bracketLeft 5015
"-" - 5016
"100" integer 5017
"..." dotDotDot 5020
"1" integer 5023
"]" bracketRight 5024
"," comma 5025
" " whitespace 5026
"..." dotDotDot 5027
"," comma 5030
" " whitespace 5031
"!" not 5032
"c" identifier 5033
"->" arrow 5034
"a" identifier 5036
" " whitespace 5037
"=>" rocket 5038
" " whitespace 5040
"{" braceLeft 5041
"\"d\"" string 5042
":" colon 5045
" " whitespace 5046
"[" bracketLeft 5047
"$myParam" identifier 5048
"," comma 5056
" " whitespace 5057
"[" bracketLeft 5058
"@" at 5059
"." dot 5060
"c" identifier 5061
"," comma 5062
" " whitespace 5063
"[" bracketLeft 5064
"-" - 5065
"1" integer 5066
" " whitespace 5067
"%" % 5068
" " whitespace 5069
"1" integer 5070
"]" bracketRight 5071
"[" bracketLeft 5072
"(" parenLeft 5073
"b" identifier 5074
"->" arrow 5075
"a" identifier 5077
" " whitespace 5078
"||" or 5079
" " whitespace 5081
"true" bool 5082
" " whitespace 5086
"<" lt 5087
" " whitespace 5088
"c" identifier 5089
")" parenRight 5090
"]" bracketRight 5091
" " whitespace 5092
"|" pipe 5093
" " whitespace 5094
"order" identifier 5095
"(" parenLeft 5100
"c" identifier 5101
")" parenRight 5102
"," comma 5103
" " whitespace 5104
"c" identifier 5105
"]" bracketRight 5106
"[" bracketLeft 5107
"null" null 5108
" " whitespace 5112
"==" equals 5113
" " whitespace 5115
"a" identifier 5116
"]" bracketRight 5117
" " whitespace 5118
"|" pipe 5119
" " whitespace 5120
"{" braceLeft 5121
"\"d\"" string 5122
":" colon 5125
" " whitespace 5126
"[" bracketLeft 5127
"]" bracketRight 5128
"[" bracketLeft 5129
"1" integer 5130
"]" bracketRight 5131
"}" braceRight 5132
"]" bracketRight 5133
"}" braceRight 5134
"}" braceRight 5135
"," comma 5136
" " whitespace 5137
"..." dotDotDot 5138
"}" braceRight 5141
"}" braceRight 5142
"," comma 5143
" " whitespace 5144
"..." dotDotDot 5145
"}" braceRight 5148
"," comma 5149
" " whitespace 5150
"[" bracketLeft 5151
"(" parenLeft 5152
"[" bracketLeft 5153
"a" identifier 5154
"," comma 5155
" " whitespace 5156
"\"c\"" string 5157
" " whitespace 5160
"+" + 5161
" " whitespace 5162
"\"g\"" string 5163
"]" bracketRight 5166
"[" bracketLeft 5167
"!" not 5168
"(" parenLeft 5169
"a" identifier 5170
"[" bracketLeft 5171
"]" bracketRight 5172
")" parenRight 5173
"]" bracketRight 5174
"[" bracketLeft 5175
"(" parenLeft 5176
"c" identifier 5177
"[" bracketLeft 5178
"]" bracketRight 5179
"." dot 5180
"c" identifier 5181
" " whitespace 5182
"||" or 5183
" " whitespace 5185
"b" identifier 5186
"[" bracketLeft 5187
"]" bracketRight 5188
" " whitespace 5189
"<" lt 5190
" " whitespace 5191
"\"d\"" string 5192
")" parenRight 5195
"]" bracketRight 5196
")" parenRight 5197
"]" bracketRight 5198
"[" bracketLeft 5199
"(" parenLeft 5200
"select" identifier 5201
"(" parenLeft 5207
"!" not 5208
"(" parenLeft 5209
"b" identifier 5210
"->" arrow 5211
"." dot 5213
"b" identifier 5214
" " whitespace 5215
"==" equals 5216
" " whitespace 5218
"-" - 5219
"100" integer 5220
")" parenRight 5223
" " whitespace 5224
"=>" rocket 5225
" " whitespace 5227
"[" bracketLeft 5228
"*" * 5229
"[" bracketLeft 5230
"-" - 5231
"1" integer 5232
"]" bracketRight 5233
"," comma 5234
" " whitespace 5235
"..." dotDotDot 5236
"[" bracketLeft 5239
"]" bracketRight 5240
"]" bracketRight 5241
")" parenRight 5242
" " whitespace 5243
"=>" rocket 5244
" " whitespace 5246
"1" integer 5247
" " whitespace 5248
"&&" and 5249
" " whitespace 5251
"\"b\"" string 5252
" " whitespace 5255
"<" lt 5256
" " whitespace 5257
"c" identifier 5258
")" parenRight 5259
"]" bracketRight 5260
"]" bracketRight 5261
")" parenRight 5262
"}" braceRight 5263
"," comma 5264
" " whitespace 5265
"null" null 5266
" " whitespace 5270
"<=" lte 5271
" " whitespace 5273
"b" identifier 5274
")" parenRight 5275
"" eof 5276
